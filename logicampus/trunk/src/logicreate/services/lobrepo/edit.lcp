<?

include_once(LIB_PATH.'PBDO/LobContent.php');
include_once(LIB_PATH.'PBDO/LobMetadata.php');
include_once(LIB_PATH.'PBDO/LobUserLink.php');

include_once(LIB_PATH.'lob/lc_lob.php');
include_once(LIB_PATH.'lob/lc_lob_test.php');
include_once(LIB_PATH.'lc_table.php');
include_once(LIB_PATH.'lc_table_renderer.php');

/**
 * Learning Object Repository
 */
class Edit extends FacultyService {

	var $presentor='htmlPresentation';
	var $sectionTitle = 'Classroom Manager';
	var $navlinks = array (
		''=>''
		);


	/**
	 *
	 */
	function run(&$db,&$u,&$lc,&$t) {
		$lobId = addslashes(trim($lc->getvars['c']));
		$lc->templateName = 'edit_main';
		
		$lob = new Lc_Lob_Content($lobId);

		$t['lob'] = $lob;
		// Use start of content as description
		if (strlen($t['lob']->repoObj->lobDescription) < 1 && $t['lob']->isText()) {
			$t['lob_description'] = substr( strip_tags($t['lob']->lobSub->lobText, '<ul><li><p><h3><h4><span>'),0,1000);
			if (strlen($t['lob']->lobSub->lobText) > 1000) {
				$t['lob_description'] .= ' ...';
			}
		} else {
				$t['lob_description'] = $t['lob']->repoObj->lobDescription;
		}

		$t['lob_bytes'] = Lc_Lob_Util::formatBytes($t['lob']->repoObj->lobBytes);

		if ($t['lob']->lobSubType == 'image') {
			$t['iconUrl'] = appurl('lobrepo/preview/c='.$t['lob']->lobContentId);
		} else {
			$t['iconUrl'] = IMAGES_URL.'mimetypes/'.Lc_Lob_Util::getMimeIcon($t['lob']->repoObj->lobMime);
		}
	}


	/**
	 * show edit form
	 */
	function changeRun(&$db,&$u,&$lc,&$t) {
		$id = intval($lc->getvars['id']);

		$lob = new Lc_Lob_Content($id);

		$t['lob'] = $lob;
		$t['lobTitle'] = $lob->getTitle();
		$t['mimetype'] = $lob->repObj->lobMime;

		if ($lob->isFile()) {
			$lc->templateName = 'add_doc';
		} else if ($lob->isImage()) {
			$lc->templateName = 'add_image';
		} else if ($lob->isActivity()) {
			$lc->templateName = 'add_activity';
		} else if ($lob->isTest()) {
			$lc->templateName = 'add_test';
		} else {
			$lc->templateName = 'add_html';
		}
	}


	/**
	 * Save a content obj to the db
	 */
	function saveRun(&$db,&$u,&$lc,&$t) {
		$id = intval($lc->postvars['lob_id']);
		$lob = new Lc_Lob_Content($id);
		
		if ($lc->postvars['lob_sub_type'] == 'document') {
			
			$lob->setFile(
					$lc->uploads['content']['tmp_name'], 
					$lc->uploads['content']['name']);
			$lob->updateAsFile($lc->postvars['txTitle'], 'document');
		}
		if ($lc->postvars['lob_sub_type'] == 'image') {
			$lob->setFile(
					$lc->uploads['content']['tmp_name'], 
					$lc->uploads['content']['name']);
			$lob->updateAsFile($lc->postvars['txTitle'], 'image');
		}
		$lob->set('lobDescription', $lc->postvars['description']);

		if ($lc->postvars['lob_sub_type'] == 'text') {
			$lob->setTextContent($lc->postvars['txText']);
			$lob->set('lobTitle', $lc->postvars['txTitle']);
			if (@isset($lc->postvars['mime'])  && strlen($lc->postvars['mime'])) {
				$lob->set('lobMime', $lc->postvars['mime']);
			}
		}

		if ($lc->postvars['lob_sub_type'] == 'html') {
			$lob->setTextContent($lc->postvars['txText']);
			$lob->set('lobTitle', $lc->postvars['txTitle']);
			if (@isset($lc->postvars['mime'])  && strlen($lc->postvars['mime'])) {
				$lob->set('lobMime', $lc->postvars['mime']);
			}
		}


		//create the link text in a standard way
		$lob->set('lobUrltitle',
			Lc_Lob_Util::createLinkText($lob->get('lobTitle'))
		);

		$lob->setCaption($lc->postvars['caption']);


		if ($lob->repoObj->isNew()) {
			$saveUser = true;
		} else {
			$saveUser = false;
		}


		$lob->save();
		//get the new ID if a new save
		if ($id == 0) {
			$id = $lob->repoObj->getPrimaryKey();
		}

		if ($saveUser) {
			$lobUserObj = new LobUserLink();
			$lobUserObj->set('lobRepoEntryId',$lob->repoObj->getPrimaryKey());
			$lobUserObj->set('userId',$u->userId);
			$lobUserObj->set('lobKind','content');
			$lobUserObj->save();
		}

//		$lob->repoObj->lobBinary = '';
//		debug($lob);
//		exit();

		$u->addSessionMessage('Successfully saved <i>&quot;'.htmlentities($lob->get('lobTitle'),ENT_QUOTES, 'UTF-8').'&quot;</i>.');
		//$u->addSessionMessage('Successfully saved <i>&quot;'.htmlentities($lc->uploads['content']['name'])."-".htmlentities($lc->uploads['content']['tmp_name']).'&quot;</i>.');
		$this->presentor = 'redirectPresentation';
		$t['url'] = appurl('lobrepo/edit/event=meta/id='.$id);
	}


	/**
	 * Show form for editing meta-data
	 */
	function metaRun(&$db,&$u,&$lc,&$t) {
		$lobId = intval($lc->getvars['id']);
		$lc->templateName = 'edit_meta';
		$lob = new Lc_Lob_Content($lobId);
		
		$t['lob'] = $lob;
		$t['licenses'] = $this->getLicenseArray();
	}

	/**
	 * Save meta-data changes
	 */
	function saveMetaRun(&$db,&$u,&$lc,&$t) {
		$lobId = intval($lc->getvars['id']);
		if ($lobId < 1) { 
			trigger_error('no valid ID found');
			return false;
		}
		$lc->templateName = 'edit_meta';
		$lob = new Lc_Lob_Content($lobId);
		if ($lob->repoObj->isNew()) {
			trigger_error('unable to load content object.');
			return false;
		}
		$lob->updateMeta($lc->postvars);
		$lob->save();

		$u->addSessionMessage('Successfully saved <i>&quot;'.htmlentities($lob->get('lobTitle'),ENT_QUOTES, 'UTF-8').'&quot;</i>.');

		$this->presentor = 'redirectPresentation';
		$t['url'] = appurl('lobrepo/edit/c='.$lob->repoObj->getPrimaryKey());
	}


	/**
	 * Update the notes field, do not increase the version number.
	 */
	function notesRun(&$db,&$u,&$lc,&$t) {
		$lobId = intval($lc->postvars['id']);
		$lobObj = LobRepoEntry::load($lobId);
		$lobObj->lobNotes = $lc->postvars['lob_notes'];
		$lobObj->save();
		$class_id=intval($lc->postvars['lob_notes']);
		
		$this->presentor = 'redirectPresentation';
		
		$t['url'] = appurl('lobrepo/myobj/');
	}

	function saveActRun(&$db,&$u,&$lc,&$t) {
		$id = intval($lc->postvars['lob_id']);
		$lob = new Lc_Lob_Activity($id);


		if ($lob->repoObj->isNew()) {
			$saveUser = true;
		} else {
			$saveUser = false;
		}

		$lob->setResponseType( intval( $lc->postvars['responseType'] ) );
		$lob->set('lobSubType', $lob->getResponseTypeName() );

		$lob->set('lobDescription', $lc->postvars['instructions']);
		$lob->set('lobNotes', $lc->postvars['notes']);
		$lob->set('lobTitle', $lc->postvars['title']);
		//create the link text in a standard way
		$lob->set('lobUrltitle',
			Lc_Lob_Util::createLinkText($lob->get('lobTitle'))
		);



		$lob->save();
		//get the new ID if a new save
		if ($id == 0) {
			$id = $lob->repoObj->getPrimaryKey();
		}


		if ($saveUser) {
			$lobUserObj = new LobUserLink();
			$lobUserObj->set('lobRepoEntryId',$lob->repoObj->getPrimaryKey());
			$lobUserObj->set('userId',$u->userId);
			$lobUserObj->set('lobKind','content');
			$lobUserObj->save();
		}

		$this->presentor = 'redirectPresentation';
		$t['url'] = appurl('lobrepo/edit/c='.$id);

	}


	function getLicenseArray() {
		return array('ccl30' => 'Creative Commons License 3.0',
				'ccancsa30' => 'Creative Commons Attribution-Noncommercial-Share Alike 3.0',
				'private' => 'Private Copyright');
	}
}

?>
