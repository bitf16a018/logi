<?


include_once(LIB_PATH.'PBDO/LobRepoEntry.php');
include_once(LIB_PATH.'PBDO/LobMetadata.php');
include_once(LIB_PATH.'PBDO/LobUserLink.php');

include_once(LIB_PATH.'PBDO/LobContent.php');
include_once(LIB_PATH.'PBDO/LobActivity.php');
include_once(LIB_PATH.'PBDO/LobTest.php');

include_once(LIB_PATH.'lob/lc_lob.php');
include_once(LIB_PATH.'xmlparser.php');
/**
 * Learning Object Repository
 */
class Import extends FacultyService {

	var $presentor='htmlPresentation';
	var $sectionTitle = 'Classroom Manager';
	var $navlinks = array (
		''=>''
		);


	/**
	 *
	 */
	function run(&$db,&$u,&$lc,&$t) {
		$lc->templateName='import_main';
	}

	function handleUploadRun(&$db,&$u,&$lc,&$t)
	{
		if ($lc->uploads['lobxml']['error']) {
			$this->presentor = 'errorMessage';
			$t['message'] = "There was a problem with the upload."; 
			return false;
		}


		
		//$tempdir="c:/windows/temp";
		
		//$this->tempdir = $tempdir;
		
	
		
		//$target_path=explode(".",$lc->uploads['lobxml']['tmp_name']);
		//$target_pathing=$target_path[0].".zip";
		//move_uploaded_file($lc->uploads['lobxml']['tmp_name'],$target_pathing);
		$file = $lc->uploads['lobxml']['tmp_name'];
		//$file = substr($file, 0, strlen($file)-4);
		//$file .= '.zip';		
		exec('mkdir '.$file.'_dir;');
		$this->tempdir = $file['tmp_name'].'_dir';
		$tempdir = $this->tempdir;		
		$this->unzipper($file,$tempdir);
		echo $tempdir;
		
		$doc = new DomDocument('1.0', 'UTF-8');
		$doc->substituteEntities=false;
		$doc->resolveExternals=false;
		$doc->preserveWhiteSpace=true;
		$doc->validateOnParse=false;
		
		if (!$doc->load( $tempdir."/learningobjects.xml") ) {
			$this->presentor = 'errorMessage';
			$t['message'] ="This file does not seem to be a proper backup file. (cannot find learningobjects.xml)"; 
			//$this->cleanupDir($tempdir);
			return false;
		}

		$root = $doc->childNodes;
		//get the "lobcol" node
		$collectionNode = $root->item(1);

		$lobNodes = $collectionNode->getElementsByTagnameNS('http://logicampus.sourceforge.net/2006/learning_object','obj');
		$xml_contents = file_get_contents($tempdir."/learningobjects.xml");
		$xmlObj = new xmlparser($xml_contents);
		$root_node =& $xmlObj->getRoot();
		foreach($root_node->children as $classdata_node)
		{	
			
			
			if ($classdata_node->tag == 'lob:obj')
			{
				// execute classroom restore
				
				$this->lobobj_node($u,$db,$classdata_node);
				
			} else
			{
				
				// what other tag could it be? if anything else, we won't process. we have one responsability.. to restore CLASSROOM node
			}
			$this->presentor = 'redirectPresentation';
		$t['url'] = appurl('classmgr');
		}
		
		$this->run(&$db,&$u,&$lc,&$t);
	return;
	}
		/**
	 * return a lob content sub-object
	 */
	 
	  function test_child($u,$db,$node)
	  {
	  			
	 	$class=$u->activeClassTaught->id_classes;
		$userId=$u->userId;
		$lob_guid=$node->attrs['guid'];
		
		$child=$node->children[0];
		$lob_type=$child->value;
		
		$child=$node->children[1];
		$lob_subtype=$child->value;
					
		$child=$node->children[2];
		$lob_mime=$child->value;
		
		$child=$node->children[3];
		$lob_title=$child->value;
		
		$child=$node->children[4];
		$lob_description=$child->value;
		
		$child=$node->children[5];
		$lob_copystyle=$child->value;
		
		$child=$node->children[6];
		$lob_testqst=$child->value;
		if($lob_testqst=' ')
		{
		$lob_testqst=' ';
		}
		$child=$node->children[7];
		$lob_qstchoices=$child->value;
		$lob_qstchoices=addslashes($lob_qstchoices);
		$child=$node->children[8];
		$lob_qsttype=$child->value;
		
		$child=$node->children[9];
		$lob_qstpoints=$child->value;
		
		$child=$node->children[10];
		$lob_numretry=$child->value;
		
		$child=$node->children[11];
		$lob_ispractice=$child->value;
		
		$child=$node->children[12];
		$lob_image=$child->value;
		
		$child=$node->children[13];
		
		$lifecyle=$child;
		$child=$lifecyle->children[0];
		$lob_createdon=$child->value;
		$child=$lifecyle->children[1];
		$lob_version=$child->value;
		
		$updatedtime=date("U");
	 	$lob_repo_entry_id=0;
		$lob_class_repo_id=0;
		$lob_test_id=0;
					
				  $db->query("select * from lob_repo_entry where lob_guid='$lob_guid'");
				  if($db->nextRecord())
				  {
				  	$db->query("update lob_repo_entry set lob_title='$lob_title', lob_type='$lob_type', lob_sub_type='$lob_subtype', lob_mime='$lob_mime', lob_description='$lob_description',lob_version='$lob_version' where lob_guid='$lob_guid' ");
				  }else
				  {
				  	$db->query("insert into lob_repo_entry(lob_guid,lob_title,lob_type,lob_sub_type,lob_mime,lob_description,lob_version) values('$lob_guid','$lob_title','$lob_type','$lob_subtype','$lob_mime','$lob_description','$lob_version')");
				  }
				  $db->query("select * from lob_repo_entry where lob_guid='$lob_guid'");
				  if($db->nextRecord())
				  {
				  $lob_repo_entry_id=$db->record['lob_repo_entry_id'];
				  }
				  $db->query("select * from lob_class_repo where lob_guid='$lob_guid'");
				  if($db->nextRecord())
				  {
				  	$db->query("update lob_class_repo set lob_title='$lob_title', lob_type='$lob_type', lob_sub_type='$lob_subtype', lob_mime='$lob_mime', lob_description='$lob_description',lob_version='$lob_version',lob_copy_style='$lob_copystyle' where lob_guid='$lob_guid' ");
				  }else
				  {
				  $db->query("insert into lob_class_repo(class_id,lob_repo_entry_id,lob_guid,lob_title,lob_type,lob_sub_type,lob_mime,lob_description,lob_version,lob_copy_style) values($class,$lob_repo_entry_id,'$lob_guid','$lob_title','$lob_type','$lob_subtype','$lob_mime','$lob_description','$lob_version','$lob_copystyle')");
				  }
				  
				  $db->query("select * from lob_class_repo where lob_guid='$lob_guid' and lob_repo_entry_id=$lob_repo_entry_id");
				  if($db->nextRecord())
				  {
				  $lob_class_repo_id=$db->record['lob_class_repo_id'];
				  }
				 
				
				  
				  $db->query("select * from lob_test where lob_repo_entry_id=$lob_repo_entry_id");
				  if($db->nextRecord())
				  {
				  
				  }else
				  {
				  	$db->query("insert into lob_test(lob_repo_entry_id) values($lob_repo_entry_id)");
				  }
				 
				  $db->query("select * from lob_test where lob_repo_entry_id=$lob_repo_entry_id");
				  if($db->nextRecord())
				  {
				  $lob_test_id=$db->record['lob_test_id'];
				  }
				  $db->query("select * from lob_class_test where lob_class_repo_id=$lob_class_repo_id");
				  if($db->nextRecord())
				  {
				  			$db->query("update lob_class_test set num_retry=$lob_numretry, is_practice=$lob_ispractice where lob_class_repo_id=$lob_class_repo_id");
				  }else
				  {
				  	
				  	$db->query("insert into lob_class_test(lob_class_repo_id,num_retry,is_practice) values($lob_class_repo_id,$lob_numretry,$lob_ispractice)");
				  }
				  
				 
				  $db->query("select * from lob_test_qst where lob_test_id=$lob_test_id");
				  if($db->nextRecord())
				  {
				  	
				  	$db->query("update lob_test_qst set qst_text='$lob_testqst', qst_choices='$lob_qstchoices', question_type_id=$lob_qsttype, image_content_id='$image' where lob_test_id=$lob_test_id" );
				  	
				  }else
				  {
				  	$db->query("insert into lob_test_qst(lob_test_id,qst_text,qst_choices,question_type_id,image_content_id) values($lob_test_id,'$lobtestqst','$lob_qstchoices','$lob_qsttype','$image')");
				  }
				  $db->query("select * from lob_user_link where lob_repo_entry_id=$lob_repo_entry_id and user_id=$userId");
						if($db->nextRecord())
						{
							
						}else
						{
							$db->query("insert into lob_user_link(lob_repo_entry_id,user_id) values($lob_repo_entry_id,$userId)");
						}
					$this->saveMetadata($db,$lob_repo_entry_id,$lob_class_repo_id,'','','','','','',$lob_createdon,$updatedtime);		  
	  
	  }
	 
	 function activity_child($u,$db,$node)
	 {
	 	
	 	
	 	$class=$u->activeClassTaught->id_classes;
		$userId=$u->userId;
		$lob_guid=$node->attrs['guid'];
		
		$child=$node->children[0];
		$lob_type=$child->value;
		
		$child=$node->children[1];
		$lob_sub_type=$child->value;
		
		$child=$node->children[2];
		$lob_actualsub_type=$child->value;
		
		$child=$node->children[3];
		$lob_mime=$child->value;
		
		$child=$node->children[4];
		$lob_title=$child->value;
		
		$child=$node->children[5];
		$lob_description=$child->value;
		
		$child=$node->children[6];
		$lob_urltitle=$child->value;
		echo $lob_urltitle."urltitle-";
		$child=$node->children[7];
		$lob_copystyle=$child->value;
		
		$child=$node->children[8];
		$lob_notes=$child->value;
		echo $lob_notes."notes-";
		$child=$node->children[9];
		$lifecyle=$child;
		
		$child=$lifecyle->children[0];
		$lob_createdon=$child->value;
		
		$child=$lifecyle->children[1];
		$lob_version=$child->value;
	 	echo $lob_version."version-";
	 	$updatedtime=date("U");
	 	$lob_repo_entry_id=0;
		$lob_class_repo_id=0;
	 	$reponse_type=0;
	 	
			if($lob_sub_type=='assignment')
			{
				
				$reponse_type=1;
			}else if($lob_sub_type=='activity')
			{
			$reponse_type=5;
	 		}else
	 		{
	 		$reponse_type=6;
	 		}
				 
				

				
			
	 	
	 	
	 	$db->query("select * from lob_repo_entry where lob_guid='$lob_guid'");
		if($db->nextRecord())
		{
		echo "update lob_repo_entry set lob_title='$lob_title',lob_type='$lob_type',lob_sub_type='$lob_sub_type',lob_mime='$lob_mime',lob_urltitle='$lob_urltitle',lob_notes='$lob_notes',lob_description='$lob_description',lob_version=$lob_version where lob_guid='$lob_guid'"."-->";
		$db->query("update lob_repo_entry set lob_title='$lob_title',lob_type='$lob_type',lob_sub_type='$lob_sub_type',lob_mime='$lob_mime',lob_urltitle='$lob_urltitle',lob_notes='$lob_notes',lob_description='$lob_description',lob_version=$lob_version where lob_guid='$lob_guid'");
		
		}else
		{
		$db->query("insert into lob_repo_entry(lob_guid,lob_title,lob_type,lob_sub_type,lob_mime,lob_urltitle,lob_notes,lob_description,lob_version) values('$lob_guid','$lob_title','$lob_type','$lob_sub_type','$lob_mime','$lob_url','$lob_notes','$lob_description','$lob_version')");
		}
	 	$db->query("select * from lob_repo_entry where lob_guid='$lob_guid'");
		if($db->nextRecord())
		{
		$lob_repo_entry_id=$db->record['lob_repo_entry_id'];
		
		}
		
		$db->query("select * from lob_class_repo where class_id=$class and lob_repo_entry_id=$lob_repo_entry_id");
		if($db->nextRecord())
		{
		$db->query("update lob_class_repo set lob_guid='$lob_guid',lob_title='$lob_title',lob_urltitle='$lob_url',lob_type='$lob_type',lob_sub_type='$lob_sub_type',lob_mime='$lob_mime', lob_version=$lob_version,lob_copy_style='$lob_copystyle'  where class_id=$class and lob_repo_entry_id=$lob_repo_entry_id");
		
		}else
		{
		$db->query("insert into lob_class_repo(class_id,lob_repo_entry_id,lob_guid,lob_title,lob_urltitle,lob_type,lob_sub_type,lob_mime,lob_version,lob_copy_style) values($class,$lob_repo_entry_id,'$lob_guid','$lob_title','$lob_url','$lob_type','$lob_sub_type','$lob_mime',$lob_version,'$lob_copystyle')");
		
		}
		
		$db->query("select * from lob_class_repo where lob_repo_entry_id=$lob_repo_entry_id");
		if($db->nextRecord())
		{
		$lob_class_repo_id=$db->record['lob_class_repo_id'];
		}
		
		$db->query("select * from lob_class_activity where lob_class_repo_id=$lob_class_repo_id");
		if($db->nextRecord())
		{
			$db->query("update lob_class_activity set response_type_id=$reponse_type where lob_class_repo_id=$lob_class_repo_id ");
		}else
		{
			
			$db->query("insert into lob_class_activity(lob_class_repo_id,response_type_id) values($lob_class_repo_id,$reponse_type)");
		}
	 	$db->query("select * from lob_activity where lob_repo_entry_id=$lob_repo_entry_id");
		if($db->nextRecord())
		{
			$db->query("update lob_class_activity set response_type_id=$reponse_type where lob_class_repo_id=$lob_class_repo_id ");
		}else
		{
			
			$db->query("insert into lob_activity(lob_repo_entry_id,response_type_id) values($lob_repo_entry_id,$reponse_type)");
		}
	 	$db->query("select * from lob_user_link where lob_repo_entry_id=$lob_repo_entry_id and user_id=$userId");
		if($db->nextRecord())
		{
			
		}else
		{
			$db->query("insert into lob_user_link(lob_repo_entry_id,user_id) values($lob_repo_entry_id,$userId)");
		}
	 	$this->saveMetadata($db,$lob_repo_entry_id,$lob_class_repo_id,'','','','','','',$lob_createdon,$updatedtime);
	 
	 
	 }
	
	function document_child($u,$db,$node)
	{
		$class=$u->activeClassTaught->id_classes;
		$userId=$u->userId;
		$lob_guid=$node->attrs['guid'];
		
		$child=$node->children[0];
		$lob_type=$child->value;
		
		$child=$node->children[1];
		$lob_sub_type=$child->value;
		
		$child=$node->children[2];
		$lob_mime=$child->value;
		
		$child=$node->children[3];
		$lob_title=$child->value;
		
		$child=$node->children[4];
		$lob_url=$child->value;
		
		$child=$node->children[5];
		$lob_filename=$child->value;
		
		
		
		$lob_filename;
		
		$document_file=file_get_contents($this->tempdir.'/content/'.trim($lob_filename));
		$document_file=addslashes($document_file);
				
		
		$child=$node->children[6];
		$lob_description=$child->value;
		
		$child=$node->children[7];
		$lob_caption=$child->value;
		
		$child=$node->children[8];
		$lob_notes=$child->value;
		
		$child=$node->children[9];
		$lifecyle=$child;
		 
		$child=$node->children[10];
		$metadata=$child;
		
		
		$child=$lifecyle->children[0];
		
		$lob_createdon=$child->value;
		
		$child=$lifecyle->children[1];
		
		$lob_version=$child->value;
		
		
		$lob_repo_entry_id=0;
		$lob_class_repo_id=0;
		
		
		$child=($metadata->children[0]);
		$meta_subject=$child->value;
		
		$child=$metadata->children[1];	
		$meta_subjectDisc=$child->value;
		
		$child=$metadata->children[2];
		$meta_author=$child->value;
		
		$child=$metadata->children[3];
		$meta_source=$child->value;
		$child=$metadata->children[4];
		 
		$meta_copyright=$child->value;
		
		$child=$metadata->children[5];
		$meta_license=$child->value;
		$updatedtime=date("U");
		$db->query("select * from lob_repo_entry where lob_guid='$lob_guid'");
		if($db->nextRecord())
		{
		
		$db->query("update lob_repo_entry set lob_title='$lob_title',lob_type='$lob_type',lob_sub_type='$lob_sub_type',lob_mime='$lob_mime',lob_urltitle='$lob_url',lob_notes='$lob_notes',lob_description='$lob_description',lob_version=$lob_version where lob_guid='$lob_guid'");
		
		}else
		{
		$db->query("insert into lob_repo_entry(lob_guid,lob_title,lob_type,lob_sub_type,lob_mime,lob_urltitle,lob_notes,lob_description,lob_version) values('$lob_guid','$lob_title','$lob_type','$lob_sub_type','$lob_mime','$lob_url','$lob_notes','$lob_description','$lob_version')");
		}
	
		
		 //getting lob_guid of latest lob from lob_repo_entry
		$db->query("select * from lob_repo_entry where lob_guid='$lob_guid'");
		if($db->nextRecord())
		{
		$lob_repo_entry_id=$db->record['lob_repo_entry_id'];
		
		}
		//lob_user_link
		$db->query("select * from lob_user_link where lob_repo_entry_id=$lob_repo_entry_id and user_id=$userId");
		if($db->nextRecord())
		{
			
		}else
		{
			$db->query("insert into lob_user_link(lob_repo_entry_id,user_id) values($lob_repo_entry_id,$userId)");
		}
		//setting data in lob_metadata
		
		  
		 $db->query("select * from lob_metadata where lob_repo_entry_id=$lob_repo_entry_id");
		if($db->nextRecord())
		{
			$db->query("update lob_metadata set created_on='$lob_createdon' where lob_repo_entry_id='$lob_repo_entry_id'");
			
		}else
		{
		$db->query("insert into lob_metadata(lob_repo_entry_id,created_on) values($lob_repo_entry_id,$lob_createdon)");
		}
		$db->query("select * from lob_content where lob_repo_entry_id=$lob_repo_entry_id");
		if($db->nextRecord())
		{
			$db->query("update lob_content set lob_binary='$document_file',lob_caption='$lob_caption',lob_filename='$lob_filename' where lob_repo_entry_id='$lob_repo_entry_id'");
		}else
		{
			$db->query("insert into lob_content(lob_binary,lob_repo_entry_id,lob_caption,lob_filename) values('$document_file',$lob_repo_entry_id,'$lob_caption','$lob_filename')");
		}
		
		//setting data in lob_class_repo
		$db->query("select * from lob_class_repo where class_id=$class and lob_repo_entry_id=$lob_repo_entry_id");
		if($db->nextRecord())
		{
		$db->query("update lob_class_repo set lob_guid='$lob_guid',lob_title='$lob_title',lob_urltitle='$lob_url',lob_type='$lob_type',lob_sub_type='$lob_sub_type',lob_mime='$lob_mime', lob_version=$lob_version  where class_id=$class and lob_repo_entry_id=$lob_repo_entry_id");
		
		}else
		{
		$db->query("insert into lob_class_repo(class_id,lob_repo_entry_id,lob_guid,lob_title,lob_urltitle,lob_type,lob_sub_type,lob_mime,lob_version) values($class,$lob_repo_entry_id,'$lob_guid','$lob_title','$lob_url','$lob_type','$lob_sub_type','$lob_mime',$lob_version)");
		}
		
		$db->query("select * from lob_class_repo where lob_repo_entry_id=$lob_repo_entry_id");
		if($db->nextRecord())
		{
		$lob_class_repo_id=$db->record['lob_class_repo_id'];
		}
		//setting data in lob_class_content
		$db->query("select * from lob_class_content where lob_class_repo_id=$lob_class_repo_id");
		if($db->nextRecord())
		{
			$db->query("update lob_class_content set lob_binary='$document_file', lob_filename='$lob_filename', lob_caption='$lob_caption' where lob_class_repo_id='$lob_class_repo_id'");
		}else
		{
			$db->query("insert into lob_class_content(lob_class_repo_id,lob_binary,lob_filename,lob_caption) values($lob_class_repo_id,'$document_file','$lob_filename','$lob_caption')");
		}
		//Entered data in tables
	
		$this->saveMetadata($db,$lob_repo_entry_id,$lob_class_repo_id,$meta_subject,$meta_subjectDisc,$meta_author,$meta_source,$meta_copyright,$meta_license,$lob_createdon,$updatedtime);
		
	}
	
	function text_child($u,$db,$node)
	{
		$class=$u->activeClassTaught->id_classes;
		$userId=$u->userId;
		
		$lob_guid=$node->attrs['guid'];
		//echo $lob_guid;
		$child=$node->children[0];
		$lob_type=$child->value;
		//echo $lob_type;
		$child=$node->children[1];
		$lob_sub_type=$child->value;
		//echo $lob_sub_type;
		$child=$node->children[2];
		$lob_mime=$child->value;
		//echo $lob_mime;
		$child=$node->children[3];
		$lob_title=$child->value;
		//echo $lob_title;
		$child=$node->children[4];
		$lob_url=$child->value;
		//echo $lob_url;
		$child=$node->children[5];
		$lob_text=$child->value;
		//echo $lob_text;
		$child=$node->children[6];
		
		$lob_notes=$child->value;
		//echo $lob_meta;
		
		$child=$node->children[7];
		$lifecyle=$child;
		$child=$node->children[8];
		
		$metadata=$child;
		$child=$lifecyle->children[0];
		
		$lob_createdon=$child->value;
		//echo $lob_createdon;
		$child=$lifecyle->children[1];
		$lob_version=$child->value;
		//echo $lob_version;
		$lob_repo_entry_id=0;
		$lob_class_repo_id=0;
		
		
		$child=($metadata->children[0]);
		$meta_subject=$child->value;
		
		$child=$metadata->children[1];	
		$meta_subjectDisc=$child->value;
		$child=$metadata->children[2];
		$meta_author=$child->value;
		
		$child=$metadata->children[3];
		$meta_source=$child->value;
		$child=$metadata->children[4];
		 
		$meta_copyright=$child->value;
		
		$child=$metadata->children[5];
		$meta_license=$child->value;
		$updatedtime=date("U");
		//Entering data in tables
		
		//Entering text into lob_repo_entry
		
		$db->query("select * from lob_repo_entry where lob_guid='$lob_guid'");
		if($db->nextRecord())
		{
		$db->query("update lob_repo_entry set lob_title='$lob_title',lob_type='$lob_type',lob_sub_type='$lob_sub_type',lob_mime='$lob_mime',lob_urltitle='$lob_url',lob_version=$lob_version, lob_notes='$lob_notes' where lob_guid='$lob_guid'");
		$lob_repo_entry_id=$db->record['lob_repo_entry_id'];
		}else
		{
		$db->query("insert into lob_repo_entry(lob_guid,lob_title,lob_type,lob_sub_type,lob_mime,lob_urltitle,lob_version,lob_notes) values('$lob_guid','$lob_title','$lob_type','$lob_sub_type','$lob_mime','$lob_url','$lob_version','$lob_notes')");
		}
		
		//getting lob_guid of latest lob from lob_repo_entry
		$db->query("select * from lob_repo_entry where lob_guid='$lob_guid'");
		if($db->nextRecord())
		{
		$lob_repo_entry_id=$db->record['lob_repo_entry_id'];
		
		}
		//lob_user_link
		$db->query("select * from lob_user_link where lob_repo_entry_id=$lob_repo_entry_id and user_id=$userId");
		if($db->nextRecord())
		{
			
		}else
		{
			$db->query("insert into lob_user_link(lob_repo_entry_id,user_id) values($lob_repo_entry_id,$userId)");
		}
		//setting data in lob_metadata
		$db->query("select * from lob_metadata where lob_repo_entry_id=$lob_repo_entry_id");
		if($db->nextRecord())
		{
			$db->query("update lob_metadata set created_on='$lob_createdon' where lob_repo_entry_id='$lob_repo_entry_id'");
			
		}else
		{
			$db->query("insert into lob_metadata(lob_repo_entry_id,created_on) values($lob_repo_entry_id,$lob_createdon)");
		}
		$db->query("select * from lob_content where lob_repo_entry_id=$lob_repo_entry_id");
		if($db->nextRecord())
		{
			$db->query("update lob_content set lob_text='$lob_text' where lob_repo_entry_id='$lob_repo_entry_id'");
		}else
		{
			$db->query("insert into lob_content(lob_text,lob_repo_entry_id) values('$lob_text',$lob_repo_entry_id)");
		}
		
		//setting data in lob_class_repo
		$db->query("select * from lob_class_repo where class_id=$class and lob_repo_entry_id=$lob_repo_entry_id");
		if($db->nextRecord())
		{
		$db->query("update lob_class_repo set lob_guid='$lob_guid',lob_title='$lob_title',lob_urltitle='$lob_url',lob_type='$lob_type',lob_sub_type='$lob_sub_type',lob_mime='$lob_mime',lob_version=$lob_version where class_id=$class and lob_repo_entry_id=$lob_repo_entry_id");
		$lob_class_repo_id=$db->record['lob_class_repo_id'];
		}else
		{
		$db->query("insert into lob_class_repo(class_id,lob_repo_entry_id,lob_guid,lob_title,lob_urltitle,lob_type,lob_sub_type,lob_mime,lob_version) values($class,$lob_repo_entry_id,'$lob_guid','$lob_title','$lob_url','$lob_type','$lob_sub_type','$lob_mime',$lob_version)");
		}
		
		$db->query("select * from lob_class_repo where lob_repo_entry_id=$lob_repo_entry_id");
		if($db->nextRecord())
		{
		$lob_class_repo_id=$db->record['lob_class_repo_id'];
		}
		//setting data in lob_class_content
		$db->query("select * from lob_class_content where lob_class_repo_id=$lob_class_repo_id");
		if($db->nextRecord())
		{
			$db->query("update lob_class_content set lob_text='$lob_text' where lob_class_repo_id='$lob_class_repo_id' ");
		}else
		{
			$db->query("insert into lob_class_content(lob_class_repo_id,lob_text) values($lob_class_repo_id,'$lob_text')");
		}
		//Entered data in tables
		
		$this->saveMetadata($db,$lob_repo_entry_id,$lob_class_repo_id,$meta_subject,$meta_subjectDisc,$meta_author,$meta_source,$meta_copyright,$meta_license,$lob_createdon,$updatedtime);
		
	
	}
	function lobobj_node($u,$db,$node)
	{
			
			
			$child0=$node->children[0];
			$child1=$node->children[1];			
				
		
			if($child0->value=='content'&& $child1->value=='text')
			{
					$this->text_child($u,$db,$node);
			}else if($child0->value=='content'&& $child1->value!='text')
			{
					$this->document_child($u,$db,$node);
			}else if($child0->value=='activity')
			{
					$this->activity_child($u,$db,$node);
			}else if($child0->value=='test' && $child1->value=='test')
			{
					$this->test_child($u,$db,$node);
			}
			
			
			
			 
	}
	
	
	
	function makeContentNode($n) {
		$result = $n->getElementsByTagname('content');
		$textContent = $result->item(0);
		$lobSub = new LobContent();
		$lobSub->lobText = $textContent->nodeValue;
		return $lobSub;
	}

	/**
	 * return a lob activity sub-object
	 */
	function makeActivityNode($n) {
		$result = $n->getElementsByTagname('response');
		$responseNode = $result->item(0);
		$lobSub = new LobActivity();
		switch($resposneNode->nodeValue) {
			case 'upload':
				$lobSub->responseTypeId = 1;
				break;
			case 'text':
				$lobSub->responseTypeId = 2;
				break;
			case 'uploadandtext':
				$lobSub->responseTypeId = 3;
				break;
			case 'forum':
				$lobSub->responseTypeId = 4;
				break;
			case 'none':
				$lobSub->responseTypeId = 5;
				break;
			case 'audio':
				$lobSub->responseTypeId = 6;
				break;

			default:
				$lobSub->responseTypeId = 5;
		}
		return $lobSub;
	}

	
	/**
	 * return a lob object
	 */
	function makeRepoNode($n) {
		$result = $n->getElementsByTagname('type');
		$type = $result->item(0);
		/*
		print_r($type);
		echo "new lob: <br/>";
//		debug($type);
		echo $type->nodeValue;
		echo "\n<br/>";
		echo "name lob: <br/>";
		echo $type->tagName;
		echo "<br/>";
		// */

		$children = $type->childNodes;
		$content = '';
		if ($children->length) {
			$content = trim($children->item(0)->nodeValue);
			$guid = $n->getAttribute('guid');
			$dbid = $n->getAttribute('dbid');
		}
		else {
			die ('unknown class: '. get_class($type)); 
			return null;
		}

		$lob = null;
		$lob    = new LobRepoEntry();
		$lob->set('lobGuid',$guid);
		switch ($content) {
			case 'content':
				$lob->set('lobType','content');
				break;
			case 'activity':
				$lob->set('lobType','activity');
				break;
			case 'test':
				$lob->set('lobType','test');
				break;
		}
		if ($lob->lobType == '') { return null; die ('unknown type '. $content); }


		$result = $n->getElementsByTagname('title');
		$node = $result->item(0);
		$children = $node->childNodes;
		$lob->set('lobTitle', trim($children->item(0)->nodeValue) );

		$result = $n->getElementsByTagname('content');
		$node = $result->item(0);
		if (is_object($node) ){
			$children = $node->childNodes;
			$lob->set('lobContent', trim($children->item(0)->nodeValue) );
		}

		$result = $n->getElementsByTagname('filename');
		$node = $result->item(0);
		if (is_object($node) ){
			$children = $node->childNodes;
			$lob->set('lobFilename', trim($children->item(0)->nodeValue) );

			$urlTitle = Lc_Lob_Util::createLinkText(trim($children->item(0)->nodeValue));
			$lob->set('lobUrltitle', $urlTitle );
			$lob->set('lobBinary', file_get_contents($this->tempdir.'/content/'.trim($children->item(0)->nodeValue)) );
		} else {
			$urlTitle = Lc_Lob_Util::createLinkText(trim( $lob->get('lobTitle')) );
			$lob->set('lobUrltitle', $urlTitle );
		}

		$result = $n->getElementsByTagname('description');
		$node = $result->item(0);
		if (is_object($node) ){
			$children = $node->childNodes;
			$lob->set('lobDescription', trim($children->item(0)->nodeValue) );
		}


		$result = $n->getElementsByTagname('subtype');
		$node = $result->item(0);
		if (is_object($node) ){
			$children = $node->childNodes;
			$lob->set('lobSubType', trim($children->item(0)->nodeValue) );
		}

		$result = $n->getElementsByTagname('mime');
		$node = $result->item(0);
		if (is_object($node) ){
			$children = $node->childNodes;
			$lob->set('lobMime', trim($children->item(0)->nodeValue) );
		}

		return $lob;
//		debug($children);
	}


	/**
	 * return a lob metadata object
	 */
	function processLobMeta($n) {
		$result = $n->getElementsByTagname('metadata');
		$meta = $result->item(0);
		$children = $meta->childNodes;


		$lob = null;
		$lob = new LobMetadata();

		foreach($children as $childNode) {
			if ($childNode->nodeType == XML_TEXT_NODE) {
				continue;
			}

			$tag = $childNode->tagName;
			$subchild = $childNode->childNodes;
			$lob->set($tag, trim($subchild->item(0)->nodeValue) );
		}
/*

		$result = $n->getElementsByTagname('lobtitle');
		$node = $result->item(0);
		$children = $node->childNodes;
		$lob->set('lobTitle', trim($children->item(0)->nodeValue) );

		$result = $n->getElementsByTagname('lobcontent');
		$node = $result->item(0);
		if (is_object($node) ){
			$children = $node->childNodes;
			$lob->set('lobContent', trim($children->item(0)->nodeValue) );
		}

		$result = $n->getElementsByTagname('lobfilename');
		$node = $result->item(0);
		if (is_object($node) ){
			$children = $node->childNodes;
			$lob->set('lobFilename', trim($children->item(0)->nodeValue) );
			$lob->set('lobUrltitle', urlencode(trim($children->item(0)->nodeValue)) );
		} else {
			$urltitle = $lob->get('lobTitle');
			$urltitle = str_replace(' ', '_', $urltitle);
			$urltitle = urlencode($urltitle);
			$lob->set('lobUrltitle', $urltitle );
		}

		$result = $n->getElementsByTagname('lobdescription');
		$node = $result->item(0);
		if (is_object($node) ){
			$children = $node->childNodes;
			$lob->set('lobDescription', trim($children->item(0)->nodeValue) );
		}


		$result = $n->getElementsByTagname('subtype');
		$node = $result->item(0);
		if (is_object($node) ){
			$children = $node->childNodes;
			$lob->set('lobSubType', trim($children->item(0)->nodeValue) );
		}

 */

		return $lob;
	}


	function tempdir($dir, $prefix='', $mode=0700) {
		if (substr($dir, -1) != '/') $dir .= '/';

		do {
			//$path = $dir.$prefix.mt_rand(0, 9999999);
				$path = $dir.$prefix;	
		} while (!mkdir($path, $mode));

		return $path;
	}
 function getAttribute($name){
        foreach($this->attributes() as $key=>$val){
            if($key == $name){
                return (string)$val;
            }// end if
        }// end foreach
    }// end function 
	
	function saveMetadata($db,$lob_repo_entry_id,$lob_class_repo_id,$meta_subject,$meta_subjectDisc,$meta_author,$meta_source,$meta_copyright,$meta_license,$lob_createdon,$updatedon)
	{
		
		$id=$lob_repo_entry_id;
		
		
		$db->query("select * from lob_metadata where lob_repo_entry_id=$id");
		if($db->nextRecord())
		{
			$db->query("update lob_metadata set subject='$meta_subject',subdisc='$meta_subjectDisc',author='$meta_author',source='$meta_source',copyright='$meta_copyright',license='$meta_license',updated_on='$updatedon',created_on='$lob_createdon' where lob_repo_entry_id=$id");
		}else
		{
			$db->query("insert into lob_metadata(lob_repo_entry_id,subject,subdisc,author,source,copyright,license,updated_on,created_on) values($id,'$meta_subject','$meta_subjectDisc','$meta_author','$meta_source','$meta_copyright','$meta_license','$updatedon','$lob_createdon')");
		}
		
		
		$db->query("select * from lob_class_metadata where lob_class_repo_id=$lob_class_repo_id");
		if($db->nextRecord())
		{
			
			$db->query("update lob_class_metadata set subject='$meta_subject',subdisc='$meta_subjectDisc',author='$meta_author',source='$meta_source',copyright='$meta_copyright',license='$meta_license', created_on='$lob_createdon',updated_on='$updatedon' where lob_class_repo_id=$lob_class_repo_id");
		}else
		{
			$db->query("insert into lob_class_metadata(lob_class_repo_id,subject,subdisc,author,source,copyright,license,created_on,updated_on) values($lob_class_repo_id,'$meta_subject','$meta_subjectDisc','$meta_author','$meta_source','$meta_copyright','$meta_license','$lob_createdon',$updatedon)");
		}
		
		
	
	}
	
	function unzipper($file,$add)
	{			$zip = new ZipArchive;
				$res = $zip->open($file);
				if ($res === TRUE) {
				    
				    $zip->extractTo($add);
				    $zip->close();
				} else {
				    
				}

			
	}
}
?>
