<?
/**
 * Upload assignments and review instructor comments
 */
include_once(LIB_PATH.'datagrid.php');
include_once(LIB_PATH.'lesosn/lc_lesson.php');
include_once(LIB_PATH.'lesosn/lc_lesson_sequence.php');
include_once(LIB_PATH.'lob/lc_lob.php');
include_once(LIB_PATH.'lob/lc_lob_class.php');
include_once(SERVICE_PATH.'pm/privmess.php');

class assignments extends StudentService {

	var $presentor='htmlPresentation';

	var $sectionTitle = 'Assignments';

	var $inactivelinks = array(
		'Assignments'
		);
	
	var $assignmentTypes = array(
		1=>"Upload a file",
		2=>"Text response",
		3=>"Upload and text",
		4=>"Forum post",
		6=>"Audio Response",
		5=>"None",
		);

	/**
	 * Show a list of availabe assignments to a student
	 *
	 * Input data: 
	 * Output data: 
	 */
	function run(&$db,&$u,&$lc,&$t) {
		$lc->templateName='assignments_main';
		$this->sectionTitle = 'Assignments';
		
		$dg = new datagrid($this->module, $this->serviceName);
		$dg->column = 'A.id_class_assignments,A.title,A.dueDate,A.noDueDate,A.dateNoAccept,responseType ';
		$dg->table = 'class_assignments A ';
		$dg->where = 'activeDate <= '.time().' and id_classes='.$u->activeClassTaken->id_classes;
		$dg->ignore = array( 'id_class_assignments', 'dateNoAccept', 'noDueDate' ,'responseType');

		//put all items with no due date at the end
		$dg->orderby = 'noDueDate ASC, dueDate ';

		if ( $lc->getvars['dgorder'] == 'title' ) {
			$dg->orderby = 'title';
		}

		$dg->headers = array(
			'title' => 'Title',
			'dueDate' => 'Due date',
			'dateTurnin'=>'Turned in',
			'status' => 'Status',
			'assignmentType' => 'Assignment type'
		);

		$dg->prependColumn('<?=strtotime($dateNoAccept) >= time() 
			? $title : \'<a href="\'.modurl("assignments/event=view/id=$id_class_assignments").\'">\'.$title.\'</a>\';?>', 'title');
		$dg->postpendColumn('<?=(strtotime($dateNoAccept) >= time() 
			? \'<a href="\'.modurl("assignments/event=view/id=$id_class_assignments").\'">View/Turn in</a>\' : "closed"); ?>', 'status');


		// mgk 5/31/05
		// bug 153
		// show a turned-in status for each assignment
		// mak 8/22/05
		// use a callback column to encapsulate this much logic, rather than an eval column
		$dg->postpendCallbackColumn('DG_ClassroomAssignmentsStatus', 'dateTurnin');

		//loadup all the turnin statuses for the entire class
		global $usernameToAssignmentStatus;
		$usernameToAssignmentStatus = array();
		$db->query('SELECT * 
			FROM `class_assignments_turnin` AS A
			LEFT JOIN class_assignments AS B
			  ON A.id_class_assignments = B.id_class_assignments
			WHERE A.id_student = "'.$u->username.'"
			AND B.id_classes = '.$u->activeClassTaken->id_classes);
		while ($db->nextRecord()) {
			$usernameToAssignmentStatus[$db->record['id_class_assignments']] = $db->record;
		}


		// mgk 5/31/05
		// bug 153
		// show assignment type
		// for now, gotta global this - ack
		// __FIXME__
		// make a static function that looks-up assignment types in a DB or XML file
		global $assignmentTypeLookup;	
		$assignmentTypeLookup = $this->assignmentTypes;
		$dg->postpendCallbackColumn('DG_ClassroomAssignmentType','assignmentType');


		$dg->overrideColumn('<?= $noDueDate ? "<i>No due date</i>" : date("F jS, Y h:i A", $dueDate);?>', 'dueDate');
		$dg->sortColumns = array( 'title', 'dueDate' );

		$t['table'] = $dg->toHTML();
	}


	/**
	 * Show an activity to a student
	 */
	function viewRun(&$db,&$u,&$lc,&$t) {

		if (isset($lc->getvars['l'])) {
			$this->switchActiveLesson(intval($lc->getvars['l']), $u->activeClassTaken->id_classes, $u);
		}

		$lc->templateName = 'assignments_view';
		$this->sectionTitle = 'View Activity';
		# Set up thee active date for students
		# if it is a teacher viewing the class
		# we'll overide it below so they can view
		# the assignment

		$todays_epoch_date = mktime(23,59,59,date('m'),date('d'),date('y'));
		$activeDate = "and activeDate <= $todays_epoch_date";
		$activeDate = "";

		$lc->getvars['id'] = (int)$lc->getvars['id'];


		//load the gradebook grading type
		$db->query("SELECT calculation_type
			FROM class_gradebook 
			WHERE id_classes = ".$u->activeClassTaken->id_classes);
		$db->nextRecord();
		$db->freeResult();
		$t['calculation_type'] = $db->record['calculation_type'];


		//load the assignment
		$classSeqId    = intval($lc->getvars['id']);
		$classId  = $u->activeClassTaken->id_classes;
		//find the lesson id
		if ( empty($u->sessionvars['activeLesson']) ) {
			$lessonId = LC_Lesson::getLessonIdForSequenceId($classSeqId);
			LC_Lesson::storeLessonInSession($lessonId,$u);
		} else {
			if ( $u->sessionvars['activeLesson']['id_classes'] != $classId ) {
				$lessonId = LC_Lesson::getLessonIdForSequenceId($classSeqId);
				LC_Lesson::storeLessonInSession($lessonId,$u);
			} else {
				$lessonId = $u->sessionvars['activeLesson']['id_class_lessons'];
			}
		}

		$lessonSequence = new LC_LessonSequence($lessonId,$classId);
		$lessonSequence->loadItems();
		$activityLob = $lessonSequence->fetchObject($classSeqId);

		if ( !is_object($activityLob) ) {
			$this->presentor = 'errorMessage';
			$t['message'] = '<div style="color: red;">An error has occured. Either you are trying to access an assignment which has not been activated by your teacher, or you are trying to access an assignment for which you do not have permission to access.</div>';
			return;
		}

		$t['activity'] = $activityLob;
		$sequence = $lessonSequence->getSequence($classSeqId);
		$lesson = new LC_Lesson($lessonId);
		$t['lessonId'] = $lessonId;
		$t['startDate'] = $lessonSequence->getStartDate($lesson, $classSeqId);
		$t['dueDate'] = $lessonSequence->getDueDate($lesson, $classSeqId);
		$t['noDueDate'] = $sequence->dueOffset > 0;

		$responseTypeId        = $activityLob->lobSub->responseTypeId;

		if ($lc->getvars['print']) {
			$this->presentor = 'printPresentation';
		}
		
		// PROTOTYPES				
		if ($lc->getvars['new'])
		{	
			$lc->templateName = 'assignments_viewnew';
		}

		if ($lc->getvars['text'])
		{	$lc->templateName = 'assignments_view_done_text';
		}

		if ($lc->getvars['upload'])
		{	$lc->templateName = 'assignments_view_done_upload';
		}
		
		$t['f_showform'] = false;
		$t['f_showform_file'] = false;
		$t['f_showform_text'] = false;
		
		//__TODO__ grace period
		if ($t['dueDate'] < time())
		{
			$t['f_showform'] = true;
			// we can show the forms for uploading
			
			// check response type
			// this will determine the view of what is to be uploaded
			
			// 1 upload file
			// 2 text
			// 3 both 
			
			// 4 forum post --- holding on this
			// 5 none
			switch ($responseTypeId)
			{
				case 3: $t['f_showform_file'] = true; $t['f_showform_text'] = true; break;
				case 1:	$t['f_showform_file'] = true; if ($responseTypeId != 3) break;
				case 2:	
					$db2 = DB::getHandle();
					$sql = 'SELECT a.assign_text
					FROM  class_assignments_turnin as a
					
					INNER JOIN class_assignments AS b
						ON a.id_class_assignments = b.id_class_assignments
					
					WHERE assign_type=0
					AND b.id_classes='. $u->activeClassTaken->id_classes. '
					AND a.id_class_assignments='. $lc->getvars['id'].'
					AND a.id_student=\''. $u->username.'\'';
					
					$db2->queryOne($sql);
					$t['assigntext'] = $db2->record['assign_text'];
					$t['f_showform_text'] = true; 
				
					break;
				
				// case 4:
					//forum post
				// case 5:
					//none
				case 6:
					$t['f_showform_audio'] = true;break;
				default: 
				// none
				$t['f_showform'] = false;
				break;
			}
			
		} else
		{
			// if we're pass the due date.. maybe we want to say something?
		}
		
		
/*
		// get current attachments for this assignment for this student (FILES ONLY)
		$sql = '
		SELECT class_assignments_turnin.id_class_assignments_turnin,
		class_assignments_turnin.assign_file_name,
		class_assignments_turnin.assign_file_size,
		class_assignments_turnin.assign_file_mime,
		class_assignments_turnin.dateTurnin
		
		FROM class_assignments_turnin
		
		INNER JOIN class_assignments 
			ON class_assignments_turnin.id_class_assignments=class_assignments.id_class_assignments
		
		WHERE id_student=\''. $u->username.'\'
		AND assign_type=1
		AND class_assignments.id_classes='. $u->activeClassTaken->id_classes. '
		AND class_assignments_turnin.id_class_assignments='. $lc->getvars['id'].'
		AND id_student=\''. $u->username.'\'
		';
		$db3 = DB::getHandle();
		$db3->query($sql);

		while ($db3->nextRecord()) 
		{
			$t['attachments'][] = $db3->record;	
		}
*/
		
	}


 		/**
 		 * Assignment Type (below in datastructure) means 0= text 1=file to determine the individual records
 		 * as assignemtns will only have 1 textual input (if selected in assignemnt itself)
 		 * however, will/can have multiple files, no limit?
 		 */
		function submitAssignmentRun(&$db,&$u,&$lc,&$t) {
			$todays_epoch_date = mktime(23,59,59,date('m'),date('d'),date('y'));


			$lc->templateName='assignments_submitAssignment';

			//load up assignment, determine what type of submission 
			// we're dealing with and handle it accordingly
			
			//load the assignment
			$classSeqId    = intval($lc->getvars['id']);
			$classId  = $u->activeClassTaken->id_classes;
			$lessonId = $u->sessionvars['activeLesson']['id_class_lessons'];

			$lessonSequence = new LC_LessonSequence($lessonId,$classId);
			$lessonSequence->loadItems();
			$lesson = new LC_Lesson($lessonId);
			$activityLob = $lessonSequence->fetchObject($classSeqId);

			if (!is_object($activityLob)) {
				$this->presentor = 'errorMessage';
				$t['message'] = "You don't have permission to view this assignment.";
				return;
			}
			$responseTypeId = $activityLob->lobSub->responseTypeId;


			// is this assignment still accepting data?
			if ( !$lessonSequence->isPastDueDate($lesson, $classSeqId)) {

				switch ($responseTypeId)
				{
					case 3:
					case 1:

						// file
						// multiple files
						// upload files?
						
						//this is fatal, die here, don't send confirmations
						if ((int)@$lc->uploads['uploadassignment']['size'] < 1)	{
							switch($lc->uploads['uploadassignment']['error']) {
								case UPLOAD_ERR_INI_SIZE:
								case UPLOAD_ERR_FORM_SIZE:
								$t['details'] = 'File is too big.';
								break;
								case UPLOAD_ERR_PARTIAL:
								case UPLOAD_ERR_NO_FILE:
								$t['details'] = 'Incomplete or no file uploaded.';
								break;
								default:
								$t['details'] = 'Unspecified error.';
							}
							$t['message'] = "There was an error uploading your assignment, try again.";
							$t['message'] .="<br/>No assignment information was saved.";
							$this->presentor = 'errorMessage';
							return;
						}

						$file = $lc->uploads['uploadassignment'];
						$actContents = file_get_contents($file['tmp_name']);
						if ( strlen($actContents) < 1 ) {
							trigger_error('Couldn\'t copy file.');
							return;
						}
						$sql = '
						INSERT INTO class_assignments_turnin
						SET 
						dateTurnin='.DB::getFuncName('NOW()').',
						id_class_assignments='. (int)$lc->getvars['id'].', 
						id_student=\''. $u->username.'\',
						assign_type='.$responseTypeId.',
						assign_file_size='. strlen($actContents) . ',
						assign_file_name=\''. addslashes($file['name']).'\',
						assign_file_mime=\''.addslashes($file['type']).'\',
						assign_file_blob=\''.addslashes($actContents).'\'';
						$db->query($sql);
						break;

					case 2:		// text
						
						$sql = 'SELECT a.id_class_assignments_turnin, b.id_classes
						FROM  class_assignments_turnin as a
						
						INNER JOIN class_assignments AS b
							ON a.id_class_assignments = b.id_class_assignments
						
						WHERE assign_type=0
						AND b.id_classes='. $u->activeClassTaken->id_classes. '
						AND a.id_class_assignments='. $lc->getvars['id'].'
						AND a.id_student=\''. $u->username.'\'';
						
						$db->queryOne($sql);
						
						// the only problem i seem to have with below is 
						// an update could potentially change things
						if ((int)$db->record['id_class_assignments_turnin'] > 0)
						{
							// we have an assignment, lets update
							$sql_head = 'UPDATE';
							$sql_footer = 'WHERE id_class_assignments='.$lc->getvars['id']. '
							AND id_Class_assignments_turnin='. $db->record['id_class_assignments_turnin'];
							
						} else
						{
							$sql_head = 'INSERT INTO';
							$sql_footer = false;
						}

						$sql = $sql_head.'
						class_assignments_turnin
						SET
						'.(($sql_footer == false) ? 'dateTurnin='.DB::getFuncName('NOW()').',' : '').'
						assign_type=0,
						id_class_assignments='. (int)$lc->getvars['id'].', 
						id_student=\''. $u->username.'\',
						assign_text=\''. str_replace("'", '\'\'', stripslashes($lc->postvars['assigntext'])).'\'
						'. $sql_footer;
#			echo $sql;exit();			
						$db->query($sql);
						if (mysql_errno())
						{	//echo mysql_error();
						} else
						{	//echo 'THank you for travelling with us!';
						}
						// only 1 text page per assignmnet
						
						break;
					
					// case 4:
					// case 5:
					case 6:
					//audio files
						$audioData = base64_decode($lc->postvars['audio_data']);
						$newfilename = $u->username."_".time();
						$fileh = @fopen(CONTENT_PATH."/uploads/$newfilename","wb");
						if ( !$fileh ) {
							trigger_error('couldnt copy file');
							return;
						}
						fwrite($fileh, $audioData);
						fclose($fileh);

						$sql = '
						INSERT INTO class_assignments_turnin
						SET 
						dateTurnin='.DB::getFuncName('NOW()').',
						id_class_assignments='. (int)$lc->getvars['id'].', 
						id_student=\''. $u->username.'\',
						assign_type=6,
						assign_file_size='. strlen($audioData) . ',
						assign_file_name=\''. $newfilename .'\',
						assign_file_mime=\'audio/x-speex\',
						assign_file_blob=\''.$newfilename.'\'';
						$db->query($sql);
						break;
				}

// mgk 9/2/03 - make a private message to the instructor that 
// a student turned in an assignment
	$p = new privmess();
	$p->messageFrom = "systemAdmin"; 	// __FIX_ME
	$p->sentTime = time();
	$p->subject = "Assignment: ".$tx_assignment_information['title']." - from ".$u->username." turned in\n";
	$p->message = "Assignment: ".$tx_assignment_information['title']."\n";
	$p->message .= "Student ".$u->username." turned in their assignment at ".date("m/d/Y h:i A");
	$p->messageTo = $u->activeClassTaken->facultyId;
	$p->add();
	$p = new privmess();
	$p->messageFrom = "systemAdmin"; 	// __FIX_ME // <-- DUMB COMMENT, WHATS TO FIX???
	$p->sentTime = time();
	$p->subject = "Assignment: ".$tx_assignment_information['title']." - Confirmation ".$u->username." ";
	$p->message = "Assignment: ".$tx_assignment_information['title']."\n";
	$p->message .= "You turned in your assignment at ".date("m/d/Y h:i A");
	$p->message = "\n*** Please print this message out for your records.\nIf you delete this private message, it can not be retrieved.\n";
	//$p->message .= "You turned in your assignment at ".date("m/d/Y h:i A")." for assignment #".$lc->getvars['id'];
	//$p->message.= "\n(This is a system generated assignment # and does not correspond to the number of assignments in your particular class)";
	$p->messageTo = $u->username;
	$p->add();
		
			}
			
			
			
			// go to jail, do not pass go, do not collect $200
			$this->viewRun($db, $u, $lc, $t);
			
			
		}
		
	

	/**
	 * Handle the upload of an Assignment
	 *
	 * Take the uploaded file and store in a secure area of the
	 * webserver. Store the path, mime info, file size, original
	 * file name to a database with a unique ID so that
	 * instructors can later download them from the classmgr app.
	 * Also store timestamp. Students could reupload another file
	 * with the same name, but won't be able to delete the
	 * original file (only overwrite it).
	 * 
	 * Input data: file mime info
	 * Output data: 
	 */
	function uploadAssignmentRun(&$db,&$u,&$lc,&$t) {
		//$t['url']=appurl("classroom/assignments/event=");
		//$this->presentor='redirect';
		//return;

		$lc->templateName='assignments_uploadAssignment';

	}

	/**
	 * update the session vars
	 */
	function switchActiveLesson($lessonId,$classId,&$u) {
		$ut = time();
		$sql = "select * from class_lessons
			where id_class_lessons='".$lessonId."'
			and id_classes='".$classId."'";
		if (!$u->isFaculty())
			$sql .= " and (activeOn < ".time()."
				and inactiveOn > ".time().')';

		$db = DB::getHandle();
		$db->queryOne($sql);
		$lesson =& $db->record;
		$u->sessionvars['activeLesson'] = $lesson;
	}
}


/**
 * Global helper for the datagrid class
 *
 * Shows the turnin status in a column for each student of a class.
 * Expects a global varaiable $usernameToAssignmentStatus array
 */
function DG_ClassroomAssignmentsStatus($row,&$ret) {
	global $usernameToAssignmentStatus;

	if ($usernameToAssignmentStatus[$row['id_class_assignments']]["dateTurnin"]!="") { 
		$ret = date("F jS, Y h:i A",strtotime($usernameToAssignmentStatus[$row['id_class_assignments']]["dateTurnin"]));
	} else { 
		$ret = "Not yet";
	}
}


/**
 * Global helper for the datagrid class
 *
 * Shows the turnin status in a column for each student of a class.
 * Expects a global varaiable $assignmentTypeLookup array
 */
function DG_ClassroomAssignmentType($row,&$ret) {
	global $assignmentTypeLookup; 
	$ret = $assignmentTypeLookup[$row['responseType']];
}
?>
