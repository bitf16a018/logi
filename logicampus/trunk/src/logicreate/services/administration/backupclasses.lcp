<?php
/*
 *	REMEMBER TO MAKE YOUR *BACKUP* Directory
 *		example: logicreate/backup
 *				 logicreate/lib
 *				 logicreate/services
 *		thats where it should be.. in with lib and services.. 
 *		make sure it's WORLD read and writeable 
 *		make sure you have ZIP installed on your system too.
 
 *
 * Service will act as a gateway into the rest of the
 * application.
 *
 
 NOTE::: making an attribute set to  array('BASE64'=>'1') will base64 encode the value
 		and when reading the xml it will auto base64_Decode it.
 
 NOTE::: I NEED CLASS SECTION NUMBERS
 
 NOTE:: There is a max script memory limit problem with this, it consumes a very large amount
 		of memory, you need to up it in your php.ini
 
 */
include_once(LIB_PATH.'xmlparser.php');

// necessary evils
set_time_limit(3000);
ignore_user_abort(true);

class backupclasses extends AdminService 
{
	var $presentor = 'htmlPresentation';

	// links
	var $navlinks = array(
		'Administration Home' => '',
		'Restore Class' => 'classrestore/',
		'Restore Semesters' => 'semesterrestore/'
	);
	
	var $id_classes =0;
	
	var $obj_zip;
	var $current_dir = '';
	
	/**
	 * construct a fancy filename for the users
	 */
	function run(&$db,&$u,&$lc,&$t) 
	{
		$a_semester = array();

		// select semesters to backup
		$id_classes = $u->activeClassTaught->id_classes;

		/**
		 *	Gathering all semesters that have at least 1 class attached
		 *	and the count of classes per these particular semesters to backup
		 */
		$sql = '
		SELECT A.id_semesters, A.semesterTerm, A.semesterYear, count(B.id_classes) as class_count
		FROM semesters as A
		INNER JOIN classes as B ON A.id_semesters=B.id_semesters
		GROUP BY A.id_semesters';
		
		$db->query($sql);
		
		while ($db->next_record())
		{	$a_semester[$db->Record['id_semesters']] = $db->Record['semesterYear'].' '.$db->Record['semesterTerm'].' ( <i>'.$db->Record['class_count'].' classes</i> )';
		}
		
		$t['a_semester'] = $a_semester;
		
		$lc->templateName  = 'backupclasses_main';
//auto-comment		$lc->templateStyle = 'private';

	}
	
	function helloRun($db, &$u, &$lc, &$t)
	{	$this->presentor = 'emptyPresentation';
	}
	
	/**
	 *	This is a step to get the progress bar in visible site before the first item gets processed
	 */
	function goRun($db, &$u, &$lc, &$t)
	{	
		$this->presentor 	= 'emptyPresentation';
		$lc->templateName  	= 'backupclasses_progress';
		
		exec('rm -rf /tmp/semester_backup/');
		
		header('Refresh: 2;'.modurl('backupclasses/event=semester/'.$lc->getvars[2].'/1'));
		/// cleanup
				
	}
	
	
	function semesterRun($db, &$u, &$lc, &$t)
	{
		$this->presentor 	= 'emptyPresentation';
		$lc->templateName  	= 'backupclasses_progress';
		
		$semesterid = $lc->getvars[2];
		$placement = (int)$lc->getvars[3];
		
		if ($placement <= 0)
		{	$placement = 1;
			// clean the palette
		}
		
		$t['placement'] = $placement;	
		$this->obj_zip = new LcZipFile();
		
		$sql = '
		SELECT id_semesters, semesterTerm, semesterYear
		FROM semesters 
		WHERE id_semesters='.$semesterid.'';
		$db->queryOne($sql);
		
		$t['semesterlabel'] = '( '.$db->Record['semesterYear'].' '.$db->Record['semesterTerm'].' )';
		
		// assume: semester id is valid
		// grab count of classes to process
		$sql = '
		SELECT count(id_classes) as class_count
		FROM classes
		WHERE id_semesters='.$semesterid.'
		';
		$db->queryOne($sql);
		$t['total_classes'] = $db->Record['class_count'];
		
		$sql = '
		SELECT id_classes 
		FROM classes
		WHERE id_semesters='.$semesterid.'
		ORDER BY id_classes ASC
		LIMIT '.$placement. ', 1
		';
		
		$db->queryOne($sql);
		
		if (is_array($db->Record))
		{
			error_log('Classroom: '. $db->Record['id_classes'], 0);
			$this->current_dir = 'classroom_'.$db->Record['id_classes'].'/';
			error_log('Classroom DIR: '. $this->current_dir, 0);

			$this->gather($db->Record['id_classes']);
		
		} 
		
		if ($placement <= $t['total_classes'])
		{
			header('Refresh: 1;'.modurl('backupclasses/event=semester/'.$semesterid. '/'.($placement+1)));
			
		} else
		{	
			exec('cd /tmp/semester_backup;rm -f '.LIB_PATH.'../backup/semester_'.$semesterid.'.zip;zip -r '.LIB_PATH.'../backup/semester_'.$semesterid.'.zip ./;');
			//;rm -rf /tmp/semester_backup/
			$t['placement'] += 1;
		}
		
	}
	
	
	function gather($id_classes)
	{
		$xmlObj = new xmlparser('<dataexchange></dataexchange>');
		
	    $this->obj_zip->add_dir($this->current_dir.'library/');
		$this->obj_zip->add_dir($this->current_dir.'content/');
		$this->obj_zip->add_dir($this->current_dir.'assignments/');
 
		$this->id_classes = $id_classes;
		

		// select base information (as much as I can in 1 query)
		$sql = '
		SELECT 
			a.id_classes,		b.id_courses,
			a.classType,		b.courseFamily,
			a.facultyId,		b.courseNumber,
			a.stylesheet,		b.courseName,
			a.id_semesters,		b.courseDescription,
			a.sectionNumbers,	b.preReq1,
						b.preReq2,
						b.preReq3,
						b.preReq4,
						b.coReq1,
						b.coReq2,
						b.coReq3,
						b.coReq4,
			s.semesterId
					
		FROM classes as a
			INNER JOIN courses as b
				ON a.id_courses=b.id_courses
			INNER JOIN semesters as s
				ON a.id_semesters=s.id_semesters
		
		WHERE a.id_classes='.$id_classes.'
		';
		$db = DB::getHandle();
		$db->RESULT_TYPE = MYSQL_ASSOC;
		$db->queryOne($sql);
		
		$filename = 'classroom_'.$db->Record['courseFamily']. $db->Record['courseNumber'].'_'.$db->Record['semesterId'].'.zip';

		$xml_raw_save = '';
				
		$root =& $xmlObj->getRoot();
		
		$classroom_node[] = new xml_node('CLASSROOM', 
								array(	'ID'=>$db->Record['id_classes'], 
										'CLASSTYPE'=>$db->Record['classType'],
										'ID_SEMESTERS'=>$db->Record['id_semesters'],
										'STYLESHEET'=>$db->Record['stylesheet'],
										'FACULTYID'=>$db->Record['facultyId'],
										'SECTIONNUMBERS'=>$db->Record['sectionNumbers']
									 )
								);

		$root->children =& $classroom_node;
		
		$course_attr[] = new xml_node('courseName', array('BASE64'=>'1'), null, $db->Record['courseName']);								
		$course_attr[] = new xml_node('courseDescription', array('BASE64'=>'1'), null, $db->Record['courseDescription']);
		$course_attr[] = new xml_node('courseFamily', null, null, $db->Record['courseFamily']);
		$course_attr[] = new xml_node('courseNumber', null, null, $db->Record['courseNumber']);
		$course_attr[] = new xml_node('coReq1', null, null, $db->Record['coReq1']);
		$course_attr[] = new xml_node('coReq2', null, null, $db->Record['coReq2']);
		$course_attr[] = new xml_node('coReq3', null, null, $db->Record['coReq3']);
		$course_attr[] = new xml_node('coReq4', null, null, $db->Record['coReq4']);
		$course_attr[] = new xml_node('preReq1', null, null, $db->Record['preReq1']);
		$course_attr[] = new xml_node('preReq2', null, null, $db->Record['preReq2']);
		$course_attr[] = new xml_node('preReq3', null, null, $db->Record['preReq3']);
		$course_attr[] = new xml_node('preReq4', null, null, $db->Record['preReq4']);
		
		$classroom_child_node[] = new xml_node('COURSE', array('ID'=>$db->Record['id_courses']), $course_attr);
		
		
		$application_nodes[] = $this->get_faq_nodes();
		
		$application_nodes[] = $this->get_syllabus_nodes();
		
		$application_nodes[] = $this->get_announcement_nodes();
		
		
		$application_nodes[] = $this->get_assignments_nodes();
		
		$application_nodes[] = $this->get_links_categories_nodes();
		
		$application_nodes[] = $this->get_links_nodes();
		
		$application_nodes[] = $this->get_objectives_nodes();
		// NOT NEEDED // $application_nodes[] = $this->get_presentations_nodes();
		
		$application_nodes[] = $this->get_documentlibrary_nodes();
		
		$application_nodes[] = $this->get_textbook_nodes();
		// NOT NEEDED // $application_nodes[] = $this->get_seminars_nodes();
		// NOT NEEDED // $application_nodes[] = $this->get_orientations_nodes();
		// NOT NEEDED // $application_nodes[] = $this->get_exam_schedule_nodes();
		
		/*	NOTE: I need to limit calendar stuff.. ex: no examscheduling stuff
		 */
		
		$application_nodes[] = $this->get_calendar_nodes();	// needs to be last, becuase it links
		
		$application_nodes[] = $this->get_lessons_nodes();
		
		$application_nodes[] = $this->get_content_nodes();

		// whats left?
		// gradebook
		// assessments
		// forum entries? (applies to a few apps)
		
		$application_nodes[] = $this->get_assessments_nodes();

		
		$application_nodes[] = $this->get_gradebook_nodes();
		
		$application_nodes[] = $this->get_gradebook_categories_nodes();
		
		$application_nodes[] = $this->get_gradebook_entries_nodes();
		// NOT NEEDED // $application_nodes[] = $this->get_gradebook_val_nodes();
		
		
		/**
		 *	I need to remember that this information will only be used
		 *	for IMPORTING (COPY) not RESTORATION (overwriting) (work out NULLs too on the IMPORT)
		 */
		$classroom_child_node[] = new xml_node('APPLICATIONS', null, $application_nodes, null);
		
		$classroom_node[0]->children = $classroom_child_node;
		
		
		$fh = tmpfile();
		$xmlObj->write_file($fh);
		
		$file_size = ftell($fh);
        rewind($fh);
        // I think i'm going to have to rewrite this, becuase i can't pump out more than the php upload limit 15M
        $silly = fread($fh, $file_size);
        
        fclose($fh);
	
        $this->obj_zip->add_file($silly,$this->current_dir.'classroom.xml');
    
    
	}
	
	
	// xml node makers!
	function get_assessments_nodes()
	{
		$sql = '
		SELECT * 
		FROM assessment
		WHERE class_id='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		$xml_child_node = array();
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('display_name',array('BASE64'=>1), null, $db->Record['display_name']);
			$xml_sub_child[] = new xml_node('date_available',null, null, $db->Record['date_available']);
			$xml_sub_child[] = new xml_node('date_unavailable',null, null, $db->Record['date_unavailable']);
			$xml_sub_child[] = new xml_node('mail_responses', null, null, $db->Record['mail_responses']);
			$xml_sub_child[] = new xml_node('auto_publish', null, null, $db->Record['auto_publish']);
			$xml_sub_child[] = new xml_node('num_retries', null, null, $db->Record['num_retries']);
			$xml_sub_child[] = new xml_node('minute_limit', null, null, $db->Record['minute_limit']);
			$xml_sub_child[] = new xml_node('description', array('BASE64'=>1), null, $db->Record['description']);
			$xml_sub_child[] = new xml_node('instructions', array('BASE64'=>1), null, $db->Record['instructions']);
			$xml_sub_child[] = new xml_node('show_result_type', null, null, $db->Record['show_result_type']);
			$xml_sub_child[] = new xml_node('possible_points', null, null, $db->Record['possible_points']);
			
			$xml_sub_child[] = new xml_node('QUESTIONS', null, $this->get_assessments_questions($db->Record['assessment_id']));	
			//error_log('questions');
			//$xml_sub_child[] = new xml_node('ANSWERS', null, $this->get_assessments_answers_nodes($db->Record['assessment_id']));
			//error_log('answer');
			//$xml_sub_child[] = new xml_node('LOG', null, $this->get_assessments_log($db->Record['assessment_id']));
			//error_log('log');
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'assessment_id'=>$db->Record['assessment_id']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('ASSESSMENT', null, $xml_child_node);
	}


	function get_assessments_answers_nodes($assessment_id)
	{
		$sql = '
		SELECT * 
		FROM assessment_answer
		WHERE id_classes='.$this->id_classes.'
		';
		$xml_child_node = array();
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('asessment_id',null, null, $db->Record['assessment_id']);
			$xml_sub_child[] = new xml_node('assessment_question_id',null, null, $db->Record['assessment_question_id']);
			$xml_sub_child[] = new xml_node('student_id', null, null, $db->Record['student_id']);
			$xml_sub_child[] = new xml_node('points_earned', null, null, $db->Record['points_earned']);
			$xml_sub_child[] = new xml_node('points_given', null, null, $db->Record['points_given']);
			$xml_sub_child[] = new xml_node('assessment_question_values', array('BASE64'=>1), null, $db->Record['assessment_question_values']);
			
			#$xml_sub_child[] = new xml_node('INQUIRIES', null, $this->get_textbookinquiries_nodes());
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'assessment_answer_id'=>$db->Record['assessment_answer_id']
									 	 ), $xml_sub_child
									);
		}
		if (count($xml_child_node) == 0)
		{	return null;
		}
	return $xml_child_node;
	}



/*	Do not execute through xml. it's a subexecution through get_asessments_nodes()
 */
	function get_assessments_questions($assessment_id)
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM assessment_question
		WHERE assessment_id='.$assessment_id.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('question_type', null, null, $db->Record['question_type']);
			$xml_sub_child[] = new xml_node('question_sort', null, null, $db->Record['question_sort']);
			$xml_sub_child[] = new xml_node('question_points', null, null, $db->Record['question_points']);
			$xml_sub_child[] = new xml_node('question_display', array('BASE64'=>1), null, $db->Record['question_display']);
			$xml_sub_child[] = new xml_node('question_text', array('BASE64'=>1), null, $db->Record['question_text']);
			$xml_sub_child[] = new xml_node('question_choices', array('BASE64'=>1), null, $db->Record['question_choices']);
			$xml_sub_child[] = new xml_node('question_input', array('BASE64'=>1), null, $db->Record['question_input']);
			$xml_sub_child[] = new xml_node('file_hash', array('BASE64'=>1), null, $db->Record['file_hash']);
								
			$xml_child_node[] =new xml_node('ITEM', 
								array(	'assessment_question_id'=>$db->Record['assessment_question_id']
									 	 ), $xml_sub_child
								);
		}
		
		if (count($xml_child_node) == 0)
		{	return null;
		}
	return $xml_child_node;
	}


/*	Do not execute through xml. it's a subexecution through get_asessments_nodes()
 */
	function get_assessments_log($assessment_id)
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM assessment_log
		WHERE assessment_id='.$assessment_id.'
			AND id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('id_student', null, null, $db->Record['id_student']);
			$xml_sub_child[] = new xml_node('start_date', null, null, $db->Record['start_date']);
			$xml_sub_child[] = new xml_node('end_date', null, null, $db->Record['end_date']);
								
			$xml_child_node[] =new xml_node('ITEM', 
								array(	'id_assignment_log'=>$db->Record['id_assessment_log']
									 	 ), $xml_sub_child
								);
		}
		if (count($xml_child_node) == 0)
		{	return null;
		}
	return $xml_child_node;
	}


	function get_textbook_nodes()
	{
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM textbook
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('south_campus',null, null, $db->Record['south_campus']);
			$xml_sub_child[] = new xml_node('southeast_campus',null, null, $db->Record['southeast_campus']);
			$xml_sub_child[] = new xml_node('northeast_campus',null, null, $db->Record['northeast_campus']);
			$xml_sub_child[] = new xml_node('northwest_campus', null, null, $db->Record['northwest_campus']);
			$xml_sub_child[] = new xml_node('noTextbooks', null, null, $db->Record['noTextbooks']);
			$xml_sub_child[] = new xml_node('INQUIRIES', null, $this->get_textbookinquiries_nodes());
			 
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_textbook'=>$db->Record['id_textbook']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('TEXTBOOK', null, $xml_child_node);
	}
	
	
	function get_textbookinquiries_nodes()
	{	$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM textbook_classes
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('author',array('BASE64'=>'1'), null, $db->Record['author']);
			$xml_sub_child[] = new xml_node('title',array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('publisher', array('BASE64'=>'1'), null, $db->Record['publisher']);
			$xml_sub_child[] = new xml_node('edition', null, null, $db->Record['edition']);
			$xml_sub_child[] = new xml_node('copyright', null, null, $db->Record['copyright']);
			$xml_sub_child[] = new xml_node('isbn', null, null, $db->Record['isbn']);
			$xml_sub_child[] = new xml_node('required', null, null, $db->Record['required']);
			$xml_sub_child[] = new xml_node('bundled', null, null, $db->Record['bundled']);
			$xml_sub_child[] = new xml_node('bundled_items', null, null, $db->Record['bundled_items']);
			##$xml_sub_child[] = new xml_node('last_item', null, null, $db->Record['last_item']);
			$xml_sub_child[] = new xml_node('type', null, null, $db->Record['type']);
			$xml_sub_child[] = new xml_node('status', null, null, $db->Record['status']);
			$xml_sub_child[] = new xml_node('note', null, null, $db->Record['note']); // is this sensitive information? should i be giving this to a teacher?
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_textbook_classes'=>$db->Record['id_textbook_classes']
									 	 ), $xml_sub_child
									);
		}
		
	return  $xml_child_node;
	}
	
	
	
	function get_documentlibrary_nodes()
	{	$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM classdoclib_Folders
		WHERE class_id='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	
			$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('name',null, null, $db->Record['name']);
			$xml_sub_child[] = new xml_node('parentKey',null, null, $db->Record['parentKey']);
			$xml_sub_child[] = new xml_node('owner', null, null, $db->Record['owner']);
			$xml_sub_child[] = new xml_node('notes', array('BASE64'=>'1'), null, $db->Record['notes']);
			$xml_sub_child[] = new xml_node('trashed', null, null, $db->Record['trashed']);
			$xml_sub_child[] = new xml_node('origparent', null, null, $db->Record['origparent']);
			$xml_sub_child[] = new xml_node('folderType', null, null, $db->Record['folderType']);
			
			$xml_sub_child[] = new xml_node('CLASSDOCLIB_FILES', null, $this->get_document_files($db->Record['pkey']));
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'pkey'=>$db->Record['pkey']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASSDOCLIB_FOLDERS', null, $xml_child_node);
	}
	
	
	function get_document_files($folderKey)
	{
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM classdoclib_Files
		WHERE folder='.$folderKey.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			
			if (trim($db->Record['diskName']) == '')
				continue;
				
			$xml_sub_child[] = new xml_node('daHasha',null, null, $db->Record['daHasha']);
			$xml_sub_child[] = new xml_node('file', array('BASE64'=>'1'), null, $db->Record['file']);
			$xml_sub_child[] = new xml_node('displayname', array('BASE64'=>'1'), null, $db->Record['displayname']);
			$xml_sub_child[] = new xml_node('description', array('BASE64'=>'1'), null, $db->Record['description']);
			$xml_sub_child[] = new xml_node('mime', null, null, $db->Record['mime']);
			//$xml_sub_child[] = new xml_node('folder', null, null, $db->Record['folder']); // not needed at all! but for good measure we'll keep it
			$xml_sub_child[] = new xml_node('owner', null, null, $db->Record['owner']);
			$xml_sub_child[] = new xml_node('filedate', null, null, $db->Record['filedate']);
			$xml_sub_child[] = new xml_node('size', null, null, $db->Record['size']);
			$xml_sub_child[] = new xml_node('diskName', null, null, $db->Record['diskName']);
			$xml_sub_child[] = new xml_node('trashed', null, null, $db->Record['trashed']);
			$xml_sub_child[] = new xml_node('origfolder', null, null, $db->Record['origfolder']); // how to handle in copy!
			
			// instead of encoding the contents of a file into xml
			// add in an identifier and copy the original file into
			// the temp directory
			
			$this->obj_zip->add_file(
						file_get_contents(DOCUMENT_ROOT.'../logicreate/classLibrary/'. substr($db->Record['diskName'], 0, 2). '/'.substr($db->Record['diskName'],(strlen($db->Record['diskName'])-2)).'/'.$db->Record['diskName']),
						$this->current_dir.'library/'.str_replace('/', ' ', strip_tags($db->Record['diskName'])));
		/**
			$xml_sub_child[] = new xml_node('data', null, null, 
											base64_encode(
												file_get_contents(DOCUMENT_ROOT.'../logicreate/classLibrary/'. substr($db->Record['diskName'], 0, 2). '/'.substr($db->Record['diskName'],(strlen($db->Record['diskName'])-2)).'/'.$db->Record['diskName'])
												)
											);
		**/								
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'pkey'=>$db->Record['pkey']
									 	 ), $xml_sub_child
									);
			
		}
		
	return  $xml_child_node; 
	}
	
	
	function get_content_nodes()
	{
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM class_lesson_content
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('id_class_lessons',null, null, $db->Record['id_class_lessons']);
			$xml_sub_child[] = new xml_node('txTitle', array('BASE64'=>'1'), null, $db->Record['txTitle']);
			//$xml_sub_child[] = new xml_node('txText',  null, null, null);
			$xml_sub_child[] = new xml_node('dateCreated', null, null, $db->Record['dateCreated']);
			
			$this->obj_zip->add_file(
						$db->Record['txText'],
						$this->current_dir.'content/'.str_replace('/', ' ', strip_tags($db->Record['txTitle'].'.html')));
						
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_lesson_content'=>$db->Record['id_class_lesson_content']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_LESSON_CONTENT', null, $xml_child_node);
	}
	
	
	// look at the objectives link, it uses id_class_lesson .. <-- NO S lessons
	function get_lessons_nodes()
	{
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM class_lessons
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		$db2 = DB::getHandle();
		$db2->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_links = null;
			$xml_objectives = null;
			$xml_assignments = null;
			$xml_sub_sub_child = null;
			
			// find all links to lessons
			$sql2 = '
			SELECT * FROM 
			class_lesson_links
			WHERE id_class_lessons='. $db->Record['id_class_lessons'];
			
			$db2->query($sql2);
			while ($db2->next_record())
			{	$xml_links[] = new xml_node('id_class_links',null, null, $db2->Record['id_class_links']);
			}
			$xml_sub_sub_child[] = new xml_node('LINKS',null, $xml_links);
			
			$sql2 = '
			SELECT * FROM 
			class_lesson_objectives
			WHERE id_class_lesson='. $db->Record['id_class_lessons'];
			
			$db2->query($sql2);
			while ($db2->next_record())
			{	$xml_objectives[] = new xml_node('id_class_objectives',null, null, $db2->Record['id_class_objectives']);
			}
			$xml_sub_sub_child[] = new xml_node('OBJECTIVES',null,$xml_objectives);

			
			$sql2 = '
			SELECT * FROM 
			class_assignments_link
			WHERE id_class_lessons='. $db->Record['id_class_lessons'];
			
			$db2->query($sql2);
			while ($db2->next_record())
			{	$xml_assignments[] = new xml_node('id_class_assignments',null, null, $db2->Record['id_class_assignments']);
			}
			$xml_sub_sub_child[] = new xml_node('ASSIGNMENTS',null,$xml_assignments);
			
			
			
			// refer to the CONTENT node in APPS for mappings
//			$xml_sub_sub_child[] = new xml_node('CONTENT',null);
			
			$xml_sub_child[] = new xml_node('MAPPINGS',null, $xml_sub_sub_child);
			
			$xml_sub_child[] = new xml_node('createdOn',null, null, $db->Record['createdOn']);
			$xml_sub_child[] = new xml_node('title', array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('description', array('BASE64'=>'1'), null, $db->Record['description']);
			$xml_sub_child[] = new xml_node('activeOn', null, null, $db->Record['activeOn']);
			$xml_sub_child[] = new xml_node('inactiveOn', null, null, $db->Record['inactiveOn']);
			$xml_sub_child[] = new xml_node('checkList', array('BASE64'=>'1'), null, $db->Record['checkList']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_lessons'=>$db->Record['id_class_lessons']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_LESSONS', null, $xml_child_node);
	}
	
	
	/**
	 *	I think there is supposed to be a forum system put inplace to discuss this presentation
	 *	I will have to export that when it's created
	 */
	function get_presentations_nodes()
	{
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM class_presentations
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('title',null, null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('lesson',null, null, $db->Record['lesson']);
			$xml_sub_child[] = new xml_node('status', null, null, $db->Record['status']);
			$xml_sub_child[] = new xml_node('author', null, null, $db->Record['author']);
			$xml_sub_child[] = new xml_node('createdOn', null, null, $db->Record['createdOn']);
			$xml_sub_child[] = new xml_node('content', array('BASE64'=>'1'), null, $db->Record['content']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_presentations'=>$db->Record['id_presentations']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_PRESENTATIONS', null, $xml_child_node);
	}
	
	
	function get_objectives_nodes()
	{
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM class_objectives
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('objective', array('BASE64'=>'1'), null, $db->Record['objective']);
			$xml_sub_child[] = new xml_node('f_hide',null, null, $db->Record['f_hide']);
			$xml_sub_child[] = new xml_node('i_sort', null, null, $db->Record['i_sort']);
									
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_objectives'=>$db->Record['id_class_objectives']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_OBJECTIVES', null, $xml_child_node);
	}
	
	
	function get_links_categories_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_links_categories
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('id_class_links_categories_parent',null, null, $db->Record['id_class_links_categories_parent']);
			$xml_sub_child[] = new xml_node('txTitle', array('BASE64'=>'1'), null, $db->Record['txTitle']);
			$xml_sub_child[] = new xml_node('sortOrder', null, null, $db->Record['sortOrder']);
									
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_links_categories'=>$db->Record['id_class_links_categories']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_LINKS_CATEGORIES', null, $xml_child_node);
	}
	
	function get_links_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_links
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('id_class_links_categories',null, null, $db->Record['id_class_links_categories']);
			$xml_sub_child[] = new xml_node('title', array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('url', array('BASE64'=>'1'), null, $db->Record['url']);
			$xml_sub_child[] = new xml_node('description', array('BASE64'=>'1'), null, $db->Record['description']);
			$xml_sub_child[] = new xml_node('dateCreated', null, null, $db->Record['dateCreated']);
			$xml_sub_child[] = new xml_node('createdby', null, null, $db->Record['createdby']);
			$xml_sub_child[] = new xml_node('hits', null, null, $db->Record['hits']);
						
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_links'=>$db->Record['id_class_links']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_LINKS', null, $xml_child_node);
	}
	
	
	/** The following hasn't been built yet so i can not export them
	 *
	 *	a) Forums
	 */		
	function get_assignments_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_assignments
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		$db2 = DB::getHandle();
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_grades_node = null;
			$xml_turnedin_node = null;
			/*
			$sql2 = '
			SELECT * FROM  class_assignments_turnin
			WHERE id_class_assignments='. $db->Record['id_class_assignments'].'
			';
			$db2->query($sql2);
			$db2->RESULT_TYPE = MYSQL_ASSOC;
			while ($db2->next_record())
			{
				$xml_turnedin_node[] = new xml_node('WORK',
											array('id_class_assignments_turnin'=>$db2->Record['id_class_assignments_turnin'],
												  'id_student' => $db2->Record['id_student'],
												  'dateTurnin' =>$db2->Record['dateTurnin'],
												  'assign_type' =>$db2->Record['assign_type'], 
												  'assign_text' =>base64_encode($db2->Record['assign_text']),
												  'assign_file_mime' =>$db2->Record['assign_file_mime'],
												  'assign_file_name' =>$db2->Record['assign_file_name'],
												  'assign_file_size' =>$db2->Record['assign_file_size']												  
												  )
											, null, null
											);
											
						if ($db2->Record['assign_file_size'] > 0)										
						{	
							//
							//	I'm backing this up, but it's not needed.
							///
							// This is because mikes change to the assignment upload file 
							// I have to work out both
							if (strlen($db2->Record['assign_file_blob']) > 80)
							{
								$this->obj_zip->add_file(
								$db2->Record['assign_file_blob'],
								$this->current_dir.'assignments/'.str_replace('/', ' ', strip_tags($db2->Record['assign_file_name'])));
								
							} else
							{
								$data = file_get_contents(CONTENT_PATH.'/uploads/'.$db2->Record['assign_file_blob']);
								$this->obj_zip->add_file(
								$data,
								$this->current_dir.'assignments/'.$db2->Record['assign_file_name']);
								$data = null;
								unset($data); // making sure i keep these resources in check
							}
							
						}
						
			}
			
			$sql2 = '
			SELECT * FROM  class_assignments_grades
			WHERE id_class_assignments='. $db->Record['id_class_assignments'].'
			';
			$db2->query($sql2);
			$db2->RESULT_TYPE = MYSQL_ASSOC;
			while ($db2->next_record())
			{
				$xml_grades_node[] = new xml_node('GRADE',
											array('id_class_assignments_grades'=>$db2->Record['id_class_assignments_grades'],
												  'id_student' => $db2->Record['id_student'],
												  'BASE64' => 1,
												  'grade' =>$db2->Record['grade']
												  ),
												  null,
												  $db2->Record['comments']
											);
			}
			*/
			//$xml_sub_child[] = new xml_node('TURNEDIN',null, $xml_turnedin_node);
			//$xml_sub_child[] = new xml_node('GRADES',null, $xml_grades_node);
			
			$xml_sub_child[] = new xml_node('title', array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('instructions', array('BASE64'=>'1'), null, $db->Record['instructions']);
			$xml_sub_child[] = new xml_node('dueDate', null, null, $db->Record['dueDate']);
			$xml_sub_child[] = new xml_node('noDueDate', null, null, $db->Record['noDueDate']);
			$xml_sub_child[] = new xml_node('activeDate', null, null, $db->Record['activeDate']);
			$xml_sub_child[] = new xml_node('responseType', null, null, $db->Record['responseType']);
			$xml_sub_child[] = new xml_node('dateNoAccept', null, null, $db->Record['dateNoAccept']);
			
							
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_assignments'=>$db->Record['id_class_assignments']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_ASSIGNMENTS', null, $xml_child_node);
	}
	

	// @@@@ not done, i need to grab scheduled dates as well
	function get_exam_schedule_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM exam_schedule_classes
		WHERE id_classes='.$this->id_classes.'
		';

		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('status',null, null, $db->Record['status']);
			$xml_sub_child[] = new xml_node('received_date',null, null, $db->Record['received_date']);
			$xml_sub_child[] = new xml_node('oncampus_exam', null, null, $db->Record['oncampus_exam']);
			$xml_sub_child[] = new xml_node('south_campus', null, null, $db->Record['south_campus']);
			$xml_sub_child[] = new xml_node('southeast_campus', null, null, $db->Record['southeast_campus']);
			$xml_sub_child[] = new xml_node('northeast_campus', null, null, $db->Record['northeast_campus']);
			$xml_sub_child[] = new xml_node('northwest_campus', null, null, $db->Record['northwest_campus']);
			$xml_sub_child[] = new xml_node('note', null, null, $db->Record['note']);
						
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_exam_schedule_classes'=>$db->Record['id_exam_schedule_classes']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('EXAM_SCHEDULE_CLASSES', null, $xml_child_node);
	}
	
	
	function get_seminars_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM seminar_classes_dates
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('num_seminar',null, null, $db->Record['num_seminar']);
			$xml_sub_child[] = new xml_node('south_date',null, null, $db->Record['south_date']);
			$xml_sub_child[] = new xml_node('south_time_start',null, null, $db->Record['south_time_start']);
			$xml_sub_child[] = new xml_node('south_time_end', null, null, $db->Record['south_time_end']);
			$xml_sub_child[] = new xml_node('northeast_date', null, null, $db->Record['northeast_date']);
			$xml_sub_child[] = new xml_node('northeast_time_start', null, null, $db->Record['northeast_time_start']);
			$xml_sub_child[] = new xml_node('northeast_time_end', null, null, $db->Record['northeast_time_end']);
			$xml_sub_child[] = new xml_node('northwest_date', null, null, $db->Record['northwest_date']);
			$xml_sub_child[] = new xml_node('northwest_time_start', null, null, $db->Record['northwest_time_start']);
			$xml_sub_child[] = new xml_node('northwest_time_end', null, null, $db->Record['northwest_time_end']);
			$xml_sub_child[] = new xml_node('southeast_date', null, null, $db->Record['southeast_date']);
			$xml_sub_child[] = new xml_node('southeast_time_start', null, null, $db->Record['southeast_time_start']);
			$xml_sub_child[] = new xml_node('southeast_time_end', null, null, $db->Record['southeast_time_end']);
			$xml_sub_child[] = new xml_node('entry_status', null, null, $db->Record['entry_status']);
			$xml_sub_child[] = new xml_node('note', array('BASE64'=>'1'), null, $db->Record['note']);
						
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_seminar_classes_dates'=>$db->Record['id_seminar_classes_dates']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('SEMINAR_CLASSES_DATES', null, $xml_child_node);
	}
	
	
	function get_orientations_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM orientation_classes
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('status',null, null, $db->Record['status']);
			$xml_sub_child[] = new xml_node('first_date_id',null, null, $db->Record['first_date_id']);
			$xml_sub_child[] = new xml_node('first_campus_location',null, null, $db->Record['first_campus_location']);
			$xml_sub_child[] = new xml_node('first_allotted_minutes', null, null, $db->Record['first_allotted_minutes']);
			$xml_sub_child[] = new xml_node('first_preferred_time', null, null, $db->Record['first_preferred_time']);
			$xml_sub_child[] = new xml_node('first_time_range_start', null, null, $db->Record['first_time_range_start']);
			$xml_sub_child[] = new xml_node('first_time_range_end', null, null, $db->Record['first_time_range_end']);
			$xml_sub_child[] = new xml_node('second_date_id', null, null, $db->Record['second_date_id']);
			$xml_sub_child[] = new xml_node('second_campus_location', null, null, $db->Record['second_campus_location']);
			$xml_sub_child[] = new xml_node('second_allotted_minutes', null, null, $db->Record['second_allotted_minutes']);
			$xml_sub_child[] = new xml_node('second_preferred_time', null, null, $db->Record['second_preferred_time']);
			$xml_sub_child[] = new xml_node('second_time_range_start', null, null, $db->Record['second_time_range_start']);
			$xml_sub_child[] = new xml_node('second_time_range_end', null, null, $db->Record['second_time_range_end']);
			$xml_sub_child[] = new xml_node('instructions', null, null, $db->Record['instructions']);
			$xml_sub_child[] = new xml_node('notes', null, null, $db->Record['notes']);
			$xml_sub_child[] = new xml_node('finalDateTime', null, null, $db->Record['finalDateTime']);
			$xml_sub_child[] = new xml_node('finalSessionLength', null, null, $db->Record['finalSessionLength']);
			$xml_sub_child[] = new xml_node('finalCampus', null, null, $db->Record['finalCampus']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_orientation_classes'=>$db->Record['id_orientation_classes']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('ORIENTATION_CLASSES', null, $xml_child_node);
	}
	
	
	function get_calendar_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM lcEvents
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('calendarID',null, null, $db->Record['calendarID']);
			$xml_sub_child[] = new xml_node('calendarType',null, null, $db->Record['calendarType']);
			$xml_sub_child[] = new xml_node('username',null, null, $db->Record['username']);
			$xml_sub_child[] = new xml_node('title', array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('description', array('BASE64'=>'1'), null, $db->Record['description']);
			$xml_sub_child[] = new xml_node('location', array('BASE64'=>'1'), null, $db->Record['location']);
			$xml_sub_child[] = new xml_node('startdate', null, null, $db->Record['startdate']);
			$xml_sub_child[] = new xml_node('enddate', null, null, $db->Record['enddate']);
			$xml_sub_child[] = new xml_node('lastmodified', null, null, $db->Record['lastmodified']);
			$xml_sub_child[] = new xml_node('repeatType', null, null, $db->Record['repeatType']);
			$xml_sub_child[] = new xml_node('repeatCount', null, null, $db->Record['repeatCount']);
			$xml_sub_child[] = new xml_node('repeatData', null, null, $db->Record['repeatData']);
			$xml_sub_child[] = new xml_node('repeatExclude', null, null, $db->Record['repeatExclude']);
			$xml_sub_child[] = new xml_node('repeatUntil', null, null, $db->Record['repeatUntil']);
			$xml_sub_child[] = new xml_node('id_item', null, null, $db->Record['id_item']);
			$xml_sub_child[] = new xml_node('id_item_sub', null, null, $db->Record['id_item_sub']);
			$xml_sub_child[] = new xml_node('f_allday', null, null, $db->Record['f_allday']);
			$xml_sub_child[] = new xml_node('f_showwhenactive', null, null, $db->Record['f_showwhenactive']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'pkey'=>$db->Record['pkey']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_CALENDAR', null, $xml_child_node);
	}
	
	
	function get_syllabus_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_syllabuses
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('instructionMethods', array('BASE64'=>'1'), null, $db->Record['instructionMethods']);
			$xml_sub_child[] = new xml_node('gradingScale', array('BASE64'=>'1'), null, $db->Record['gradingScale']);
			$xml_sub_child[] = new xml_node('courseReqs', array('BASE64'=>'1'), null, $db->Record['courseReqs']);
			$xml_sub_child[] = new xml_node('courseObjectives',  array('BASE64'=>'1'), null, $db->Record['courseObjectives']);
			$xml_sub_child[] = new xml_node('emailPolicy', array('BASE64'=>'1'), null, $db->Record['emailPolicy']);
			$xml_sub_child[] = new xml_node('other', array('BASE64'=>'1'), null, $db->Record['other']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_syllabuses'=>$db->Record['id_class_syllabuses']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_SYLLABUSES', null, $xml_child_node);
	}
	
	function get_announcement_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_announcements
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('dt_created',null, null, $db->Record['dt_created']);
			$xml_sub_child[] = new xml_node('dt_display',null, null, $db->Record['dt_display']);
			$xml_sub_child[] = new xml_node('tx_title', array('BASE64'=>'1'), null, $db->Record['tx_title']);
			$xml_sub_child[] = new xml_node('tx_description', array('BASE64'=>'1'), null, $db->Record['tx_description']);
			$xml_sub_child[] = new xml_node('id_faculty_createdby', null, null, $db->Record['id_faculty_createdby']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_announcements'=>$db->Record['id_class_announcements'],
									
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_ANNOUNCEMENTS', null, $xml_child_node);
	}
	
	
	function get_faq_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_faqs
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('category', array('BASE64'=>'1'), null, $db->Record['category']);
			$xml_sub_child[] = new xml_node('answer', array('BASE64'=>'1'), null, $db->Record['answer']);
			$xml_sub_child[] = new xml_node('question', array('BASE64'=>'1'), null, $db->Record['question']);
			$xml_sub_child[] = new xml_node('clicks', null, null, $db->Record['clicks']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_faqs'=>$db->Record['id_class_faqs']											
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_FAQS', null, $xml_child_node);
	}
   
		
	function get_gradebook_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_gradebook
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{
			$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('a_upper', null, null, $db->Record['a_upper']);
			$xml_sub_child[] = new xml_node('a_lower', null, null, $db->Record['a_lower']);
			$xml_sub_child[] = new xml_node('b_lower', null, null, $db->Record['b_lower']);
			$xml_sub_child[] = new xml_node('c_lower', null, null, $db->Record['c_lower']);
			$xml_sub_child[] = new xml_node('d_lower', null, null, $db->Record['d_lower']);
			$xml_sub_child[] = new xml_node('calculation_type', null, null, $db->Record['calculation_type']);
			$xml_sub_child[] = new xml_node('color_missing_grade', array('BASE64'=>'1'), null, $db->Record['color_missing_grade']);
			$xml_sub_child[] = new xml_node('roundScoresUp', null, null, $db->Record['roundScoresUp']);
			$xml_sub_child[] = new xml_node('total_points', null, null, $db->Record['total_points']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_gradebook'=>$db->Record['id_class_gradebook']											
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_GRADEBOOK', null, $xml_child_node);
	}
	
	
	function get_gradebook_categories_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_gradebook_categories
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{
			$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('weight', null, null, $db->Record['weight']);
			$xml_sub_child[] = new xml_node('label', array('BASE64'=>'1'), null, $db->Record['label']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_gradebook_categories'=>$db->Record['id_class_gradebook_categories']											
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_GRADEBOOK_CATEGORIES', null, $xml_child_node);
	}
	
	
	function get_gradebook_entries_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_gradebook_entries
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{
			$xml_sub_child = null;
			
			
			$xml_sub_child[] = new xml_node('id_class_gradebook_categories', null, null, $db->Record['id_class_gradebook_categories']);
			$xml_sub_child[] = new xml_node('title', array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('gradebook_code', array('BASE64'=>'1'), null, $db->Record['gradebook_code']);
			
			$xml_sub_child[] = new xml_node('total_points', null, null, $db->Record['total_points']);
			$xml_sub_child[] = new xml_node('publish_flag', null, null, $db->Record['publish_flag']);
			$xml_sub_child[] = new xml_node('date_due', null, null, $db->Record['date_due']);
			
			$xml_sub_child[] = new xml_node('notes', array('BASE64'=>'1'), null, $db->Record['notes']);
			
			// PAY ATTENTION TO THIS
			$xml_sub_child[] = new xml_node('assessment_id', null, null, $db->Record['assessment_id']);
			$xml_sub_child[] = new xml_node('assignment_id', null, null, $db->Record['assignment_id']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_gradebook_entries'=>$db->Record['id_class_gradebook_entries']											
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_GRADEBOOK_ENTRIES', null, $xml_child_node);
	}
	
	// restore only (NO COPY OPTION) maybe not allow this
	function get_gradebook_val_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_gradebook_val
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{
			$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('id_class_gradebook_entries', null, null, $db->Record['id_class_gradebook_entries']);
			$xml_sub_child[] = new xml_node('username', array('BASE64'=>'1'), null, $db->Record['username']);
			$xml_sub_child[] = new xml_node('score', null, null, (($db->Record['score'] == null) ? 'NULL' : $db->Record['score']));
			
			$xml_sub_child[] = new xml_node('comments', array('BASE64'=>'1'), null, $db->Record['comments']);
			
			$xml_sub_child[] = new xml_node('date_created', null, null, $db->Record['date_created']);
			$xml_sub_child[] = new xml_node('date_modified', null, null, $db->Record['date_modified']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_gradebook_val'=>$db->Record['id_class_gradebook_val']											
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_GRADEBOOK_VAL', null, $xml_child_node);
	}

/*
 *
 * Processes the choices made above and makes a compresses .zip file.
 * We should look at using XML to save this file so we can easily build 
 * an import routine to pull stuff this export generated back into the system.
 *
 * Input data: classID
 * Output data: form
 *
 */
       
	function exportClassRun(&$db,&$u,&$lc,&$t) {
            $lc->templateName='dataexchange_main';
//auto-comment			$lc->templateStyle = 'private';
			
       }       
}


class LcZipFile {

	var $datasec = array();
	var $ctrl_dir = array();
	var $eof_ctrl_dir = "\x50\x4b\x05\x06\x00\x00\x00\x00";
	var $old_offset = 0;

	var $location_root = '/tmp/semester_backup';
	/**
	 *	Constructor:: Starts the process by exec'ing out and
	 *	creating the initial directory, but first cleaning up
	 *	a previously left directory as well.
	 *
	 *	@note	I can not do proper error checking with an 
	 *			exec command, I could be potentially
	 *			screwing up alot of things, or at least
	 *			dirtying up directories with junk files.
	 *			lets pray linux perms will stop us from 
	 *			making things go astray
	 */
	function LcZipFile()
	{
		// cleaning up 
		exec('cd /tmp');
		
		// creating directory and moving into it (our base directory, where all of our work will be done from)
		exec('mkdir -p '.$this->location_root.';cd '.$this->location_root.';');
		
	}
	
	
	/**
	 *	Add a directory but without moving outside the 
	 *	root directory (or: self::$location_root)
	 */
	function add_dir($name) 
	{	
		exec('mkdir -p '.$this->location_root.'/'.$name.';');
	}


	function add_file($data, $filename) 
	{	
		if (!$handle = fopen($this->location_root.'/'.$filename, 'w+')) 
		{
			error_log("Cannot open file (".$this->location_root."/$filename)", 0);
        	return;
    	}

		fwrite($handle, $data);
        fclose($handle);
    	
	} 
 

	function file() { 
		$data = implode("", $this->datasec); 
		$ctrldir = implode("", $this->ctrl_dir); 

	   return 
		$data. 
		$ctrldir. 
		$this -> eof_ctrl_dir. 
		pack("v", sizeof($this->ctrl_dir)). 
		pack("v", sizeof($this->ctrl_dir)). 
		pack("V", strlen($ctrldir)). 
		pack("V", strlen($data)). 
		"\x00\x00"; 
	} 

}


/**
 *	This class was not ment for large scale zips as it
 *	maintains everything in memory. 
 */
class LcZipFile_original {

	var $datasec = array();
	var $ctrl_dir = array();
	var $eof_ctrl_dir = "\x50\x4b\x05\x06\x00\x00\x00\x00";
	var $old_offset = 0;


	function add_dir($name) {
		$name = str_replace("\\","/", $name);

		$fr = "\x50\x4b\x03\x04";
		$fr .= "\x0a\x00";
		$fr .= "\x00\x00";
		$fr .= "\x00\x00";
		$fr .= "\x00\x00\x00\x00";

		$fr .= pack("V",0);
		$fr .= pack("V",0);
		$fr .= pack("V",0);
		$fr .= pack("v",strlen($name));
		$fr .= pack("v",0);
		$ft .= $name;
		$fr .= pack("V",0);
		$fr .= pack("V",0);
		$fr .= pack("V",0);

		$this->datasec[] = $fr;

		$new_offset = $this->old_offset + strlen($fr);

		$cdrec = "\x50\x4b\x01\x02";
		$cdrec .="\x00\x00";
		$cdrec .="\x0a\x00";
		$cdrec .="\x00\x00";
		$cdrec .="\x00\x00";
		$cdrec .="\x00\x00\x00\x00";
		$cdrec .= pack("V",0);
		$cdrec .= pack("V",0);
		$cdrec .= pack("V",0);
		$cdrec .= pack("v",strlen($name));
		$cdrec .= pack("v",0);
		$cdrec .= pack("v",0);
		$cdrec .= pack("v",0);
		$cdrec .= pack("v",0);
		$ext = "\x00\x00\x10\x00";
		$ext = "\xff\xff\xff\xff";
		$cdrec .= pack("V",16);
		$cdrec .= pack("V",$this->old_offset);
		$cdrec .= $name;

		$this->ctrl_dir[] = $cdrec;
		$this->old_offset = $new_offset;

	}


	function add_file($data, $name) { 
		$name = str_replace("\\", "/", $name); 
		$unc_len = strlen($data); 
		$crc = crc32($data); 
		$zdata = gzcompress($data); 
		$zdata = substr ($zdata, 2, -4); 
		//should be strlen if substr, or original ?
		$c_len = strlen($zdata); 

		$fr = "\x50\x4b\x03\x04"; 
		$fr .= "\x14\x00"; 
		$fr .= "\x00\x00"; 
		$fr .= "\x08\x00"; 
		$fr .= "\x00\x00\x00\x00"; 
		$fr .= pack("V",$crc); 
		$fr .= pack("V",$c_len); 
		$fr .= pack("V",$unc_len); 
		$fr .= pack("v", strlen($name) ); 
		$fr .= pack("v", 0 ); 
		$fr .= $name; 
		$fr .= $zdata; 
		$fr .= pack("V",$crc); 
		$fr .= pack("V",$c_len); 
		$fr .= pack("V",$unc_len); 

		$this->datasec[] = $fr;

		$new_offset = strlen(implode("", $this->datasec)); 

		$cdrec = "\x50\x4b\x01\x02"; 
		$cdrec .="\x00\x00"; 
		$cdrec .="\x14\x00"; 
		$cdrec .="\x00\x00"; 
		$cdrec .="\x08\x00"; 
		$cdrec .="\x00\x00\x00\x00"; 
		$cdrec .= pack("V",$crc); 
		$cdrec .= pack("V",$c_len); 
		$cdrec .= pack("V",$unc_len); 
		$cdrec .= pack("v", strlen($name) ); 
		$cdrec .= pack("v", 0 ); 
		$cdrec .= pack("v", 0 ); 
		$cdrec .= pack("v", 0 ); 
		$cdrec .= pack("v", 0 ); 
		$cdrec .= pack("V", 32 ); 
		$cdrec .= pack("V", $this->old_offset ); 

		$this -> old_offset = $new_offset; 

		$cdrec .= $name; 
		$this -> ctrl_dir[] = $cdrec; 
	} 
 

	function file() { 
		$data = implode("", $this->datasec); 
		$ctrldir = implode("", $this->ctrl_dir); 

	   return 
		$data. 
		$ctrldir. 
		$this -> eof_ctrl_dir. 
		pack("v", sizeof($this->ctrl_dir)). 
		pack("v", sizeof($this->ctrl_dir)). 
		pack("V", strlen($ctrldir)). 
		pack("V", strlen($data)). 
		"\x00\x00"; 
	} 

}
?>

