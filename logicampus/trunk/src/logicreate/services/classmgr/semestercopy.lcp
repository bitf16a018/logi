<?php


include_once(LIB_PATH.'xmlparser.php');


class semestercopy extends FacultyService 
{
	
	// form stuff
	var $cleanedArray = array();
		
	var $presentor = "htmlPresentation";
	

	// Links
	var $sectionTitle = 'Classroom Update';
	
	var $applinks = array(
		'Export Classroom' => 'dataexchange/'
	);
	
	var $mode = 'restore';
	var $id_semester;
	
	var $map_assignments = array();
	var $map_link_categories = array();
	var $map_link = array();
	var $map_objectives = array();
	var $map_content = array();
	
	var $map_gradebook_category = array();
	var $map_gradebook_entries = array();
	
	var $obj_db;
	
	var $home_dir;
	
	var $__errors = array();
	
	# Displays Classes by default (chooses current semster by default)	
	function Run($db,&$u,&$lc,&$t)
	{
		$lc->templateStyle='private';
		$lc->templateName = 'semestercopy_main';

		/**
		 *	List all classes belonging to teacher
		 *	Only list out classes that are within or past editing phases
		 */
		$sql = '
		SELECT A.id_classes, B.courseName, A.courseFamilyNumber, C.semesterId, semesterYear
		FROM classes as A
		INNER JOIN courses as B ON A.id_courses=B.id_courses
		INNER JOIN semesters as C ON A.id_semesters=C.id_semesters
		WHERE A.facultyId=\''.$u->username.'\' AND C.dateAccountActivation <= now()
		ORDER BY C.semesterYear DESC, A.courseFamilyNumber DESC,A.id_classes';
		
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		while ($db->next_record())
		{	$t['selections'][$db->Record['id_classes']] = $db->Record;
		}

	}
	
	
	/**
	 *	After hitting the run() and selecting a class, you come here
	 *	Here we determine if the classroom you choose to update is really yours
	 *	then we choose which classroom to update it *with* thus excluding (graying)
	 *	out the previous selected semester in run() to show which one is going to be
	 *	updated
	 */
	function selectClassRun($db, &$u, &$lc, &$t)
	{
		$fl_ismyclass = false;
		$id_classes = (int)$lc->postvars['id_classes_update'];
		
		$lc->templateStyle='private';
		$lc->templateName = 'semestercopy_selectClass';
		
		/**
		 *	List all classes belonging to teacher
		 *	Only list out classes that are within or past editing phases
		 *	** same as above, we're just going to run a few checks and mod the data on the fly
		 */
		$sql = '
		SELECT A.id_classes, B.courseName, A.courseFamilyNumber, C.semesterId, semesterYear
		FROM classes as A
		INNER JOIN courses as B ON A.id_courses=B.id_courses
		INNER JOIN semesters as C ON A.id_semesters=C.id_semesters
		WHERE A.facultyId=\''.$u->username.'\' 
		/**AND ((C.dateStart < NOW() **/
		AND
		((C.dateAccountActivation <= now()) OR (A.id_classes='.$id_classes.'))
		ORDER BY C.semesterYear ASC, A.courseFamilyNumber ASC, A.id_classes';
	
		$db->query($sql);

		while ($db->next_record())
		{	
			if ($id_classes == $db->Record['id_classes'])
			{	$db->Record['id_classes_update'] = $db->Record['id_classes'];
				$t['selected'] = $db->Record;
				$fl_ismyclass = true;
//				continue;
			}
			
			$t['selections'][$db->Record['id_classes']] = $db->Record;
			
		}
		
		if ($fl_ismyclass == false)
		{	// error, you didn't select a class or you didn't select one that is yours.
		 	$this->run($db, $u, $lc, $t);
		}
		
	}
	
	
	/**
	 *	After hitting the list of classes to use to update the first (run) with
	 *	We are going to try and find out if we can verify that is my class.
	 *		
	 *
	 */
	function selectWithRun($db, &$u, &$lc, &$t)
	{
		$fl_ismyclass = false;
		
		$id_classes = (int)$lc->postvars['id_classes_update'];
		$id_classes_with = (int)$lc->postvars['id_classes_with'];
		
		$lc->templateStyle='private';
		$lc->templateName = 'semestercopy_selectWith';
		
		/**
		 *	List all classes belonging to teacher
		 *	Only list out classes that are within or past editing phases
		 *	** same as above, we're just going to run a few checks 
		 *	** I maintain a similar sql as above with the intent to verify existance
		 */
		$sql = '
		SELECT A.id_classes
		FROM classes as A
		INNER JOIN courses as B ON A.id_courses=B.id_courses
		INNER JOIN semesters as C ON A.id_semesters=C.id_semesters
		WHERE 
		(A.id_classes='.$id_classes.' OR A.id_classes='.$id_classes_with.') AND
		A.facultyId=\''.$u->username.'\' AND C.dateAccountActivation <= now()
		ORDER BY C.semesterYear DESC, A.courseFamilyNumber DESC';
		
		$db->query($sql);
		if ($db->getNumRows() == 2)
		{	// pushing to template
			$t['update'] = $this->getClass($id_classes, $u->profile->get('username'), $db);
			$t['with'] = $this->getClass($id_classes_with, $u->profile->get('username'), $db);
			
		} else
		{	// error, you didn't select a class or you didn't select one that is yours.
		 	$this->run($db, $u, $lc, $t);
		}
		
	}
	
	
	function selectYouSureRun($db, &$u, &$lc, &$t)
	{
		$id_classes = (int)$lc->postvars['id_classes_update'];
		$id_classes_with = (int)$lc->postvars['id_classes_with'];
		$ic_sure = $lc->postvars['ic_sure'];
		
		$lc->templateStyle='private';
		$lc->templateName = 'semestercopy_selectWith';
		
		switch($ic_sure)
		{	
			case 1: 
				$t['warning_message'] = '
				***** Are you sure you want to do this?  You are risking data deletion<br>';
				
				break;
				
			case 2: 
				$t['warning_message'] = '
				<h2>***** This is your last and final warning!!!</h2>
				<br>';
				
				break;
			case 3:
				echo 'Running update now....';
				$this->updateOther($id_classes, $id_classes_with, $db, $u, $lc, $t);
				break;
			default:
			$t['warning_message'] = '
				Are you sure you want to do this?  You are risking data deletion<br>';
				
			break;
		}
		
		/**
		 *	List all classes belonging to teacher
		 *	Only list out classes that are within or past editing phases
		 *	** same as above, we're just going to run a few checks 
		 *	** I maintain a similar sql as above with the intent to verify existance
		 */
		$sql = '
		SELECT A.id_classes
		FROM classes as A
		INNER JOIN courses as B ON A.id_courses=B.id_courses
		INNER JOIN semesters as C ON A.id_semesters=C.id_semesters
		WHERE 
		(A.id_classes='.$id_classes.' OR A.id_classes='.$id_classes_with.') AND
		A.facultyId=\''.$u->username.'\' AND C.dateAccountActivation <= now()
		ORDER BY C.semesterYear DESC, A.courseFamilyNumber DESC';
		
		$db->query($sql);
		if ($db->getNumRows() == 2)
		{	// pushing to template
			$t['update'] = $this->getClass($id_classes, $u->profile->get('username'), $db);
			$t['with'] = $this->getClass($id_classes_with, $u->profile->get('username'), $db);
			
		} else
		{	// error, you didn't select a class or you didn't select one that is yours.
		 	$this->run($db, $u, $lc, $t);
		}
		
	}
	
	function getClass($id_classes, $facultyId, $db)
	{	
		$sql = '
		SELECT A.id_classes, B.courseName, A.courseFamilyNumber, C.semesterId, semesterYear
		FROM classes as A
		INNER JOIN courses as B ON A.id_courses=B.id_courses
		INNER JOIN semesters as C ON A.id_semesters=C.id_semesters
		WHERE A.id_classes='.$id_classes.' 
		AND A.facultyId=\''.$facultyId.'\' 
		AND C.dateAccountActivation <= now()
		ORDER BY C.semesterYear DESC, A.courseFamilyNumber DESC';
		
		$db->RESULT_TYPE = MYSQL_ASSOC;
		$db->queryOne($sql);
		
		return $db->Record;
	}


	/**
	 *	Use this event to update a classroom with another's backup file
	 *
	 *	Quick description of process:
	 *		Wipes out selected classes information
	 *		and imports backup file's info into it
	 *	Questions
	 *		Do i want to remove the images/files classdoclib
	 *		Do i want to remove assessment answers? 
	 *
	 *		Do i really want to blow away this classroom before verifying the file was uploaded and
	 *			can be parsed? 
	 */
	function updateOther($id_classes_update, $id_classes_with, $db,&$u,&$lc,&$t)
	{
		$this->id_classes = $id_classes_update;
		$this->using_classes_id = $id_classes_update;
		
		$this->id_classes_with = $id_classes_with;
		
		$sql = '
		SELECT * 
		FROM classes
		WHERE id_classes = '.$id_classes_update;
		
		$db->queryOne($sql);
		if (is_array($db->Record))
		{	$classArray = $db->Record;
		}
		
		if ($classArray['id_classes'] > 0)
		{
			$id_classes = $classArray['id_classes'];
			$sql = array();
			
			$sql[] = 'DELETE FROM class_announcements WHERE id_classes='.$id_classes;
			$sql[] = 'DELETE FROM chat WHERE chat_id='.$id_classes;
			$sql[] = 'DELETE FROM class_faqs WHERE id_classes='.$id_classes;
			
			$sql_string = 'SELECT id_class_assignments FROM class_assignments WHERE id_classes='.$id_classes;
			$db->query($sql_string);
			while ($db->next_record())
			{
				$sql[] = 'DELETE FROM class_assignments_grades WHERE id_class_assignments='.$db->Record['id_class_assignments'];
				$sql[] = 'DELETE FROM class_assignments_turnin WHERE id_class_assignments='.$db->Record['id_class_assignments'];
				$sql[] = 'DELETE FROM class_assignments_link WHERE id_class_assignments='.$db->Record['id_class_assignments'];
			}
			$sql[] = 'DELETE FROM class_assignments WHERE id_classes='.$id_classes;
			
			$sql[] = 'DELETE FROM class_gradebook WHERE id_classes='.$id_classes;
			$sql[] = 'DELETE FROM class_gradebook_categories WHERE id_classes='.$id_classes;
			$sql[] = 'DELETE FROM class_gradebook_entries WHERE id_classes='.$id_classes;
			$sql[] = 'DELETE FROM class_gradebook_val WHERE id_classes='.$id_classes;

			$sql[] = 'DELETE FROM class_lesson_content WHERE id_classes='.$id_classes;
			
			$sql_string = 'SELECT id_class_lessons FROM class_lessons WHERE id_classes='.$id_classes;
			
			$db->query($sql_string);
			while ($db->next_record())
			{
				$sql[] = 'DELETE FROM class_lesson_links WHERE id_class_lessons='.$db->Record['id_class_lessons'];
				$sql[] = 'DELETE FROM class_lesson_objectives WHERE id_class_lesson='.$db->Record['id_class_lessons'];
			}
			
			$sql[] = 'DELETE FROM class_lessons WHERE id_classes='.$id_classes;

			// get lesson id's that belong to the class
			
			$sql[] = 'DELETE FROM class_links WHERE id_classes='.$id_classes;
			$sql[] = 'DELETE FROM class_links_categories WHERE id_classes='.$id_classes;

			$sql[] = 'DELETE FROM class_objectives WHERE id_classes='.$id_classes;
			$sql[] = 'DELETE FROM class_presentations WHERE id_classes='.$id_classes;
			
			$sql[] = 'DELETE FROM class_syllabuses WHERE id_classes='.$id_classes;
			
			// *** I"m not sure about this
			$sql[] = 'DELETE FROM lcEvents WHERE id_classes='.$id_classes;
			
			//$sql[] = 'DELETE FROM exam_schedule_classes WHERE id_classes='.$id_classes;
			//$sql[] = 'DELETE FROM exam_schedule_classes_dates WHERE id_classes='.$id_classes;
			
			//$sql[] = 'DELETE FROM orientation_classes WHERE id_classes='.$id_classes;
			//$sql[] = 'DELETE FROM seminar_classes_dates WHERE id_classes='.$id_classes;
			
			//$sql[] = 'DELETE FROM textbook WHERE id_classes='.$id_classes;
			//$sql[] = 'DELETE FROM textbook_classes WHERE id_classes='.$id_classes;
			
			$sql_string = 'SELECT assessment_id FROM assessment WHERE class_id='.$id_classes;
			
			$db->query($sql_string);
			while ($db->next_record())
			{	$sql[] = 'DELETE FROM assessment_question WHERE assessment_id='.$db->Record['assessment_id'];
			}
			
			$sql[] = 'DELETE FROM assessment WHERE class_id='.$id_classes;
			$sql[] = 'DELETE FROM assessment_answer WHERE id_classes='.$id_classes;
			$sql[] = 'DELETE FROM assessment_log WHERE id_classes='.$id_classes;
			
			// get pkey for files_folderid
			$sql_string = 'SELECT pkey FROM classdoclib_Folders WHERE class_id='.$id_classes;
			$db->query($sql_string);
			
			while ($db->next_record())
			{	$sql[] = 'DELETE FROM classdoclib_Files WHERE folder='.$db->Record['pkey'];
			}
			
			$sql[] = 'DELETE FROM classdoclib_Folders WHERE class_id='.$id_classes;
			
			foreach($sql as $sql_exec)
			{	$db->query($sql_exec);
			}
			
			// need to know which semester to copy it into
			$this->mode = 'update';
			
			// i need a semester id too i think!
			$this->id_semester= $classArray['id_semesters'];
			$this->restore($db, $u, $lc, $t); // execute restore with mode changed
			
			
		}
		
		
	}
	
	
	function restore($db,&$u,&$lc,&$t)
	{
		
		$this->obj_db =& $db;
		
		$this->current_dir = '/tmp/class_'.$this->using_classes_id.'/';
		$this->home_dir = $this->current_dir;
		exec('rm -rf '.$this->current_dir);
		
		$this->obj_zip = new LcZipFile('/tmp/class_'.$this->using_classes_id);
		
		$this->id_classes = $this->id_classes_with;
		
		// back up the classroom to disk (backing up WITH id class)
		$xmlObj = new xmlparser('<dataexchange></dataexchange>');
		
	    	$this->obj_zip->add_dir('library/');
		$this->obj_zip->add_dir('content/');
		$this->obj_zip->add_dir('assignments/');
	
		$xmlObj = new xmlparser('<dataexchange></dataexchange>');
		$root =& $xmlObj->getRoot();
		
		$classroom_node[] = new xml_node('CLASSROOM', 
								array(	'ID'=>$db->Record['id_classes'], 
										'CLASSTYPE'=>$db->Record['classType'],
										'ID_SEMESTERS'=>$db->Record['id_semesters'],
										'STYLESHEET'=>$db->Record['stylesheet'],
										'FACULTYID'=>$db->Record['facultyId'],
										'SECTIONNUMBERS'=>$db->Record['sectionNumbers']
									 )
								);

		$root->children =& $classroom_node;
		
		$application_nodes[] = $this->get_faq_nodes();
		$application_nodes[] = $this->get_syllabus_nodes();
		$application_nodes[] = $this->get_announcement_nodes();
		$application_nodes[] = $this->get_assignments_nodes();
		$application_nodes[] = $this->get_links_categories_nodes();
		$application_nodes[] = $this->get_links_nodes();
		$application_nodes[] = $this->get_objectives_nodes();
		$application_nodes[] = $this->get_documentlibrary_nodes();
		$application_nodes[] = $this->get_textbook_nodes();
		$application_nodes[] = $this->get_calendar_nodes();	// needs to be last, becuase it links
		$application_nodes[] = $this->get_lessons_nodes();
		$application_nodes[] = $this->get_content_nodes();
		$application_nodes[] = $this->get_assessments_nodes();
		$application_nodes[] = $this->get_gradebook_nodes();
		$application_nodes[] = $this->get_gradebook_categories_nodes();
		$application_nodes[] = $this->get_gradebook_entries_nodes();
		
		$classroom_child_node[] = new xml_node('APPLICATIONS', null, $application_nodes, null);
		$classroom_node[0]->children = $classroom_child_node;
		
		$fh = tmpfile();
		
		$xmlObj->write_file($fh);
		$smack = $xmlObj->getRoot();
		
		$file_size = ftell($fh);
		
		rewind($fh);
		
		$silly = fread($fh, $file_size);
		
		fclose($fh);
		
		$this->obj_zip->add_file($silly,'classroom.xml');
    
		
		echo '<br>';
		// now we have a backup.. lets grqab the xml and process it!
		
		$root_node =& $xmlObj->getRoot();

		if (is_array($root_node->children))
		foreach($root_node->children as $classroom_node)
		{	
			
			// may roll through MANY classrooms (classroom_node = a full classroom, including all application data, ect)
			if ($classroom_node->tag == 'CLASSROOM')
			{
				$this->classroom_node($classroom_node->children[0]);
			} 
			
		}

		$this->presentor = 'redirectPresentation';
		
		$t['url'] = modurl('semestercopy/event=done/');

	}
	
	function doneRun($db, &$u, &$lc, &$t)
	{
		$lc->templateStyle='private';
		$lc->templateName = 'semestercopy_done';
	}
	
	function classroom_node($node)
	{
		$this->mode = 'copy';
		
		if ($node->tag == 'APPLICATIONS')
		{
			// roll thorugh the applications
			if (is_array($node->children))
			foreach($node->children as $application)
			{	
				$this->{'xml_'.$application->tag}(&$application->children); 
			}
		}
		
		
	}
	
	
	/************************************************
	 ************************************************
	 **	DATA RESTORE
	 **/
	 
function remove_first_comma($string)
	{
		$pos_of_comma = strpos($string, ',');
		$string_first = substr($string, 0, ($pos_of_comma));
		$string_second = substr($string, ($pos_of_comma+1));
		return $string_first. $string_second;
	}
	
	/**
	 *
	 *	@@DONE
	 */
	function xml_CLASS_FAQS($node)
	{
		foreach($node as $faq)
		{
			$sql = '
			REPLACE INTO class_faqs
			SET
			';
			
			if ($this->mode != 'copy')
			{
				$sql .= '
				id_class_faqs='.$faq->attrs['ID_CLASS_FAQS'];
			}
			
			foreach($faq->children as $field_node)
			{
				if ($field_node->tag == 'CLICKS')
				{	$field_node->value = 0;
				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes(str_replace('\\\\', '', $field_node->value))).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			if (mysql_errno() > 0)
			{	$this->__errors[] = $sql;
			}
			// INSERT ON EVERY ROUND! OR stuff the sql into an array and roll through it at end of function.. or return it
		}
		
	}
	
	
	/**
	 * @@DONE
	 */	
	function xml_CLASS_ANNOUNCEMENTS($node)
	{
		foreach($node as $announcement)
		{
			$sql = '
			REPLACE INTO class_announcements
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_announcements='.$announcement->attrs['ID_CLASS_ANNOUNCEMENTS'];
			}
			
			foreach($announcement->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;

			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);	
			$this->__errors[] = __LINE__. ' '. mysql_error();
			if (mysql_errno() > 0)
			{	$this->__errors[] = $sql;
			}
		}
		
	}
	
	
	/**
	 *
	 *	@@DONE
	 */
	function xml_CLASS_SYLLABUSES($node)
	{
		foreach($node as $syllabus)
		{
			$sql = '
			REPLACE INTO class_syllabuses
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_syllabuses='.$syllabus->attrs['ID_CLASS_SYLLABUSES'];
			}
			
			foreach($syllabus->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes(stripslashes(str_replace('\\\\', '', $field_node->value)))).'\'';
			}
			
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			if (mysql_errno() > 0)
			{	$this->__errors[] = $sql;
			}
		}
		
	}
	
	
	/**
	 *
	 *	Some difficult things I need to workout.
	 *		1] mapping the id_item and id_subitem to it's correct counterpart via calendarType
	 *		2] refer to number 1.. sheesh!
	 */
	function xml_CLASS_CALENDAR($node)
	{
		$calendarType = '';
		$id_item = '';
		$id_sub_item = '';
		
		foreach($node as $calendar)
		{
			$sql = '
			REPLACE INTO lcEvents
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= ' 
				pkey='.$calendar->attrs['PKEY'];
			}
			
			foreach($calendar->children as $field_node)
			{
				if ($field_node->tag == 'CALENDARTYPE')
				{	$calendarType = $field_node->value;
				}
				
				if ($field_node->tag == 'ID_ITEM')
				{	$id_item = $field_node->value;
					$field_node->value = '::ITEM::';
				}
				
				if ($field_node->tag == 'ID_ITEM_SUB')
				{	$id_item_sub = $field_node->value;
					$field_node->value = '::ITEMSUB::';
				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';

			}
			
			$sql .=', id_classes='.$this->using_classes_id;

			
			// we need to 
			// find mappings of id's (incase this is a COPY)
			if ($this->mode == 'copy')
			{
				switch($calendarType)
				{
					case 'classroomassignments':
						// execute database query
						// do some sort of replace on the sql string now?!
						$sql = str_replace('::ITEM::', $this->map_assignments[$id_item], $sql);
						$sql = str_replace('::ITEMSUB::', '0', $sql);
						// execute query
						
						if ($this->mode == 'copy')
						{	$sql = $this->remove_first_comma($sql);
						}
						
						$this->obj_db->query($sql);
						$this->__errors[] = __LINE__. ' '. mysql_error();
						break;
					
					case 'orientationsscheduling':	// do not query (we are in copy mode)
						break;
						
					/**
						Add in any new objects here
						// seminar

					 */
					case '':
						$sql = str_replace('::ITEM::', $id_item, $sql);
						$sql = str_replace('::ITEMSUB::', $id_item_sub, $sql);
						if ($this->mode == 'copy')
						{	$sql = $this->remove_first_comma($sql);
						}
						
						$this->obj_db->query($sql);
						//execute query 
						$this->__errors[] = __LINE__. ' '. mysql_error();
						break;
					
				}
				
			} else 
			{	$sql = str_replace('::ITEM::', $id_item, $sql);
				$sql = str_replace('::ITEMSUB::', $id_item_sub, $sql);
				// execute query
				if ($this->mode == 'copy')
				{	$sql = $this->remove_first_comma($sql);
				}
				
				$this->obj_db->query($sql);
				$this->__errors[] = __LINE__. ' '. mysql_error();
			}
			
		}
		
	}
	
	
	function xml_CLASS_ASSIGNMENTS($node)
	{
		foreach($node as $nodette)
		{
			
			$sql = '
			REPLACE INTO class_assignments
			SET';
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';

			}
			// execute
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			$this->map_assignments[$nodette->attrs['id_class_assignments']] = $this->obj_db->getInsertID();
		}
	
	}

	
	
	

	/**
	 *	@@DONE
	 */
	function xml_CLASS_LINKS_CATEGORIES($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_links_categories
			SET';
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			// execute and keep track of ID
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			$this->map_link_categories[$nodette->attrs['id_class_links_categories']] = $this->obj_db->getInsertId();
		}
		
		
	}

	/**
	 *	@@DONE
	 */
	function xml_CLASS_LINKS($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_links
			SET';
			
			foreach($nodette->children as $field_node)
			{
				if (strtoupper($field_node->tag) == 'HITS')
				{	$field_node->value = 0;
				}
				// if we're in a copy.. then we need to update the id categories to the NEW id we created
				if (strtoupper($field_node->tag) == 'ID_CLASS_LINKS_CATEGORIES' && $this->mode == 'copy')
				{	$field_node->value = $this->map_link_categories[$field_node->value];
				}	
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
				
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			$sql = $this->remove_first_comma($sql);
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			// execute
			$this->map_link[$nodette->attrs['id_class_links']] = $this->obj_db->getInsertID();
		}
		
	}
	
	/**
	 *	I will need to make a mapping of the old number to the new number.. maybe arary[oldnumber] = newnumber.
	 *  it will make it easy for me
	 */
	// I will need to soak up the id number on a copy
	/**
	 *	@@DONE
	 *
	 */
	function xml_CLASS_OBJECTIVES($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_objectives
			SET';
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
			$this->map_objectives[$nodette->attrs['id_class_objectives']] = $this->obj_db->getInsertID();
			
			// INSERT ON EVERY ROUND! OR stuff the sql into an array and roll through it at end of function.. or return it
		}
		
	}
	
	
	/**
	 *	@@NOTE Only on restore, will not copy presentations to a new class
	 *
	 *	@@DONE
	 */
	function xml_CLASS_PRESENTATIONS($node)
	{
		if ($this->mode == 'copy')
		{	return true;
		}
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_presentations
			SET
				id_presentations='.$nodette->attrs['id_presentations'];
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
		}

	}
	
	/**
	 *	@@DONE
	 */
	// needs executing AFTER lessons
	function xml_CLASS_LESSON_CONTENT($node)
	{
		/// I need the lesson id to seed these contents with.. (not all have it)
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_lesson_content
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_lesson_content='.$nodette->attrs['ID_CLASS_LESSON_CONTENT'];
			}
			$textname = null;
			
			// HANDLE the new lesson IDS
			foreach($nodette->children as $field_node)
			{
			
				if (strtoupper($field_node->tag) == 'TXTITLE')
				{	$textname = $field_node->value.'.html';
				}
				
				if (strtoupper($field_node->tag) == 'ID_CLASS_LESSONS' && $field_node->value == '')
				{	
					$sql .= ','."\n".strtolower($field_node->tag).'=NULL';
				} else 
				{	// MAKE SURE ID_CLASS_LESSONS can handle NULL!
					if (strtoupper($field_node->tag) == 'ID_CLASS_LESSONS' && $this->mode == 'copy')
					{	// executing a copy
						// us mappings
						$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',$this->map_lessons[$field_node->value]).'\'';
					} else 
					{
						$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',$field_node->value).'\'';
					}
					
				}
			}
			
			// get content contnets
			$sql .= ','."\n".'txText=\''. str_replace('\'', '\'\'',stripslashes(str_replace('\\\\', '', file_get_contents($this->home_dir.'content/'.$textname)))).'\'';
			$sql .= ', id_classes='.$this->using_classes_id;

			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
			if ($this->mode == 'copy')
			{	$this->map_content[$nodette->attrs['id_class_lesson_content']] =  $this->obj_db->getInsertID();
			}
		
		}
		
		$this->rebuildContent();		
		
	}

	
	// dont forget assignments have mappings to lessons
	// I need to swap the lessons with the linking tables.. lessons should be on top as to get an ID to pass to the linking tables
	function xml_CLASS_LESSONS($node)
	{
		$a_mapping = array();
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_lessons
			SET';
			
			foreach($nodette->children as $field_node)
			{
				if ($field_node->tag == 'MAPPINGS')
				{	$a_mapping = $field_node->children;
					continue;
					// execute mapping IDS HERE? 
				}
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			// execute query
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			// if copy get inserted id
			$lesson_id = $this->obj_db->getInsertID();
			
			$this->map_lessons[$nodette->attrs['id_class_lessons']] = $lesson_id;
			// pass id to mapping method
			$this->xml_MAPPING($a_mapping, $lesson_id);
			
		}
	
	}

	
	/**
	 *	@@DONE
	 */
	function xml_MAPPING($node, $id_lesson)
	{
		foreach($node as $nodette)
		{
			if ($nodette->tag == 'LINKS')
			{
				foreach($nodette->children as $nizod)
				{
					if ($this->map_link[$nizod->value] == '')
						continue;
						
					$sql = '
					REPLACE INTO class_lesson_links
					SET';
			
					if ($this->mode != 'copy')
					{	
						$sql .= '
						id_class_links='.$nizod->value; 
					} else 
					{
						$sql .= '
						id_class_links='.$this->map_link[$nizod->value];
					}
					$sql .= ', id_class_lessons='.$id_lesson;
					
					$this->obj_db->query($sql);
					$this->__errors[] = __LINE__. ' '. mysql_error();
				}
				
			}
			
			if ($nodette->tag == 'OBJECTIVES')
			{
				// unfortuantely, there is BAD data in the database
				// so i have to put this check in
				foreach($nodette->children as $nizod)
				{
					$objectives_link_can_be_inserted = false;
					$sql = '
					REPLACE INTO class_lesson_objectives
					SET';
			
					if ($this->mode != 'copy')
					{	
						if ((int)$nizode->value > 0)
						{	$objectives_link_can_be_inserted = true;
						}
						$sql .= '
						id_class_objectives='.$nizod->value; 
					} else 
					{
						if ((int)$this->map_objectives[$nizod->value] > 0)
						{	$objectives_link_can_be_inserted = true;
						}
						$sql .= '
						id_class_objectives='.$this->map_objectives[$nizod->value];
					}
					$sql .= ', id_class_lesson='.$id_lesson;
		
					if ($objectives_link_can_be_inserted)
					{	$this->obj_db->query($sql);
						$this->__errors[] = __LINE__. ' '. mysql_error();
						if (mysql_errno() > 0)
						{	
							$this->__errors[] = $sql;
						
						}
					}
				}
			}

			// need to impliment this in the dataexchange
			if ($nodette->tag == 'ASSIGNMENTS')
			{
				foreach($nodette->children as $nizod)
				{
					$assignment_link_can_be_inserted = false;
					$sql = '
					REPLACE INTO class_assignments_link
					SET';
			
					if ((int)$this->map_assignments[$nizod->value] > 0)
					{	$assignment_link_can_be_inserted = true;
					}
					$sql .= '
					id_class_assignments='.$this->map_assignments[$nizod->value];
					
					$sql .= ', id_class_lessons='.$id_lesson;
					
					if ($assignment_link_can_be_inserted)
					{	$this->obj_db->query($sql);
						$this->__errors[] = __LINE__. ' '. mysql_error();
					}
				}
				
			}
			
		}
		
	}
	
	
	/**
	 *	@@DONE
	 */
	function xml_CLASSDOCLIB_FOLDERS($node)
	{
		foreach($node as $nodette)
		{
			$a_files = array();
			
			$sql = '
			REPLACE INTO classdoclib_Folders
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				pkey='.$nodette->attrs['PKEY'];
			}
			
			foreach($nodette->children as $field_node)
			{
				if ($field_node->tag == 'CLASSDOCLIB_FILES')
				{	$a_files = $field_node->children;
					//$this->xml_CLASSDOCLIB_FILES($field_node->children);
					continue;
				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', class_id='.$this->using_classes_id;
		
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);	
			$this->__errors[] = __LINE__. ' '. mysql_error();
			/// execute insert
			if ($this->mode == 'copy')
			{	$folder_id = $this->obj_db->getInsertID();
			} else 
			{	$folder_id = $nodette->attrs['PKEY'];
			}
			
			$this->xml_CLASSDOCLIB_FILES($a_files, $folder_id);
			// INSERT ON EVERY ROUND! OR stuff the sql into an array and roll through it at end of function.. or return it
		}
		
	}
	
	/**
	 *	@@DONE
	 */
	function xml_CLASSDOCLIB_FILES($node, $id_folder)
	{
		$base = DOCUMENT_ROOT.'../logicreate/classLibrary/';
		
		foreach($node as $nodette)
		{
			$diskname = '';
			
			$sql = '
			REPLACE INTO classdoclib_Files
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				pkey='.$nodette->attrs['PKEY'];
			}
			
			// hashes stay the same.. 
			foreach($nodette->children as $field_node)
			{	$org = null;
			
				if ($field_node->tag == 'DISKNAME')
				{	
					$orgDiskname = $field_node->value;
					if ($this->mode == 'copy')
					{	
	                	$field_node->value = md5(microtime().'RYANRULES'.uniqid().$field_node->value);
					}
					$diskname = $field_node->value;
					
	                $dir1 = substr($diskname,0,2);
	                $dir2 = substr($diskname,-2,2);

	                @mkdir($base.$dir1, 0777);
	                @mkdir($base.$dir1.'/'.$dir2, 0777);

	                 
	               
				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
			$sql .=', folder='.$id_folder;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	
	/**
	 *	@@NOTE Only for restore, NOT copy
	 */
	function xml_CLASS_GRADEBOOK($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_gradebook
			SET';
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
						
		}
		
	}
	
	/**
	 *	@@NOT
	 */
	function xml_CLASS_GRADEBOOK_CATEGORIES($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_gradebook_categories
			SET';
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
			$this->map_gradebook_category[$nodette->attrs['id_class_gradebook_categories']] = $this->obj_db->getInsertId();

		}
		
	}
	
	/**
	 *	@@NOTE Only for restore, NOT copy
	 *		@@@@@@ WORK WITH ASSIGNMENT_ID.. not ATTACHED YET
	 */
	function xml_CLASS_GRADEBOOK_ENTRIES($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_gradebook_entries
			SET';
			
			foreach($nodette->children as $field_node)
			{
				
				if (strtoupper($field_node->tag) == 'ID_CLASS_GRADEBOOK_CATEGORIES' && $this->mode == 'copy')
				{	$field_node->value = $this->map_gradebook_category[$field_node->value]; // assigning new category id
				}				
				if (strtoupper($field_node->tag) == 'ASSESSMENT_ID' && $field_node->value > 0 && $this->mode == 'copy')
				{	$field_node->value = $this->map_assessments[$field_node->value]; // assigning new assessment id
				}				
				if (strtoupper($field_node->tag) == 'ASSIGNMENT_ID' && $field_node->value > 0 && $this->mode == 'copy')
				{	$field_node->value = $this->map_assignments[$field_node->value]; // assigning new assignment id
					
				}
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}

			$sql .=', id_classes='.$this->using_classes_id;

			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}

			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
			if (mysql_errno() > 0)
			{	$this->__errors[] = $sql;
			}
			
			if ($this->mode == 'copy')
				$this->map_gradebook_entries[$nodette->attrs['ID_CLASS_GRADEBOOK_ENTRIES']] = $this->obj_db->getInsertId();

		}
		
	}
	
	
	
	
	/**
	 *	@@NOTE Only for restore, NOT copy
	 */
	function xml_EXAM_SCHEDULE_CLASSES($node)
	{
		if ($this->mode == 'copy')
		{	return true;
		}
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO exam_schedule_classes
			SET
				id_exam_schedule_classes='.$nodette->attrs['ID_EXAM_SCHEDULE_CLASSES'];
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	/** 
	 *	These can not be used in COPY procedure 
	 *
	 *	@@NOTE Only for restore purposes
	 *
	 *	@@DONE
	 */
	function xml_ORIENTATION_CLASSES($node)
	{
		if ($this->mode == 'copy')
		{	return true;
		}
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO orientation_classes
			SET
				id_orientation_classes='.$nodette->attrs['ID_ORIENTATION_CLASSES'];
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;	
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	
	/**
	 *	@@DONE
	 *
	 *	@@NOTE I'm not sure if this should be included in COPYS
	 */
	function xml_SEMINAR_CLASSES_DATES($node)
	{
		foreach($node as $announcement)
		{
			$sql = '
			REPLACE INTO seminar_classes_dates
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_seminar_classes_dates='.$announcement->attrs['ID_SEMINAR_CLASSES_DATES'];
			}
			
			foreach($announcement->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	
	/**
	 *	@@DONE
	 */
	function xml_TEXTBOOK($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO textbook
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_textbook='.$nodette->attrs['ID_TEXTBOOK'];
			}
			
			foreach($nodette->children as $field_node)
			{
				if ($field_node->tag == 'INQUIRIES')
				{	$this->xml_TEXTBOOK_CLASSES($field_node->children);
					continue;
				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
		}
		
	}
	
	
	/**
	 *	@@DONE	// accetp for status's
	 */
	function xml_TEXTBOOK_CLASSES($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO textbook_classes
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_textbook_classes='.$nodette->attrs['ID_TEXTBOOK_CLASSES'];
			}
			
			foreach($nodette->children as $field_node)
			{	
				if ($field_node->tag == 'STATUS' && $this->mode == 'copy')
				{	$field_node->value = 1; // setting it to pending
				}
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes(str_replace('\\\\', '', $field_node->value))).'\'';
			}

			$sql .=', id_classes='.$this->using_classes_id;

			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	
	/**
	 *	@@DONE
	 */
	function xml_ASSESSMENT($node)
	{
		
		
		foreach($node as $nodette)
		{
			$a_questions = array();
			
			$sql = '
			REPLACE INTO assessment
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				assessment_id='.$nodette->attrs['ASSESSMENT_ID'];
			}
			
			foreach($nodette->children as $field_node)
			{
				if ($field_node->tag == 'QUESTIONS')
				{	//$this->xml_ASSESSMENT_QUESTIONS($field_node->children);
					$a_questions = $field_node->children;
					continue;
				}
				if ($field_node->tag == 'ANSWERS')
				{	continue;
				}
				if ($field_node->tag == 'LOG')
				{	continue;
				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', class_id='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->map_assessments[$nodette->attrs['assessment_id']] = $this->obj_db->getInsertID();
			$this->xml_ASSESSMENT_QUESTIONS($a_questions, $this->map_assessments[$nodette->attrs['assessment_id']]);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
		}
		
	}
	
	
	function xml_ASSESSMENT_QUESTIONS($node, $assessment_id)
	{
		if (is_array($node) && count($node) > 0)
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO assessment_question
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				assessment_question_id='.$nodette->attrs['ASSESSMENT_QUESTION_ID'];
			}
			
			foreach($nodette->children as $field_node)
			{	
				if ($field_node->tag == 'STATUS' && $this->mode == 'copy')
				{	$field_node->value = 1; // setting it to pending
				}
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}

			$sql .=', assessment_id='.$assessment_id;

			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	
	/**
	 *	$this->map_content holds the relationship between the [old]=new
	 *
	 *	@@NOTE Only ran on an IMPORT (duplication) not a restore
	 */
	function rebuildContent()
	{
		$db = DB::getHandle();
		$db_saver = DB::getHandle();
		
		$sql = '
			SELECT id_class_lesson_content, txText
			FROM class_lesson_content
			WHERE id_classes='.$this->using_classes_id.' AND 
			txText LIKE \'%classroom/lessons/event=viewcontent/id=%\'
			';
		
		$db->query($sql);
		
		while ($db->next_record())
		{	
			$i_replaced = false;
			$a_replacable_items = array(); //clobbering array (refreshing)
			
			$a_replacable_items = $this->find_all_items_and_id($db->Record['txText'], array('classroom/lessons/event=viewcontent/'));
			
			if (count($a_replacable_items) > 0)
			{
				foreach($a_replacable_items as $item)
				{
					$db->Record['txText'] = str_replace($item['fullstring'], $item['originalstring'].'id='.$this->map_content[$item['id']], $db->Record['txText']);
					$i_replaced = true;
				}
				
				
					
					//echo 'Replacing text on (Content): '. $db->Record['id_class_lesson_content']. '<br>';
					
					$sql = '
					UPDATE class_lesson_content
					SET txText=\''.str_replace('\'', '\'\'', stripslashes($db->Record['txText'])).'\'
					WHERE id_class_lesson_content='. $db->Record['id_class_lesson_content'];
					
					$db_saver->query($sql);
									
				
			}
			
		}
	}
	
	
	/**
	 */
	function find_all_items_and_id($STRING, $a_item)
    {
        $i=0;
        $a_return_item = array();
        $length = strlen($STRING);

        foreach($a_item as $item)
        { 	
        	$i=0; //reset on each iteration of item (pointer)
        	
        	if (strpos($STRING, $item. 'id=') > 0)
	        {	
	                while ($i< $length)
	                {
	                        $p = strpos($STRING, $item. 'id=', ($i+1));
	
	                        if ($i==$p || $p === false)
	                        {       break;
	                        }
	
	                        if ($p > $i)
	                        {       $x = strpos($STRING, '"', $p+1);
	                        		
	                        		// if the " (quote) is greater than 15 ( i dont want to stray to far.. we will stop
	                        		if (($x-($p+strlen($item. 'id='))) > 15)
	                        		{	$i= ($p+strlen($item. 'id='));
	                        			continue;
	                        		}
	                        	
	                                $a_return_item[] = array('fullstring' => substr($STRING, $p, ($x-$p)), 'originalstring'=>$item, 'id'=> array_pop(explode('=', substr($STRING, $p, ($x-$p)) )) );
                               	//debug($a_return_item);
	                                $i=$p;
	                        }
	                }
	        }
        
        }
        
    return $a_return_item;
    }	
    
    
	/************************************************
	 ************************************************    
	 **	DATA BACKUP
	 **/
	 
	 // xml node makers!
	function get_assessments_nodes()
	{
		$sql = '
		SELECT * 
		FROM assessment
		WHERE class_id='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		$xml_child_node = array();
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('display_name',array('BASE64'=>1), null, $db->Record['display_name']);
			$xml_sub_child[] = new xml_node('date_available',null, null, $db->Record['date_available']);
			$xml_sub_child[] = new xml_node('date_unavailable',null, null, $db->Record['date_unavailable']);
			$xml_sub_child[] = new xml_node('mail_responses', null, null, $db->Record['mail_responses']);
			$xml_sub_child[] = new xml_node('auto_publish', null, null, $db->Record['auto_publish']);
			$xml_sub_child[] = new xml_node('num_retries', null, null, $db->Record['num_retries']);
			$xml_sub_child[] = new xml_node('minute_limit', null, null, $db->Record['minute_limit']);
			$xml_sub_child[] = new xml_node('description', array('BASE64'=>1), null, $db->Record['description']);
			$xml_sub_child[] = new xml_node('instructions', array('BASE64'=>1), null, $db->Record['instructions']);
			$xml_sub_child[] = new xml_node('show_result_type', null, null, $db->Record['show_result_type']);
			$xml_sub_child[] = new xml_node('possible_points', null, null, $db->Record['possible_points']);
			
			$xml_sub_child[] = new xml_node('QUESTIONS', null, $this->get_assessments_questions($db->Record['assessment_id']));	
			//error_log('questions');
		//	$xml_sub_child[] = new xml_node('ANSWERS', null, $this->get_assessments_answers_nodes($db->Record['assessment_id']));
			//error_log('answer');
		//	$xml_sub_child[] = new xml_node('LOG', null, $this->get_assessments_log($db->Record['assessment_id']));
			//error_log('log');
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'assessment_id'=>$db->Record['assessment_id']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('ASSESSMENT', null, $xml_child_node);
	}


	function get_assessments_answers_nodes($assessment_id)
	{
		$sql = '
		SELECT * 
		FROM assessment_answer
		WHERE id_classes='.$this->id_classes.'
		';
		$xml_child_node = array();
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('asessment_id',null, null, $db->Record['assessment_id']);
			$xml_sub_child[] = new xml_node('assessment_question_id',null, null, $db->Record['assessment_question_id']);
			$xml_sub_child[] = new xml_node('student_id', null, null, $db->Record['student_id']);
			$xml_sub_child[] = new xml_node('points_earned', null, null, $db->Record['points_earned']);
			$xml_sub_child[] = new xml_node('points_given', null, null, $db->Record['points_given']);
			$xml_sub_child[] = new xml_node('assessment_question_values', array('BASE64'=>1), null, $db->Record['assessment_question_values']);
			
			#$xml_sub_child[] = new xml_node('INQUIRIES', null, $this->get_textbookinquiries_nodes());
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'assessment_answer_id'=>$db->Record['assessment_answer_id']
									 	 ), $xml_sub_child
									);
		}

		// these are really taxing on the memory so i'm halting the return 
		// of these so they don't bloat the xml
		return null;
		if (count($xml_child_node) == 0)
		{	return null;
		}
	return $xml_child_node;
	}



/*	Do not execute through xml. it's a subexecution through get_asessments_nodes()
 */
	function get_assessments_questions($assessment_id)
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM assessment_question
		WHERE assessment_id='.$assessment_id.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('question_type', null, null, $db->Record['question_type']);
			$xml_sub_child[] = new xml_node('question_sort', null, null, $db->Record['question_sort']);
			$xml_sub_child[] = new xml_node('question_points', null, null, $db->Record['question_points']);
			$xml_sub_child[] = new xml_node('question_display', array('BASE64'=>1), null, $db->Record['question_display']);
			$xml_sub_child[] = new xml_node('question_text', array('BASE64'=>1), null, $db->Record['question_text']);
			$xml_sub_child[] = new xml_node('question_choices', array('BASE64'=>1), null, $db->Record['question_choices']);
			$xml_sub_child[] = new xml_node('question_input', array('BASE64'=>1), null, $db->Record['question_input']);
			$xml_sub_child[] = new xml_node('file_hash', array('BASE64'=>1), null, $db->Record['file_hash']);
								
			$xml_child_node[] =new xml_node('ITEM', 
								array(	'assessment_question_id'=>$db->Record['assessment_question_id']
									 	 ), $xml_sub_child
								);
		}
		
		if (count($xml_child_node) == 0)
		{	return null;
		}
	return $xml_child_node;
	}


/*	Do not execute through xml. it's a subexecution through get_asessments_nodes()
 */
	function get_assessments_log($assessment_id)
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM assessment_log
		WHERE assessment_id='.$assessment_id.'
			AND id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('id_student', null, null, $db->Record['id_student']);
			$xml_sub_child[] = new xml_node('start_date', null, null, $db->Record['start_date']);
			$xml_sub_child[] = new xml_node('end_date', null, null, $db->Record['end_date']);
								
			$xml_child_node[] =new xml_node('ITEM', 
								array(	'id_assignment_log'=>$db->Record['id_assessment_log']
									 	 ), $xml_sub_child
								);
		}

		return null;
		if (count($xml_child_node) == 0)
		{	return null;
		}
	return $xml_child_node;
	}


	function get_textbook_nodes()
	{
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM textbook
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('south_campus',null, null, $db->Record['south_campus']);
			$xml_sub_child[] = new xml_node('southeast_campus',null, null, $db->Record['southeast_campus']);
			$xml_sub_child[] = new xml_node('northeast_campus',null, null, $db->Record['northeast_campus']);
			$xml_sub_child[] = new xml_node('northwest_campus', null, null, $db->Record['northwest_campus']);
			$xml_sub_child[] = new xml_node('noTextbooks', null, null, $db->Record['noTextbooks']);
			$xml_sub_child[] = new xml_node('INQUIRIES', null, $this->get_textbookinquiries_nodes());
			 
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_textbook'=>$db->Record['id_textbook']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('TEXTBOOK', null, $xml_child_node);
	}
	
	
	function get_textbookinquiries_nodes()
	{	$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM textbook_classes
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('author',array('BASE64'=>'1'), null, $db->Record['author']);
			$xml_sub_child[] = new xml_node('title',array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('publisher', array('BASE64'=>'1'), null, $db->Record['publisher']);
			$xml_sub_child[] = new xml_node('edition', null, null, $db->Record['edition']);
			$xml_sub_child[] = new xml_node('copyright', null, null, $db->Record['copyright']);
			$xml_sub_child[] = new xml_node('isbn', null, null, $db->Record['isbn']);
			$xml_sub_child[] = new xml_node('required', null, null, $db->Record['required']);
			$xml_sub_child[] = new xml_node('bundled', null, null, $db->Record['bundled']);
			$xml_sub_child[] = new xml_node('bundled_items', array('BASE64'=>'1'), null, $db->Record['bundled_items']);
			##$xml_sub_child[] = new xml_node('last_item', null, null, $db->Record['last_item']);
			$xml_sub_child[] = new xml_node('type', null, null, $db->Record['type']);
			$xml_sub_child[] = new xml_node('status', null, null, $db->Record['status']);
			$xml_sub_child[] = new xml_node('note', null, null, $db->Record['note']); // is this sensitive information? should i be giving this to a teacher?
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_textbook_classes'=>$db->Record['id_textbook_classes']
									 	 ), $xml_sub_child
									);
		}
		
	return  $xml_child_node;
	}
	
	
	
	function get_documentlibrary_nodes()
	{	$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM classdoclib_Folders
		WHERE class_id='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	
			$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('name',null, null, $db->Record['name']);
			$xml_sub_child[] = new xml_node('parentKey',null, null, $db->Record['parentKey']);
			$xml_sub_child[] = new xml_node('owner', null, null, $db->Record['owner']);
			$xml_sub_child[] = new xml_node('notes', array('BASE64'=>'1'), null, $db->Record['notes']);
			$xml_sub_child[] = new xml_node('trashed', null, null, $db->Record['trashed']);
			$xml_sub_child[] = new xml_node('origparent', null, null, $db->Record['origparent']);
			$xml_sub_child[] = new xml_node('folderType', null, null, $db->Record['folderType']);
			
			$xml_sub_child[] = new xml_node('CLASSDOCLIB_FILES', null, $this->get_document_files($db->Record['pkey']));
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'pkey'=>$db->Record['pkey']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASSDOCLIB_FOLDERS', null, $xml_child_node);
	}
	
	
	function get_document_files($folderKey)
	{
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM classdoclib_Files
		WHERE folder='.$folderKey.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			
			if (trim($db->Record['diskName']) == '')
				continue;
				
			$xml_sub_child[] = new xml_node('daHasha',null, null, $db->Record['daHasha']);
			$xml_sub_child[] = new xml_node('file', array('BASE64'=>'1'), null, $db->Record['file']);
			$xml_sub_child[] = new xml_node('displayname', array('BASE64'=>'1'), null, $db->Record['displayname']);
			$xml_sub_child[] = new xml_node('description', array('BASE64'=>'1'), null, $db->Record['description']);
			$xml_sub_child[] = new xml_node('mime', null, null, $db->Record['mime']);
			//$xml_sub_child[] = new xml_node('folder', null, null, $db->Record['folder']); // not needed at all! but for good measure we'll keep it
			$xml_sub_child[] = new xml_node('owner', null, null, $db->Record['owner']);
			$xml_sub_child[] = new xml_node('filedate', null, null, $db->Record['filedate']);
			$xml_sub_child[] = new xml_node('size', null, null, $db->Record['size']);
			$xml_sub_child[] = new xml_node('diskName', null, null, $db->Record['diskName']);
			$xml_sub_child[] = new xml_node('trashed', null, null, $db->Record['trashed']);
			$xml_sub_child[] = new xml_node('origfolder', null, null, $db->Record['origfolder']); // how to handle in copy!
			
			// instead of encoding the contents of a file into xml
			// add in an identifier and copy the original file into
			// the temp directory
			
			$this->obj_zip->add_file(
						file_get_contents(DOCUMENT_ROOT.'../logicreate/classLibrary/'. substr($db->Record['diskName'], 0, 2). '/'.substr($db->Record['diskName'],(strlen($db->Record['diskName'])-2)).'/'.$db->Record['diskName']),
						'library/'.str_replace('/', ' ', strip_tags($db->Record['diskName'])));
		/**
			$xml_sub_child[] = new xml_node('data', null, null, 
											base64_encode(
												file_get_contents(DOCUMENT_ROOT.'../logicreate/classLibrary/'. substr($db->Record['diskName'], 0, 2). '/'.substr($db->Record['diskName'],(strlen($db->Record['diskName'])-2)).'/'.$db->Record['diskName'])
												)
											);
		**/								
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'pkey'=>$db->Record['pkey']
									 	 ), $xml_sub_child
									);
			
		}
		
	return  $xml_child_node; 
	}
	
	
	function get_content_nodes()
	{
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM class_lesson_content
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('id_class_lessons',null, null, $db->Record['id_class_lessons']);
			$xml_sub_child[] = new xml_node('txTitle', array('BASE64'=>'1'), null, $db->Record['txTitle']);
			//$xml_sub_child[] = new xml_node('txText',  null, null, null);
			$xml_sub_child[] = new xml_node('dateCreated', null, null, $db->Record['dateCreated']);
			
			$this->obj_zip->add_file(
						$db->Record['txText'],
						'content/'.str_replace('/', ' ', strip_tags($db->Record['txTitle'].'.html')));
						
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_lesson_content'=>$db->Record['id_class_lesson_content']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_LESSON_CONTENT', null, $xml_child_node);
	}
	
	
	// look at the objectives link, it uses id_class_lesson .. <-- NO S lessons
	function get_lessons_nodes()
	{
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM class_lessons
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		$db2 = DB::getHandle();
		$db2->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_links = null;
			$xml_objectives = null;
			$xml_assignments = null;
			$xml_sub_sub_child = null;
			
			// find all links to lessons
			$sql2 = '
			SELECT * FROM 
			class_lesson_links
			WHERE id_class_lessons='. $db->Record['id_class_lessons'];
			
			$db2->query($sql2);
			while ($db2->next_record())
			{	$xml_links[] = new xml_node('id_class_links',null, null, $db2->Record['id_class_links']);
			}
			$xml_sub_sub_child[] = new xml_node('LINKS',null, $xml_links);
			
			$sql2 = '
			SELECT * FROM 
			class_lesson_objectives
			WHERE id_class_lesson='. $db->Record['id_class_lessons'];
			
			$db2->query($sql2);
			while ($db2->next_record())
			{	$xml_objectives[] = new xml_node('id_class_objectives',null, null, $db2->Record['id_class_objectives']);
			}
			$xml_sub_sub_child[] = new xml_node('OBJECTIVES',null,$xml_objectives);

			
			$sql2 = '
			SELECT * FROM 
			class_assignments_link
			WHERE id_class_lessons='. $db->Record['id_class_lessons'];
			
			$db2->query($sql2);
			while ($db2->next_record())
			{	$xml_assignments[] = new xml_node('id_class_assignments',null, null, $db2->Record['id_class_assignments']);
			}
			$xml_sub_sub_child[] = new xml_node('ASSIGNMENTS',null,$xml_assignments);
			
			
			
			// refer to the CONTENT node in APPS for mappings
//			$xml_sub_sub_child[] = new xml_node('CONTENT',null);
			
			$xml_sub_child[] = new xml_node('MAPPINGS',null, $xml_sub_sub_child);
			
			$xml_sub_child[] = new xml_node('createdOn',null, null, $db->Record['createdOn']);
			$xml_sub_child[] = new xml_node('title', array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('description', array('BASE64'=>'1'), null, $db->Record['description']);
			$xml_sub_child[] = new xml_node('activeOn', null, null, $db->Record['activeOn']);
			$xml_sub_child[] = new xml_node('inactiveOn', null, null, $db->Record['inactiveOn']);
			$xml_sub_child[] = new xml_node('checkList', array('BASE64'=>'1'), null, $db->Record['checkList']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_lessons'=>$db->Record['id_class_lessons']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_LESSONS', null, $xml_child_node);
	}
	
	
	/**
	 *	I think there is supposed to be a forum system put inplace to discuss this presentation
	 *	I will have to export that when it's created
	 */
	function get_presentations_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_presentations
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('title',null, null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('lesson',null, null, $db->Record['lesson']);
			$xml_sub_child[] = new xml_node('status', null, null, $db->Record['status']);
			$xml_sub_child[] = new xml_node('author', null, null, $db->Record['author']);
			$xml_sub_child[] = new xml_node('createdOn', null, null, $db->Record['createdOn']);
			$xml_sub_child[] = new xml_node('content', array('BASE64'=>'1'), null, $db->Record['content']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_presentations'=>$db->Record['id_presentations']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_PRESENTATIONS', null, $xml_child_node);
	}
	
	
	function get_objectives_nodes()
	{
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM class_objectives
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('objective', array('BASE64'=>'1'), null, $db->Record['objective']);
			$xml_sub_child[] = new xml_node('f_hide',null, null, $db->Record['f_hide']);
			$xml_sub_child[] = new xml_node('i_sort', null, null, $db->Record['i_sort']);
									
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_objectives'=>$db->Record['id_class_objectives']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_OBJECTIVES', null, $xml_child_node);
	}
	
	
	function get_links_categories_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_links_categories
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('id_class_links_categories_parent',null, null, $db->Record['id_class_links_categories_parent']);
			$xml_sub_child[] = new xml_node('txTitle', array('BASE64'=>'1'), null, $db->Record['txTitle']);
			$xml_sub_child[] = new xml_node('sortOrder', null, null, $db->Record['sortOrder']);
									
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_links_categories'=>$db->Record['id_class_links_categories']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_LINKS_CATEGORIES', null, $xml_child_node);
	}
	
	
	function get_links_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_links
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('id_class_links_categories',null, null, $db->Record['id_class_links_categories']);
			$xml_sub_child[] = new xml_node('title', array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('url', array('BASE64'=>'1'), null, $db->Record['url']);
			$xml_sub_child[] = new xml_node('description', array('BASE64'=>'1'), null, $db->Record['description']);
			$xml_sub_child[] = new xml_node('dateCreated', null, null, $db->Record['dateCreated']);
			$xml_sub_child[] = new xml_node('createdby', null, null, $db->Record['createdby']);
			$xml_sub_child[] = new xml_node('hits', null, null, $db->Record['hits']);
						
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_links'=>$db->Record['id_class_links']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_LINKS', null, $xml_child_node);
	}
	
		
	function get_assignments_nodes()
	{
		
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_assignments
		WHERE id_classes='.$this->id_classes.'
		';

		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		$db2 = DB::getHandle();
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_grades_node = null;
			$xml_turnedin_node = null;
			
			$xml_sub_child[] = new xml_node('title', array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('instructions', array('BASE64'=>'1'), null, $db->Record['instructions']);
			$xml_sub_child[] = new xml_node('dueDate', null, null, $db->Record['dueDate']);
			$xml_sub_child[] = new xml_node('noDueDate', null, null, $db->Record['noDueDate']);
			$xml_sub_child[] = new xml_node('activeDate', null, null, $db->Record['activeDate']);
			$xml_sub_child[] = new xml_node('responseType', null, null, $db->Record['responseType']);
			$xml_sub_child[] = new xml_node('dateNoAccept', null, null, $db->Record['dateNoAccept']);
							
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_assignments'=>$db->Record['id_class_assignments']
									 	 ), $xml_sub_child
									);
		}
	
	return  new xml_node('CLASS_ASSIGNMENTS', null, $xml_child_node);
	}
	

	// @@@@ not done, i need to grab scheduled dates as well
	function get_exam_schedule_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM exam_schedule_classes
		WHERE id_classes='.$this->id_classes.'
		';

		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('status',null, null, $db->Record['status']);
			$xml_sub_child[] = new xml_node('received_date',null, null, $db->Record['received_date']);
			$xml_sub_child[] = new xml_node('oncampus_exam', null, null, $db->Record['oncampus_exam']);
			$xml_sub_child[] = new xml_node('south_campus', null, null, $db->Record['south_campus']);
			$xml_sub_child[] = new xml_node('southeast_campus', null, null, $db->Record['southeast_campus']);
			$xml_sub_child[] = new xml_node('northeast_campus', null, null, $db->Record['northeast_campus']);
			$xml_sub_child[] = new xml_node('northwest_campus', null, null, $db->Record['northwest_campus']);
			$xml_sub_child[] = new xml_node('note', array('BASE64'=>'1'), null, $db->Record['note']);
						
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_exam_schedule_classes'=>$db->Record['id_exam_schedule_classes']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('EXAM_SCHEDULE_CLASSES', null, $xml_child_node);
	}
	
	
	
	function get_seminars_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM seminar_classes_dates
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('num_seminar',null, null, $db->Record['num_seminar']);
			$xml_sub_child[] = new xml_node('south_date',null, null, $db->Record['south_date']);
			$xml_sub_child[] = new xml_node('south_time_start',null, null, $db->Record['south_time_start']);
			$xml_sub_child[] = new xml_node('south_time_end', null, null, $db->Record['south_time_end']);
			$xml_sub_child[] = new xml_node('northeast_date', null, null, $db->Record['northeast_date']);
			$xml_sub_child[] = new xml_node('northeast_time_start', null, null, $db->Record['northeast_time_start']);
			$xml_sub_child[] = new xml_node('northeast_time_end', null, null, $db->Record['northeast_time_end']);
			$xml_sub_child[] = new xml_node('northwest_date', null, null, $db->Record['northwest_date']);
			$xml_sub_child[] = new xml_node('northwest_time_start', null, null, $db->Record['northwest_time_start']);
			$xml_sub_child[] = new xml_node('northwest_time_end', null, null, $db->Record['northwest_time_end']);
			$xml_sub_child[] = new xml_node('southeast_date', null, null, $db->Record['southeast_date']);
			$xml_sub_child[] = new xml_node('southeast_time_start', null, null, $db->Record['southeast_time_start']);
			$xml_sub_child[] = new xml_node('southeast_time_end', null, null, $db->Record['southeast_time_end']);
			$xml_sub_child[] = new xml_node('entry_status', null, null, $db->Record['entry_status']);
			$xml_sub_child[] = new xml_node('note', array('BASE64'=>'1'), null, $db->Record['note']);
						
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_seminar_classes_dates'=>$db->Record['id_seminar_classes_dates']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('SEMINAR_CLASSES_DATES', null, $xml_child_node);
	}
	
	
	function get_orientations_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM orientation_classes
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('status',null, null, $db->Record['status']);
			$xml_sub_child[] = new xml_node('first_date_id',null, null, $db->Record['first_date_id']);
			$xml_sub_child[] = new xml_node('first_campus_location',null, null, $db->Record['first_campus_location']);
			$xml_sub_child[] = new xml_node('first_allotted_minutes', null, null, $db->Record['first_allotted_minutes']);
			$xml_sub_child[] = new xml_node('first_preferred_time', null, null, $db->Record['first_preferred_time']);
			$xml_sub_child[] = new xml_node('first_time_range_start', null, null, $db->Record['first_time_range_start']);
			$xml_sub_child[] = new xml_node('first_time_range_end', null, null, $db->Record['first_time_range_end']);
			$xml_sub_child[] = new xml_node('second_date_id', null, null, $db->Record['second_date_id']);
			$xml_sub_child[] = new xml_node('second_campus_location', null, null, $db->Record['second_campus_location']);
			$xml_sub_child[] = new xml_node('second_allotted_minutes', null, null, $db->Record['second_allotted_minutes']);
			$xml_sub_child[] = new xml_node('second_preferred_time', null, null, $db->Record['second_preferred_time']);
			$xml_sub_child[] = new xml_node('second_time_range_start', null, null, $db->Record['second_time_range_start']);
			$xml_sub_child[] = new xml_node('second_time_range_end', null, null, $db->Record['second_time_range_end']);
			$xml_sub_child[] = new xml_node('instructions', array('BASE64'=>'1'), null, $db->Record['instructions']);
			$xml_sub_child[] = new xml_node('notes', array('BASE64'=>'1'), null, $db->Record['notes']);
			$xml_sub_child[] = new xml_node('finalDateTime', null, null, $db->Record['finalDateTime']);
			$xml_sub_child[] = new xml_node('finalSessionLength', null, null, $db->Record['finalSessionLength']);
			$xml_sub_child[] = new xml_node('finalCampus', null, null, $db->Record['finalCampus']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_orientation_classes'=>$db->Record['id_orientation_classes']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('ORIENTATION_CLASSES', null, $xml_child_node);
	}
	
	
	function get_calendar_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM lcEvents
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('calendarID',null, null, $db->Record['calendarID']);
			$xml_sub_child[] = new xml_node('calendarType',null, null, $db->Record['calendarType']);
			$xml_sub_child[] = new xml_node('username',null, null, $db->Record['username']);
			$xml_sub_child[] = new xml_node('title', array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('description', array('BASE64'=>'1'), null, $db->Record['description']);
			$xml_sub_child[] = new xml_node('location', array('BASE64'=>'1'), null, $db->Record['location']);
			$xml_sub_child[] = new xml_node('startdate', null, null, $db->Record['startdate']);
			$xml_sub_child[] = new xml_node('enddate', null, null, $db->Record['enddate']);
			$xml_sub_child[] = new xml_node('lastmodified', null, null, $db->Record['lastmodified']);
			$xml_sub_child[] = new xml_node('repeatType', null, null, $db->Record['repeatType']);
			$xml_sub_child[] = new xml_node('repeatCount', null, null, $db->Record['repeatCount']);
			$xml_sub_child[] = new xml_node('repeatData', null, null, $db->Record['repeatData']);
			$xml_sub_child[] = new xml_node('repeatExclude', null, null, $db->Record['repeatExclude']);
			$xml_sub_child[] = new xml_node('repeatUntil', null, null, $db->Record['repeatUntil']);
			$xml_sub_child[] = new xml_node('id_item', null, null, $db->Record['id_item']);
			$xml_sub_child[] = new xml_node('id_item_sub', null, null, $db->Record['id_item_sub']);
			$xml_sub_child[] = new xml_node('f_allday', null, null, $db->Record['f_allday']);
			$xml_sub_child[] = new xml_node('f_showwhenactive', null, null, $db->Record['f_showwhenactive']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'pkey'=>$db->Record['pkey']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_CALENDAR', null, $xml_child_node);
	}
	
	
	function get_syllabus_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_syllabuses
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('instructionMethods', array('BASE64'=>'1'), null, $db->Record['instructionMethods']);
			$xml_sub_child[] = new xml_node('gradingScale', array('BASE64'=>'1'), null, $db->Record['gradingScale']);
			$xml_sub_child[] = new xml_node('courseReqs', array('BASE64'=>'1'), null, $db->Record['courseReqs']);
			$xml_sub_child[] = new xml_node('courseObjectives',  array('BASE64'=>'1'), null, $db->Record['courseObjectives']);
			$xml_sub_child[] = new xml_node('emailPolicy', array('BASE64'=>'1'), null, $db->Record['emailPolicy']);
			$xml_sub_child[] = new xml_node('other', array('BASE64'=>'1'), null, $db->Record['other']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_syllabuses'=>$db->Record['id_class_syllabuses']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_SYLLABUSES', null, $xml_child_node);
	}
	
	
	function get_announcement_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_announcements
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('dt_created',null, null, $db->Record['dt_created']);
			$xml_sub_child[] = new xml_node('dt_display',null, null, $db->Record['dt_display']);
			$xml_sub_child[] = new xml_node('tx_title', array('BASE64'=>'1'), null, $db->Record['tx_title']);
			$xml_sub_child[] = new xml_node('tx_description', array('BASE64'=>'1'), null, $db->Record['tx_description']);
			$xml_sub_child[] = new xml_node('id_faculty_createdby', null, null, $db->Record['id_faculty_createdby']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_announcements'=>$db->Record['id_class_announcements'],
									
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_ANNOUNCEMENTS', null, $xml_child_node);
	}
	
	
	function get_faq_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_faqs
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('category', array('BASE64'=>'1'), null, $db->Record['category']);
			$xml_sub_child[] = new xml_node('answer', array('BASE64'=>'1'), null, $db->Record['answer']);
			$xml_sub_child[] = new xml_node('question', array('BASE64'=>'1'), null, $db->Record['question']);
			$xml_sub_child[] = new xml_node('clicks', null, null, $db->Record['clicks']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_faqs'=>$db->Record['id_class_faqs']											
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_FAQS', null, $xml_child_node);
	}
   
   
		
	function get_gradebook_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_gradebook
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{
			$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('a_upper', null, null, $db->Record['a_upper']);
			$xml_sub_child[] = new xml_node('a_lower', null, null, $db->Record['a_lower']);
			$xml_sub_child[] = new xml_node('b_lower', null, null, $db->Record['b_lower']);
			$xml_sub_child[] = new xml_node('c_lower', null, null, $db->Record['c_lower']);
			$xml_sub_child[] = new xml_node('d_lower', null, null, $db->Record['d_lower']);
			$xml_sub_child[] = new xml_node('calculation_type', null, null, $db->Record['calculation_type']);
			$xml_sub_child[] = new xml_node('color_missing_grade', array('BASE64'=>'1'), null, $db->Record['color_missing_grade']);
			$xml_sub_child[] = new xml_node('roundScoresUp', null, null, $db->Record['roundScoresUp']);
			$xml_sub_child[] = new xml_node('total_points', null, null, $db->Record['total_points']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_gradebook'=>$db->Record['id_class_gradebook']											
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_GRADEBOOK', null, $xml_child_node);
	}
	
	
	function get_gradebook_categories_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_gradebook_categories
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{
			$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('weight', null, null, $db->Record['weight']);
			$xml_sub_child[] = new xml_node('label', array('BASE64'=>'1'), null, $db->Record['label']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_gradebook_categories'=>$db->Record['id_class_gradebook_categories']											
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_GRADEBOOK_CATEGORIES', null, $xml_child_node);
	}
	
	
	function get_gradebook_entries_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_gradebook_entries
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{
			$xml_sub_child = null;

			$xml_sub_child[] = new xml_node('id_class_gradebook_categories', null, null, $db->Record['id_class_gradebook_categories']);
			$xml_sub_child[] = new xml_node('title', array('BASE64'=>'1'), null, $db->Record['title']);
			$xml_sub_child[] = new xml_node('gradebook_code', array('BASE64'=>'1'), null, $db->Record['gradebook_code']);
			
			$xml_sub_child[] = new xml_node('total_points', null, null, $db->Record['total_points']);
			$xml_sub_child[] = new xml_node('publish_flag', null, null, $db->Record['publish_flag']);
			$xml_sub_child[] = new xml_node('date_due', null, null, $db->Record['date_due']);
			
			$xml_sub_child[] = new xml_node('notes', array('BASE64'=>'1'), null, $db->Record['notes']);
			
			// PAY ATTENTION TO THIS
			$xml_sub_child[] = new xml_node('assessment_id', null, null, $db->Record['assessment_id']);
			$xml_sub_child[] = new xml_node('assignment_id', null, null, $db->Record['assignment_id']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_gradebook_entries'=>$db->Record['id_class_gradebook_entries']											
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_GRADEBOOK_ENTRIES', null, $xml_child_node);
	}
	
	
	// restore only (NO COPY OPTION) maybe not allow this
	function get_gradebook_val_nodes()
	{
		$xml_child_node = array();
		
		$sql = '
		SELECT * 
		FROM class_gradebook_val
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{
			$xml_sub_child = null;
			$xml_sub_child[] = new xml_node('id_class_gradebook_entries', null, null, $db->Record['id_class_gradebook_entries']);
			$xml_sub_child[] = new xml_node('username', array('BASE64'=>'1'), null, $db->Record['username']);
			$xml_sub_child[] = new xml_node('score', null, null, (($db->Record['score'] == null) ? 'NULL' : $db->Record['score']));
			
			$xml_sub_child[] = new xml_node('comments', array('BASE64'=>'1'), null, $db->Record['comments']);
			
			$xml_sub_child[] = new xml_node('date_created', null, null, $db->Record['date_created']);
			$xml_sub_child[] = new xml_node('date_modified', null, null, $db->Record['date_modified']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_gradebook_val'=>$db->Record['id_class_gradebook_val']											
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_GRADEBOOK_VAL', null, $xml_child_node);
	}
}


class LcZipFile {

	var $datasec = array();
	var $ctrl_dir = array();
	var $eof_ctrl_dir = "\x50\x4b\x05\x06\x00\x00\x00\x00";
	var $old_offset = 0;

	var $location_root = '/tmp/semester_backup';
	/**
	 *	Constructor:: Starts the process by exec'ing out and
	 *	creating the initial directory, but first cleaning up
	 *	a previously left directory as well.
	 *
	 *	@note	I can not do proper error checking with an 
	 *			exec command, I could be potentially
	 *			screwing up alot of things, or at least
	 *			dirtying up directories with junk files.
	 *			lets pray linux perms will stop us from 
	 *			making things go astray
	 */
	function LcZipFile($location_root = '')
	{
		if ($location_root != '')
			$this->location_root = $location_root;
			
		// cleaning up 
		exec('cd /tmp');
		
		// creating directory and moving into it (our base directory, where all of our work will be done from)
		exec('mkdir -p '.$this->location_root.';cd '.$this->location_root.';');
		
	}
	
	
	/**
	 *	Add a directory but without moving outside the 
	 *	root directory (or: self::$location_root)
	 */
	function add_dir($name) 
	{	
		exec('mkdir -p '.$this->location_root.'/'.$name.';');
	}


	function add_file($data, $filename) 
	{	
		if (!$handle = fopen($this->location_root.'/'.$filename, 'w+')) 
		{
			error_log("Cannot open file (".$this->location_root."/$filename)", 0);
        	return;
    	}

		fwrite($handle, $data);
        		fclose($handle);
    	
	} 
 

	function file() { 
		$data = implode("", $this->datasec); 
		$ctrldir = implode("", $this->ctrl_dir); 

	   return 
		$data. 
		$ctrldir. 
		$this -> eof_ctrl_dir. 
		pack("v", sizeof($this->ctrl_dir)). 
		pack("v", sizeof($this->ctrl_dir)). 
		pack("V", strlen($ctrldir)). 
		pack("V", strlen($data)). 
		"\x00\x00"; 
	} 

}
?>
