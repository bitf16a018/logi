<?php

include_once(LIB_PATH.'SiteForms.php');
include_once(LIB_PATH.'LC_html.php');
include_once(LIB_PATH.'datagrid.php');
include_once(LIB_PATH.'classLessonObj.php');

// PBDO is the new standard, above object is DEPRECATED
include_once(LIB_PATH.'PBDO/ClassLessons.php');
include_once(LIB_PATH.'PBDO/ClassLessonSequence.php');

include(LIB_PATH.'lc_table.php');
include(LIB_PATH.'lc_table_renderer.php');
//include(SERVICE_PATH.'classmgr/lc_table_lesson.php');


class LessonSequence extends FacultyService {

	var $presentor = 'HTMLPresentation';
//	var $authorizer = 'native';

	// links
	var $inactivelinks = array( 'Lessons' );
	var $applinks = array (
		'List Lessons' => 'lessonManager/',
		'Add a Lesson' => 'lessonNew/event=add'
	);
        var $navlinks = array (
                'Classroom Manager' => 'display/',
                'Announcements'=>'announcements/',
                'Assessment Manager' => '%assessments/',
                'Assignments' => 'assignmentManage/',
                'Content' => 'lessonContent/',
                'FAQ' => 'faq/',
                'File Resource Manager' => '%classdoclib/',
                'Gradebook' => '%gradebook/',
                'Lessons' => 'lessonManager/',
                'Objectives' => 'lessonObjectives/',
                'Webliography' => 'lessonWebliography/'
        );




	/**
	 * show all the LOBs for this lesson (Learning OBjects)
	 */
	function run(&$db,&$u,&$lc,&$t) {
		$lc->templateName = 'lessonSequence_main';
		$this->sectionTitle = 'Change Lesson Order';

		$class_id = $u->activeClassTaught->id_classes;
		$lesson_id = (int) $lc->getvars['id'];

		$sequences = ClassLessonSequencePeer::doSelect(' class_id = '.$class_id. ' AND lesson_id = '.$lesson_id);

		if (count ($sequences) < 1) { 
			$sequences = $this->initSequences($class_id, $lesson_id, $db);
			//debug($seqItems);
			//die('no sequences yet');
		}
//		$t['seqItems'] = $sequences;


		$dm = new LC_Table_ObjectModel($sequences);
		$dm->ignoreColumn('_new');
		$dm->ignoreColumn('_modified');
		$dm->ignoreColumn('_version');
		$dm->ignoreColumn('_entityVersion');
		$dm->ignoreColumn('__attributes');
		$dm->ignoreColumn('__nulls');

		$dm->ignoreColumn('classLessonSequenceId');
		$dm->ignoreColumn('lessonId');
		$dm->ignoreColumn('classId');
		$dm->ignoreColumn('lobId');
		$dm->ignoreColumn('lobMime');

		$table = new LC_Table($dm);
		$t['table'] = new LC_TableRenderer($table);


//		debug($sequences);
	}


	function initSequences($class_id,$lesson_id,$db) {
		$sequenceItems = array();
		$initRank = 1;

		//load linked content, assignments, and assessments

		$sql = "SELECT A.id_class_assignments, A.title
			FROM class_assignments AS A
			LEFT JOIN class_assignments_link as B on B.id_class_assignments = A.id_class_assignments
			WHERE A.id_classes = ".$class_id."
			AND  B.id_class_lessons = ".$lesson_id;
		$db->query($sql);
		while ($db->nextRecord()) {
			$lob = new ClassLessonSequence();
			$lob->set('lessonId', $lesson_id);
			$lob->set('classId',  $class_id);
			$lob->set('lobId',    $db->record['id_class_assignments']);
			$lob->set('lobMime',  'X-LMS');
			$lob->set('lobType',  'activity');
			$lob->set('lobTitle', $db->record['title']);
			$lob->set('linkText', $db->record['title']);
			$lob->set('visible',  1);
			$lob->set('rank', $initRank++);
			$lob->save();
			$sequenceItems[] = $lob;
		}


		$sql = "SELECT A.id_class_lesson_content, A.txTitle
			FROM class_lesson_content AS A
			WHERE A.id_classes = ".$class_id."
			AND  A.id_class_lessons = ".$lesson_id;

		$db->query($sql);
		while ($db->nextRecord()) {
			$lob = new ClassLessonSequence();
			$lob->set('lessonId', $lesson_id);
			$lob->set('classId',  $class_id);
			$lob->set('lobId',    $db->record['id_class_lesson_content']);
			$lob->set('lobMime',  'text/html');
			$lob->set('lobType',  'content');
			$lob->set('lobTitle', $db->record['txTitle']);
			$lob->set('linkText', $db->record['txTitle']);
			$lob->set('visible',  1);
			$lob->set('rank', $initRank++);
			$lob->save();
			$sequenceItems[] = $lob;
		}


		return $sequenceItems;
	}


	/**
	 * Do they have authority for this lesson? Yes, return true. No, give them an error
	 * and return false. (The caller need only return.)
	 */
	function checkAuth($lessonid, &$db, &$u, &$t) {
		$db->queryOne("select count(id_class_lessons) as cnt from class_lessons as l
			left join classes as c on l.id_classes=c.id_classes
			where l.id_classes='{$u->activeClassTaught->id_classes}'
			and l.id_class_lessons='{$lessonid}'");
		if (!$db->Record['cnt'] || intval($lessonid) == 0 ) {
			$this->presentor = 'errorMessage';
			$t['message'] = "You don't have permission to modify that lesson.";
			return false;
		} else return true;
	}

}

?>
