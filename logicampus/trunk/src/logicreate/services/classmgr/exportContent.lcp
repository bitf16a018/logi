<?php
/*
 *
 * Service will act as a gateway into the rest of the
 * application.
 *
 
 NOTE::: making an attribute set to  array('BASE64'=>'1') will base64 encode 
 the value and when reading the xml it will auto base64_Decode it.
 NOTE::: I NEED CLASS SECTION NUMBERS
 */
include_once(LIB_PATH.'xmlparser.php');

class ExportContent extends FacultyService {
	var $presentor='emptyPresentation';

	// links
	var $navlinks = array(
		'Classroom Manager' => 'display/',
		'Announcements' => 'announcements/',
	);
	var $applinks = array(
		'Data exchange'=>'dataexchange'
	);
	var $inactivelinks = array( 'Data exchange' );
	
	var $id_classes =0;
	
	var $obj_zip;
	
	
	/**
	 * construct a fancy filename for the users
	 */
	function run(&$db,&$u,&$lc,&$t) {
		$classId = (int)$u->activeClassTaught->id_classes;
		$this->presentor = 'htmlPresentation';
		$lc->templateName='dataexchange_main';

		$t['filename'] = 'classroom.zip';
	}
	
	
	/**
	 * query all the relevant databases to make an XML file
	 * to send to the user
	 *
	 * Change: MAK 8/21/03
	 * Let's try to create a zip file with the XML and externalize all content from
	 * classdoclib
	 */
	 //--------------->
	function downloadRun($db, &$u, &$lc, &$t) {
		$this->obj_zip = new LcZipFile();
//		$this->obj_zip->add_dir('interactions/');
//		$this->obj_zip->add_dir('tests/');
		$this->obj_zip->add_dir('content/');
 
		$lc->templateName='dataexchange_main';

		$classId = $u->activeClassTaught->id_classes;
		$this->classId = $classId;


		// select base information (as much as I can in 1 query)
		$sql = '
		SELECT 
			a.id_classes,		b.id_courses,
			a.classType,		b.courseFamily,
			a.facultyId,		b.courseNumber,
			a.stylesheet,		b.courseName,
			a.id_semesters,		b.courseDescription,
			a.sectionNumbers,	b.preReq1,
						b.preReq2,
						b.preReq3,
						b.preReq4,
						b.coReq1,
						b.coReq2,
						b.coReq3,
						b.coReq4,
			s.semesterId,
			a.noexam
		FROM classes as a
			INNER JOIN courses as b
				ON a.id_courses=b.id_courses
			INNER JOIN semesters as s
				ON a.id_semesters=s.id_semesters
		
		WHERE a.id_classes='.$classId.'
		';
		$db->RESULT_TYPE = MYSQL_ASSOC;
		$db->queryOne($sql);
		
		$filename = 'classroom_'.$db->record['courseFamily']. $db->record['courseNumber'].'_'.$db->record['semesterId'].'.zip';

		$this->courseFamily = $db->record['courseFamily'];

		$xml_raw_save = '';
		
		
		$xmlObj = new xmlparser('<lobcol 
xmlns:logicampus="http://logicampus.sourceforge.net/2006/lob_collection" 
xmlns:lob="http://logicampus.sourceforge.net/2006/learning_object"
xmlns:class="http://logicampus.sourceforge.net/2006/classroom"
xmlns:lesson="http://logicampus.sourceforge.net/2006/lesson"></lobcol>');
		$xmlObj->doctype = '<!DOCTYPE lobcol PUBLIC "-//LOBCOL//DTD LOBCOL//EN" "http://logicampus.sf.net/learning-objects/lobcol-1.0.dtd">';
		$root =& $xmlObj->getRoot();
		


		/*
		$classroom_node[] = new xml_node('CLASSROOM', 
						array(	'ID'=>$db->record['id_classes'], 
								'CLASSTYPE'=>$db->record['classType'],
								'ID_SEMESTERS'=>$db->record['id_semesters'],
								'STYLESHEET'=>$db->record['stylesheet'], 
								'FACULTYID'=>$db->record['facultyId'],
								'SECTIONNUMBERS'=>$db->record['sectionNumbers'],
								'NOEXAM'=>$db->record['noexam']
							 )
						);

		 */
		//get the semester start dates
		$this->semesterId = $db->record['id_semesters'];
		$db->query("SELECT * FROM semesters WHERE id_semesters = ".$this->semesterId);
		$db->nextRecord();
		$db->freeResult();
		$this->semStart =  strtotime($db->record['dateStart']);
		$this->semEnd =  strtotime($db->record['dateEnd']);

		$lobs = $this->get_content_nodes();
		foreach ($lobs as $xmlnode) {
			$root->children[] = $xmlnode;
		}
		unset($lobs);

		$doclobs = $this->get_document_files();
		foreach ($doclobs as $xmlnode) {
			
			$root->children[] = $xmlnode;
		}
		unset($doclobs);
		
		//do homework (interactions)
//		$xmlObj = new xmlparser('<lobcol></lobcol>');
//		$root =& $xmlObj->getRoot();
		$hmwlobs = $this->get_homework_nodes();
		foreach ($hmwlobs as $xmlnode) {
			$root->children[] = $xmlnode;
		}
		unset($hmwlobs);



		$tstlobs = $this->get_test_nodes();
		foreach ($tstlobs as $xmlnode) {
			$root->children[] = $xmlnode;
		}
		unset($tstlobs);

/*
		$lesslobs = $this->get_lesson_nodes();
		foreach ($lesslobs as $xmlnode) {
			$root->children[] = $xmlnode;
		}
		unset($lesslobs);
*/


//		print_r($lobs);exit();

		//$root->children =& $classroom_nodes;
		//$classroom_nodes[0]->children = $classroom_child_node;

		$fh = tmpfile();
		$xmlObj->write_file($fh);
		// I think i'm going to have to rewrite this, becuase i can't pump out more than the php upload limit 15M
		$file_size = ftell($fh);
		rewind($fh);

		/*
		$zipname = tempnam();
		$ziph = fopen( $zipname, 'b');
		 */

		$xmlchars = fread($fh, $file_size);
		fclose($fh);
//		header ('Content-Type: application/xml');
//		echo $xmlchars;exit();
//		echo "<pre>\n".htmlspecialchars($xmlchars, ENT_QUOTES, 'UTF-8')."\n</pre>\n";exit();
       

		$this->obj_zip->add_file($xmlchars,'learningobjects.xml');

		//$this->obj_zip->add_file($xmlchars,'interactions.xml');

		//do tests (assessments)
		//$this->obj_zip->add_file('<?xml version="1.0"? >','assessments.xml');
		$wiky = $this->obj_zip->file();
        
		ob_end_clean();

		if (ini_get('zlib.output_compression'))
			ini_set('zlib.output_compression', 'Off');

		//header("Cache-control: public");
		header('Cache-Control: no-store, no-cache, must-revalidate');
		header('Cache-Control: post-check=0, pre-check=0', false);
		header('Pragma: no-cache');
        		//header("Content-type: text/html");
		header("Content-type: application/zip");
		header("Content-length: ". strlen($wiky));
		header("Content-Disposition: attachment; filename=$filename");
		echo $wiky;
		exit;
	}
	//------------------>
	
	/**
	 * return an array of arrays that represent document lobs
	 */
	function get_document_files() {
		$lob_nodes = array();
		$sql = '
		SELECT A.*,B.*,C.*,D.*
		FROM lob_class_repo as A
		LEFT JOIN lob_repo_entry AS D ON D.lob_repo_entry_id=A.lob_repo_entry_id
		LEFT JOIN lob_class_content AS B ON A.lob_class_repo_id = B.lob_class_repo_id
		LEFT JOIN lob_class_metadata AS C ON C.lob_class_repo_id = A.lob_class_repo_id
		WHERE A.class_id='.$this->classId.'
		AND (A.lob_sub_type = "document" OR A.lob_sub_type = "image") ';

		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		/*$temp_filename=0;
		$temp_binary=0;
		*/
		while ($db->nextRecord()) {
			if (trim($db->record['lob_filename']) == ''){
				
				// __FIXME__ make the filename safe for saving.
				// change quotes?  change dots?  change spaces?
				
								
				//$db->record['lob_filename'] = $db->record['lob_title'];
				//$db->record['lob_binary']=$db->record['lob_text'];
				
			}
		

			// instead of encoding the contents of a file into xml
			// add in an identifier and copy the original file into
			// the temp directory
			
			$this->obj_zip->add_file(
				$db->record['lob_binary']
				,
				'content/'.str_replace('/','_',strip_tags($db->record['lob_filename']))
			);
			
			 

			$type_node = new xml_node('lob:type',null,null,'content');
			//subtype
			list($type,$submime) = explode('/', $db->record['lob_mime']);
			$sub_type_node = new xml_node('lob:subtype',array('mime'=>$db->record['lob_mime']),null);
			$mim_type_node = new xml_node('lob:mime',null,null, $db->record['lob_mime']);
			echo $db->record['lob_mime'];
			
			if ($type == 'image') {
				$sub_type_node->value = 'image';
			} else {
				$sub_type_node->value = 'document';
				
			}
					$lob_caption_node = new xml_node('lob:caption',null,null,$db->record['lob_caption']);
					$lob_caption_node->cdata = true;
			$lob_title_node = new xml_node('lob:title',null,null,$db->record['lob_title']);
			
			$lob_title_node->cdata = true;
			$lob_url = new xml_node('lob:urltitle',null,null,$db->record['lob_urltitle']);
			$lob_url->cdata = true;
			$lob_notes = new xml_node('lob:notes',null,null,$db->record['lob_notes']);
			$lob_url->cdata = true;	
				
			$lob_file_node = new xml_node('lob:filename',null,null,$db->record['lob_filename']);
			$lob_file_node->cdata = true;
			
			$lob_desc_node = new xml_node('lob:description',null,null,$db->record['lob_description']);
			$lob_desc_node->cdata = true;


			$xml_child_nodes = array();
			$xml_child_nodes[] = $type_node;
			$xml_child_nodes[] = $sub_type_node;
			$xml_child_nodes[] = $mim_type_node;
			
			
			
			$xml_child_nodes[] = $lob_title_node;
			$xml_child_nodes[] = $lob_url;
			$xml_child_nodes[] = $lob_file_node;
			$xml_child_nodes[] = $lob_desc_node;
			$xml_child_nodes[]=$lob_caption_node;
			$xml_child_nodes[]=$lob_notes;	
			//lifecycle
			$createdon = $db->record['created_on'];

			$lifecycleArray = array(
				'lob:version'=>$db->record['lob_version'], 
				'lob:createdon'=>$createdon, 'createdon_dateformat'=>'unix'
			);
			

			$xml_child_nodes[] = $this->makeLifecycleNode($lifecycleArray);
			
			
			//metadata
			$metadataArray = array(
				'lob:author'=>$db->record['author'],
				'lob:subject'=>$db->record['subject'],
				'lob:subdisc'=>$db->record['subdisc'],
				'subject_abbr'=>'true',
				'subdisc_abbr'=>'false',
				'lob:source'=>$db->record['source'],
				'lob:copyright'=>$db->record['copyright'],
				'lob:license'=>$db->record['license']
			);
			$xml_child_nodes[] = $this->makeMetadataNode($metadataArray);

//			$meta_node->children[] = $author_node;
//			$xml_child_nodes[] = $meta_node;

			$guid = lcUuid();
			$this->contentGuid[ $db->record['lob_content_id'] ] = $guid;

			$lob_nodes[] = new xml_node('lob:obj', 
				array('guid'=>$guid, 'dbid'=>$db->record['lob_class_repo_id']), 
				$xml_child_nodes
			);
		}
	return  $lob_nodes; 
	}
	
	
	function get_content_nodes() {
		$xml_child_nodes = array();
		$sql = '
		SELECT A.*, B.*, C.*,D.*
		FROM lob_class_repo A
		LEFT JOIN lob_class_content AS B 
			ON A.lob_class_repo_id = B.lob_class_repo_id
		LEFT JOIN lob_class_metadata AS C 
			ON B.lob_class_repo_id = C.lob_class_repo_id
		INNER JOIN lob_repo_entry AS D ON D.lob_repo_entry_id=A.lob_repo_entry_id
		WHERE A.class_id='.$this->classId.'
		AND A.lob_type = "content"
		AND A.lob_sub_type != "document"
		AND A.lob_sub_type != "image"
		'; 

		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;

		$lob_nodes = array();
		while ($db->nextRecord()) {
			$type_node = new xml_node('lob:type',null,null,'content');
			$sub_type_node = new xml_node('lob:subtype',null,null,$db->record['lob_sub_type']);
			
			$mim_type_node = new xml_node('lob:mime',null,null, $db->record['lob_mime']);
			$lob_title_node = new xml_node('lob:title',null,null,$db->record['lob_title']);
			$lob_title_node->cdata = true;
			//done
			
			$lob_notes = new xml_node('lob:notes',null,null,$db->record['lob_notes']);
			$lob_notes->cdata = true;
			$lob_url = new xml_node('lob:urltitle',null,null,$db->record['lob_urltitle']);
			$lob_url->cdata = true;
			//done
			$lob_content_node = new xml_node('lob:content',null,null,$db->record['lob_text']);
			$lob_content_node->cdata = true;

			$xml_child_nodes = array();
			$xml_child_nodes[] = $type_node;
			$xml_child_nodes[] = $sub_type_node;
			$xml_child_nodes[] = $mim_type_node;
			
			$xml_child_nodes[] = $lob_title_node;
			$xml_child_nodes[]=$lob_url;
			$xml_child_nodes[] = $lob_content_node;
			$xml_child_nodes[]=$lob_notes;
			//lifecycle
			$lifecycleArray = array(
				'lob:version'=>'1.0', 
				'lob:createdon'=>time(), 'createdon_dateformat'=>'unix'
			);

			$xml_child_nodes[] = $this->makeLifecycleNode($lifecycleArray);

			//metadata
			$metadataArray = array(
				'lob:author'=>$db->record['author'],
				'lob:subject'=>$db->record['subject'],
				'lob:subdisc'=>$db->record['subdisc'],
				'subject_abbr'=>'true',
				'subdisc_abbr'=>'false',
				'lob:source'=>$db->record['source'],
				'lob:copyright'=>$db->record['copyright'],
				'lob:license'=>$db->record['license']
			);
			$xml_child_nodes[] = $this->makeMetadataNode($metadataArray);


//			$meta_node = new xml_node('metadata',null,null);
//			$author_node = new xml_node('author',null,null,'Mark Kimsal');
//			$meta_node->children[] = $author_node;
//			$xml_child_nodes[] = $meta_node;

			$guid = $db->record['lob_guid'];
			$this->contentGuid[$db->record['lob_content_id']] = $guid;
			$lob_nodes[] = new xml_node('lob:obj', 
				array('guid'=>$guid, 'dbid'=>$db->record['lob_class_repo_id']), 
				$xml_child_nodes
			);
		}
		return $lob_nodes;
	}
	

	/**
	 * return an array of arrays that represent document lobs
	 */
	function get_homework_nodes() {
		$lob_nodes = array();
		//if you select C.* and there's no record for the metadata
		// the lob_repo_id will be overwritten with a blank,
		// Same thing can happen for table B.
		
		$sql = '
		SELECT A.*, B.*, C.subject, C.subdisc, C.author, C.copyright, C.license, C.user_version
		,C.status, C.updated_on, C.created_on,D.*
		FROM lob_class_repo as A
		LEFT JOIN lob_class_activity AS B 
			ON A.lob_class_repo_id = B.lob_class_repo_id
		LEFT JOIN lob_class_metadata AS C 
			ON A.lob_class_repo_id = C.lob_class_repo_id
	INNER JOIN lob_repo_entry AS D ON D.lob_repo_entry_id=A.lob_repo_entry_id
		WHERE A.class_id='.$this->classId.'
		AND A.lob_type ="activity"';

		$db = DB::getHandle();
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;

		/*
		while ($db->nextRecord()) {
		//	echo "debug offset = ". (( $db->record['dueDate'] - $this->semStart ) / 60 / 60/ 24);
			debug($db->record);
		}
		exit();
		// */
		while ($db->nextRecord()) {
			$type_node = new xml_node('lob:type',null,null,$db->record['lob_type']);
			//subtype
			//list($type,$submime) = explode('/', $db->record['lob_mime']);
			$sub_type_node = new xml_node('lob:subtype',null,null,$db->record['lob_sub_type']);
			$actual_sub_type_node = new xml_node('lob:actualsubtype',null,null,$db->record['lob_sub_type']);
			$mim_type_node = new xml_node('lob:mime',null,null, $db->record['lob_mime']);
			$resp_node = new xml_node('logicampus:response',null,null,$db->record['lob_notes']);
			$notes_node = new xml_node('lob:notes',null,null,$db->record['lob_notes']);
			/*
			1=>"Upload a file",
			2=>"Text response",
			3=>"Upload and text",
			4=>"Forum post",
			6=>"Audio Response",
			5=>"None",
			 */

			switch ($db->record['response_type_id']) {
				case 1:
				case 2:
				case 3:
				case 6:
				$sub_type_node->value = 'assignment';
				break;

				case 5:
				$sub_type_node->value = 'activity';
				break;

				case 4:
				$sub_type_node->value = 'forum';
				break;
			}

			switch ($db->record['response_type_id']) {
				case 1:
					$resp_node->value = 'upload';
					break;
				case 2:
					$resp_node->value = 'text';
					break;
				case 3:
					$resp_node->value = 'textandupload';
					break;
				case 4:
					$resp_node->value = 'forum';
					break;
				case 5:
					$resp_node->value = 'none';
					break;
				case 6:
					$resp_node->value = 'audio';
					break;
			}

			$lob_title_node = new xml_node('lob:title',null,null,$db->record['lob_title']);
			$lob_title_node->cdata = true;
			
			$lob_urltitle_node = new xml_node('lob:urltitle',null,null,$db->record['lob_urltitle']);
			$lob_urltitle_node->cdata = true;
			
			$lob_copystyle_node = new xml_node('lob:copystyle',null,null,$db->record['lob_copy_style']);
			$lob_copystyle_node->cdata = true;
			
			$lob_desc_node = new xml_node('lob:description',null,null,$db->record['lob_description']);
			$lob_desc_node->cdata = true;

			$xml_child_nodes = array();
			$xml_child_nodes[] = $type_node;
			$xml_child_nodes[] = $sub_type_node;
			$xml_child_nodes[] = $actual_sub_type_node;
			$xml_child_nodes[] = $mim_type_node;
			
			$xml_child_nodes[] = $lob_title_node;
			$xml_child_nodes[] = $lob_desc_node;
			$xml_child_nodes[] =$lob_urltitle_node;
			$xml_child_nodes[] =$lob_copystyle_node;
			$xml_child_nodes[] = $notes_node;
			//lifecycle
			$createdon = $db->record['created_on'];

			$lifecycleArray = array(
				'lob:version'=>$db->record['lob_version'], 
				'lob:createdon'=>time(), 'createdon_dateformat'=>'unix'
			);

			$xml_child_nodes[] = $this->makeLifecycleNode($lifecycleArray);

			/*
			//metadata
			$metadataArray = array(
				'lob:author'=>$db->record['author'],
				'lob:subject'=>$db->record['subject'],
				'lob:subdisc'=>$db->record['subdisc'],
				'subject_abbr'=>'true',
				'subdisc_abbr'=>'false',
				'lob:copyright'=>$db->record['copyright'],
				'lob:license'=>$db->record['license']
			);
			$xml_child_nodes[] = $this->makeMetadataNode($metadataArray);
			 */

//			$meta_node->children[] = $author_node;
//			$xml_child_nodes[] = $meta_node;

			$guid = $db->record['lob_guid'];
			$this->activityGuid[ $db->record['lob_class_repo_id'] ] = $guid;

			$lob_nodes[] = new xml_node('lob:obj', 
				array('guid'=>$guid, 'dbid'=>$db->record['lob_class_repo_id']), 
				$xml_child_nodes
			);
		}
	return  $lob_nodes; 
	}


	/**
	 * return an array of arrays that represent the classroom
	 * as a learning object sequence, or trail.
	 */
	function get_lesson_nodes() {
		$db = DB::getHandle();
		$db->RESULT_TYPE = MYSQL_ASSOC;
		$lob_nodes         = array();

		$sql = '
			SELECT A.*
			FROM class_lessons AS A
			WHERE id_classes = '.$this->classId;

		$db->query($sql);
		$lessons = array();
		while($db->nextRecord()) {
			$lessons[] = $db->record;
		}

		foreach ($lessons as $lessonRec) {
			$lessonId = $lessonRec['id_class_lessons'];

			$sql = '
			SELECT A.*
			FROM class_lesson_sequence as A
			WHERE A.lesson_id='.$lessonId.'
			ORDER BY rank';
			$db->query($sql);

					//*
			$lobArray = array();
			while ($db->nextRecord()) {
			//	echo "debug offset = ". (( $db->record['dueDate'] - $this->semStart ) / 60 / 60/ 24);
				$lobArray[]  = $db->record;
			}
			 //*/

			$getTestSql = 'SELECT date_available, date_unavailable  FROM assessment WHERE assessment_id = %d';
			$getAsignSql = 'SELECT activeDate, dueDate, noDueDate FROM class_assignments WHERE id_class_assignments = %d';
			foreach ($lobArray as $idx=>$lob) {
				switch($lob['lob_type']) {
					case 'content':
						$lobArray[$idx]['lob_guid'] = $this->contentGuid[ $lob['lob_id'] ];
					break;

					case 'activity':
					case 'assignment':
						$lob['lob_guid'] = $this->activityGuid[ $lob['lob_id'] ];
						$db->query( sprintf($getAsignSql, $lob['lob_id']) );
						$db->nextRecord();
						if ($db->record['dueDate'] < $this->semStart ) {
							$lob['start_offset'] =  0;
						} else {
							$lob['start_offset'] =  ( $db->record['dueDate'] - $this->semStart );
							$lob['allow_after_days'] =  sprintf('%.2f',( $db->record['dueDate'] - $this->semStart )/60/60/24);
						}
						$lobArray[$idx] = $lob;
					break;

					case 'assessment':
						$lob['lob_guid'] = $this->testGuid[ $lob['lob_id'] ];
						$db->query( sprintf($getTestSql, $lob['lob_id']) );
						$db->nextRecord();
						if ($db->record['date_available'] < $this->semStart ) {
							$lob['start_offset'] =  0;
						} else {
							$lob['start_offset'] =  ( $db->record['date_available'] - $this->semStart );
							$lob['allow_after_days'] =  sprintf('%.2f',( $db->record['date_available'] - $this->semStart )/60/60/24);
						}
						$lobArray[$idx] = $lob;
					break;
				}
			}

			//start building nodes
			$xml_child_nodes   = array();

			//name, description
			$less_title_node = new xml_node('lesson:title',null,null,$lessonRec['title']);
			$less_title_node->cdata = true;
			$xml_child_nodes[] = $less_title_node;

			$less_desc_node = new xml_node('lesson:description',null,null,$lessonRec['description']);
			$less_desc_node->cdata = true;
			$xml_child_nodes[] = $less_desc_node;

			//learning path
			$less_seq_node = new xml_node('lesson:learningpath');

			foreach($lobArray as $idx => $lob) {
				unset($lob_seq_node);
				$lob_seq_node = new xml_node('lesson:lobsequence',array('order'=>$lob['rank'], 'visible'=>'yes'));
				$lob_ref_node = new xml_node('lesson:lob',array('refid'=>$lob['lob_guid']));
				$lob_sta_node = new xml_node('lesson:start',array('type'=>'offset', format=>'unix'), null, $lob['start_offset']+ $lob['start_time']);
				$lob_end_node = new xml_node('lesson:end',array('type'=>'offset', format=>'unix'), null, $lob['end_offset']+ $lob['end_time']);
				$lob_due_node = new xml_node('lesson:due',array('type'=>'offset', format=>'unix'), null, $lob['due_offset']+ $lob['due_time']);

				$lob_seq_node->children[] = $lob_ref_node;
				$lob_seq_node->children[] = $lob_sta_node;
				$lob_seq_node->children[] = $lob_end_node;
				$lob_seq_node->children[] = $lob_due_node;

				$less_seq_node->children[] = $lob_seq_node;
			}
			$xml_child_nodes[] = $less_seq_node;


			$guid = lcUuid();
			$lob_nodes[] = new xml_node('lesson:lesson', 
				array('guid'=>$guid, 'dbid'=>$lessonId), 
				$xml_child_nodes);

		}//end foreach lessons
		return $lob_nodes;
	
/*
	<lesson:lesson guid="">
		<lesson:objective></lesson:objective>
		<lesson:standard></lesson:standard>

		<lesson:start type="offset" format="unix">123123</lesson:end>
		<lesson:end type="offset" format="days">25</lesson:end>

		<lesson:plan>
			<lesson:step num="1">Perform step 1</lesson:step>
			<lesson:step num="2">Perform step 2</lesson:step>
		</lesson:plan>
		<lesson:notes>
		</lesson:notes>
		<lesson:learningpath>
			<lesson:lobsequence order="1" notbefore="" visible="1">
				<!-- only 1 learning object -->
				<lesson:lob refid="be76c53d-1403-475c-ab85-ce559e84d5a8"/>
				<!-- one of the following -->
				<lesson:start type="offset" format="unix">123123</lesson:start>
				<lesson:start type="offset" format="days">2.3</lesson:start>
				<lesson:start type="date" format="mm-dd-yyyy">01-28-2008</lesson:start>
				<!-- one of the following -->
				<lesson:end type="offset" format="unix">123123</lesson:end>
				<lesson:end type="offset" format="days">2.3</lesson:end>
				<lesson:end type="date" format="mm-dd-yyyy">01-28-2008</lesson:end>
			</lesson:lobsequence>
		</lesson:learningpath>
	</lesson:lesson>
*/

	}



	/**
	 * return an array of arrays that represent document lobs
	 */
	function get_test_nodes() {
		
		$db = DB::getHandle();
		$db->RESULT_TYPE = MYSQL_ASSOC;
		$lob_nodes = array();
		$sql = "
		SELECT A.*, B.*,C.* ,D.*,E.*
		FROM lob_class_repo as A
		LEFT JOIN lob_test AS B 
			ON B.lob_repo_entry_id = A.lob_repo_entry_id
		LEFT JOIN lob_test_qst AS C 
			ON C.lob_test_id = B.lob_test_id
	LEFT JOIN lob_class_metadata AS D ON D.lob_class_repo_id=A.lob_class_repo_id
	LEFT JOIN lob_class_test AS E on A.lob_class_repo_id=E.lob_class_repo_id
		WHERE A.class_id=".$this->classId.'
		AND A.lob_type = "test"
		AND A.lob_sub_type = "test"
		
		';
		
		
		$db->query($sql);
		

		$testRecs = array();
		while ($db->nextRecord()) {


	
			$type_node = new xml_node('type',null,null,$db->record['lob_type']);
			
			//subtype
			//list($type,$submime) = explode('/', $db->record['lob_mime']);
			$sub_type_node = new xml_node('lob:subtype',null,null,$db->record['lob_sub_type']);
			
			$mim_type_node = new xml_node('lob:mime',null,null, $db->record['lob_mime']);
			
			
				
			

			$lob_title_node = new xml_node('lob:title',null,null,$db->record['lob_title']);
			$lob_title_node->cdata = true;

			$lob_desc_node = new xml_node('lob:description',null,null,$db->record['lob_description']);
			$lob_desc_node->cdata = true;

			$lob_copystyle_node = new xml_node('lob:copystyle',null,null,$db->record['lob_copy_style']);
			$lob_copystyle_node->cdata = true;
			
			$lob_qsttext_node = new xml_node('lob:qsttext',null,null,$db->record['qst_text']);
			$lob_qsttext_node->cdata = true;
			
			$lob_qstchoice_node = new xml_node('lob:qstchoices',null,null,$db->record['qst_choices']);
			$lob_qstchoice_node->cdata = true;
			
			
			$lob_qsttype_node = new xml_node('lob:questiontype',null,null,$db->record['question_type_id']);
			$lob_qsttype_node->cdata = true;
			
			$lob_qstpoints_node = new xml_node('lob:questionpoints',null,null,$db->record['qst_points']);
			$lob_qstpoints_node->cdata = true;
					
			$lob_numretry_node = new xml_node('lob:numretry',null,null,$db->record['num_retry']);
			$lob_numretry_node->cdata = true;
			
			$lob_ispractice_node = new xml_node('lob:ispractice',null,null,$db->record['is_practice']);
			$lob_ispractice_node->cdata = true;
			
			$lob_image_node = new xml_node('lob:image',null,null,$db->record['image_content_id']);
			$lob_image_node->cdata = true;
							
			$xml_child_nodes = array();
			$xml_child_nodes[] = $type_node;
			$xml_child_nodes[] = $sub_type_node;
			$xml_child_nodes[] = $mim_type_node;
			
			$xml_child_nodes[] = $lob_title_node;
			$xml_child_nodes[] = $lob_desc_node;
			$xml_child_nodes[] = $lob_copystyle_node;
			$xml_child_nodes[] =$lob_qsttext_node;
			$xml_child_nodes[] =$lob_qstchoice_node;
			$xml_child_nodes[] =$lob_qsttype_node;
			$xml_child_nodes[] =$lob_qstpoints_node;
			$xml_child_nodes[] =$lob_numretry_node;
			$xml_child_nodes[] =$lob_ispractice_node;
			$xml_child_nodes[]=$lob_image_node;

			$attrs = array( 
				'mail_responses',
				'auto_publish',
				'num_retries', 
				'minute_limit', 
				'show_result_type',
				'possible_points'
			);
			


			//lifecycle
			$createdon = $db->record['created_on'];

			$lifecycleArray = array(
				'lob:version'=>$db->record['lob_version'], 
				'lob:createdon'=>time(), 'createdon_dateformat'=>'unix'
			);

			$xml_child_nodes[] = $this->makeLifecycleNode($lifecycleArray);

			/*
			//metadata
			$metadataArray = array(
				'lob:author'=>$testRec['author'],
				'lob:subject'=>$testRec['subject'],
				'lob:subdisc'=>$testRec['subdisc'],
				'subject_abbr'=>'true',
				'subdisc_abbr'=>'false',
				'lob:copyright'=>$testRec['copyright'],
				'lob:license'=>$testRec['license']
			);
			$xml_child_nodes[] = $this->makeMetadataNode($metadataArray);
			 */
			
			$guid = $db->record['lob_guid'];
			$this->testGuid[ $db->record['lob_test_id' ] ]= $guid;
			
			$lob_nodes[] = new xml_node('lob:obj', 
				array('guid'=>$guid, 'dbid'=>$db->record['lob_repo_entry_id']), 
				$xml_child_nodes
			);

		/*	//questions
			$db->query('SELECT * FROM assessment_question WHERE assessment_id = '.$testRec['assessment_id']);
			$questionRecs = array();
			while ($db->nextRecord()) {
				$questionRecs[]  = $db->record;
			}

			foreach ($questionRecs as $qidx=>$questionRec) {
				$qust_node = new xml_node('lob:question', array('order'=>$questionRec['question_sort']));
				$qtext = new xml_node('lob:question-text', null,null, $questionRec['question_text']);
				$qtext->cdata = true;
				$qust_node->children[] = $qtext;
				$qust_node->children[] = new xml_node('lob:question-type', null,null, $questionRec['question_display']);
				//debug ( unserialize ( base64_decode( $questionRec['question_choices'])));
				$choices =  unserialize ( base64_decode( $questionRec['question_choices']));
				foreach ($choices as $qchoice) {
					$incomplete = get_object_vars($qchoice);
					$answer_node = new xml_node('lob:question-choice', null,null, $incomplete['label']);
					$answer_node->cdata = true;
					if ($incomplete['correct']) {
						$answer_node->attrs['correct'] = 'yes';
					}
					$qust_node->children[] = $answer_node;
				}
				$testLob->children[] = $qust_node;
			}

		*/	//$lob_nodes[] = $testLob;
		}
	return  $lob_nodes; 
	}



	
	/**
	 * make the lifecycle tag and all the possible sub nodes.
	 * createdOn
	 * updatedOn
	 * createdOn_dateformat
	 * updatedOn_dateformat
	 * version
	 * version_major
	 * version_minor
	 * status
	 * active
	 * createdBy
	 * updatedBy
	 */
	function makeLifecycleNode($lifecycleStruct) {
		$allow = array(
			'lob:createdon',
			'lob:updatedon',
			'lob:version',
			'lob:status',
			'lob:active',
			'lob:createdby',
			'lob:verdion',
			'lob:updatedby'
		);
		$lifecycle_node = new xml_node('lob:lifecycle',null,null);
		foreach ($allow as $tag) {
			if ($lifecycleStruct[$tag] != '') {
				$n = new xml_node(
					$tag,
					null,
					null,
					htmlentities($lifecycleStruct[$tag])
				);


				if ($tag == 'version'
					&& $lifecycleStruct['version_major']) {
						$n->attrs['major'] = $lifecycleStruct['version_major'];
				}
				if ($tag == 'lob:createdon'
					&& $lifecycleStruct['lob:createdon_dateformat']) {
						$n->attrs['dateformat'] = $lifecycleStruct['createdon_dateformat'];
				}

				$lifecycle_node->children[] = $n;
			}
		}

		/*
		$lifecycle_node = new xml_node('lifecycle',null,null);
		$version_node = new xml_node('version',null,null,'1.0');
		$lifecycle_node->children[] = $version_node;
		$xml_child_nodes[] = $lifecycle_node;
		 */
		return $lifecycle_node;
	}


	function makeMetadataNode($metadataStruct) {
		echo "metadata";
		$allow = array(
			'lob:subject',
			'lob:subdisc',
			'lob:author',
			'lob:source',
			'lob:copyright',
			'lob:license',
			'lob:objective'
		);
		$metadata_node = new xml_node('lob:metadata',null,null);
		foreach ($allow as $tag) {
			if ($metadataStruct[$tag] != '') {
				$n = new xml_node(
					$tag,
					null,
					null,
					htmlentities($metadataStruct[$tag])
				);

				if ($tag == 'lob:subject'
					&& $metadataStruct['subject_abbr']) {
						$n->attrs['abbr'] = $metadataStruct['subject_abbr'];
				}

				if ($tag == 'lob:subdisc'
					&& $metadataStruct['subdisc_abbr']) {
						$n->attrs['abbr'] = $metadataStruct['subdisc_abbr'];
				}

			$metadata_node->children[] = $n;
			}
		}
		return $metadata_node;
	}


	// look at the objectives link, it uses id_class_lesson .. <-- NO S lessons
	function get_lessons_nodes() {
		$xml_child_node = array();
		$sql = '
		SELECT * 
		FROM class_lessons
		WHERE id_classes='.$this->id_classes.'
		';
		
		$db = DB::getHandle();
		
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		$db2 = DB::getHandle();
		$db2->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->nextRecord())
		{	$xml_sub_child = null;
			$xml_links = null;
			$xml_objectives = null;
			$xml_assignments = null;
			$xml_sub_sub_child = null;
			
			// find all links to lessons
			$sql2 = '
			SELECT * FROM 
			class_lesson_links
			WHERE id_class_lessons='. $db->record['id_class_lessons'];
			
			$db2->query($sql2);
			while ($db2->nextRecord())
			{	$xml_links[] = new xml_node('id_class_links',null, null, $db2->record['id_class_links']);
			}
			$xml_sub_sub_child[] = new xml_node('LINKS',null, $xml_links);
			
			$sql2 = '
			SELECT * FROM 
			class_lesson_objectives
			WHERE id_class_lesson='. $db->record['id_class_lessons'];
			
			$db2->query($sql2);
			while ($db2->nextRecord())
			{	$xml_objectives[] = new xml_node('id_class_objectives',null, null, $db2->record['id_class_objectives']);
			}
			$xml_sub_sub_child[] = new xml_node('OBJECTIVES',null,$xml_objectives);

			
			$sql2 = '
			SELECT * FROM 
			class_assignments_link
			WHERE id_class_lessons='. $db->record['id_class_lessons'];
			
die('lskdjfas');
			$db2->query($sql2);
			while ($db2->nextRecord())
			{	$xml_assignments[] = new xml_node('id_class_assignments',null, null, $db2->record['id_class_assignments']);
			}
			$xml_sub_sub_child[] = new xml_node('ASSIGNMENTS',null,$xml_assignments);
			
			
			
			// refer to the CONTENT node in APPS for mappings
//			$xml_sub_sub_child[] = new xml_node('CONTENT',null);
			
			$xml_sub_child[] = new xml_node('MAPPINGS',null, $xml_sub_sub_child);
			
			$xml_sub_child[] = new xml_node('createdOn',null, null, $db->record['createdOn']);
			$xml_sub_child[] = new xml_node('title', array('BASE64'=>'1'), null, $db->record['title']);
			$xml_sub_child[] = new xml_node('description', array('BASE64'=>'1'), null, $db->record['description']);
			$xml_sub_child[] = new xml_node('activeOn', null, null, $db->record['activeOn']);
			$xml_sub_child[] = new xml_node('inactiveOn', null, null, $db->record['inactiveOn']);
			$xml_sub_child[] = new xml_node('checkList', array('BASE64'=>'1'), null, $db->record['checkList']);
			
			$xml_child_node[] =new xml_node('ITEM', 
									array(	'id_class_lessons'=>$db->record['id_class_lessons']
									 	 ), $xml_sub_child
									);
		}
		
	return  new xml_node('CLASS_LESSONS', null, $xml_child_node);
	}
	

/*
 *
 * Processes the choices made above and makes a compresses .zip file.
 * We should look at using XML to save this file so we can easily build 
 * an import routine to pull stuff this export generated back into the system.
 *
 * Input data: classID
 * Output data: form
 *
 */
       
	function exportClassRun(&$db,&$u,&$lc,&$t) {
            $lc->templateName='dataexchange_main';
//auto-comment			$lc->templateStyle = 'private';
			
       }       
}


class LcZipFile {

	var $datasec = array();
	var $ctrl_dir = array();
	var $eof_ctrl_dir = "\x50\x4b\x05\x06\x00\x00\x00\x00";
	var $old_offset = 0;


	function add_dir($name) {
		$name = str_replace("\\","/", $name);

		$fr = "\x50\x4b\x03\x04";
		$fr .= "\x0a\x00";
		$fr .= "\x00\x00";
		$fr .= "\x00\x00";
		$fr .= "\x00\x00\x00\x00";

		$fr .= pack("V",0);
		$fr .= pack("V",0);
		$fr .= pack("V",0);
		$fr .= pack("v",strlen($name));
		$fr .= pack("v",0);
		//end local file header

		$fr .= $name;
		$fr .= pack("V",0);
		$fr .= pack("V",0);
		$fr .= pack("V",0);

		$this->datasec[] = $fr;

	//	$new_offset = $this->old_offset + strlen($fr);
		$new_offset = strlen(implode("", $this->datasec)); 

		$cdrec = "\x50\x4b\x01\x02";
		$cdrec .="\x00\x00";
		$cdrec .="\x0a\x00";
		$cdrec .="\x00\x00";
		$cdrec .="\x00\x00";
		$cdrec .="\x00\x00\x00\x00";
		$cdrec .= pack("V",0);
		$cdrec .= pack("V",0);
		$cdrec .= pack("V",0);
		$cdrec .= pack("v",strlen($name));
		$cdrec .= pack("v",0);
		$cdrec .= pack("v",0);
		$cdrec .= pack("v",0);
		$cdrec .= pack("v",0);
		//$ext = "\x00\x00\x10\x00";
		//$ext = "\xff\xff\xff\xff";
		$cdrec .= pack("V",16);
		$cdrec .= pack("V",$this->old_offset);
		$cdrec .= $name;

		$this->ctrl_dir[] = $cdrec;
		$this->old_offset = $new_offset;

	}


	function add_file($data, $name) { 
		$name = str_replace("\\", "/", $name); 
		$unc_len = strlen($data); 
		$crc = crc32($data); 
		$zdata = gzcompress($data); 
		//$zdata = substr ($zdata, 2, -4); 
		//$zdata = substr( substr($zdata, 0, strlen($zdata) - 4), 2);
		$zdata = substr( $zdata, 2, -4);
		//should be strlen if substr, or original ?
		$c_len = strlen($zdata); 

		$fr = "\x50\x4b\x03\x04"; 
		$fr .= "\x14\x00"; 
		$fr .= "\x00\x00"; 
		$fr .= "\x08\x00"; 
		$fr .= "\x00\x00\x00\x00"; 
		$fr .= pack("V",$crc); 
		$fr .= pack("V",$c_len); 
		$fr .= pack("V",$unc_len); 
		$fr .= pack("v", strlen($name) ); 
		$fr .= pack("v", 0 ); 
		$fr .= $name; 
		//end of local file header segment

		$fr .= $zdata; 
		$fr .= pack("V",$crc); 
		$fr .= pack("V",$c_len); 
		$fr .= pack("V",$unc_len); 

		$this->datasec[] = $fr;

		$new_offset = strlen(implode("", $this->datasec)); 

		$cdrec = "\x50\x4b\x01\x02"; 
		$cdrec .="\x00\x00"; 
		$cdrec .="\x14\x00"; 
		$cdrec .="\x00\x00"; 
		$cdrec .="\x08\x00"; 
		$cdrec .="\x00\x00\x00\x00"; 
		$cdrec .= pack("V",$crc); 
		$cdrec .= pack("V",$c_len); 
		$cdrec .= pack("V",$unc_len); 
		$cdrec .= pack("v", strlen($name) ); 
		$cdrec .= pack("v", 0 ); 
		$cdrec .= pack("v", 0 ); 
		$cdrec .= pack("v", 0 ); 
		$cdrec .= pack("v", 0 ); 
		$cdrec .= pack("V", 32 ); 
		$cdrec .= pack("V", $this->old_offset ); 
		$cdrec .= $name; 

		$this -> old_offset = $new_offset; 

		$this -> ctrl_dir[] = $cdrec; 
	} 
 

	function file() { 
		$data = implode("", $this->datasec); 
		$ctrldir = implode("", $this->ctrl_dir); 

	   return 
		$data. 
		$ctrldir. 
		$this->eof_ctrl_dir. 
		pack("v", sizeof($this->ctrl_dir)). 
		pack("v", sizeof($this->ctrl_dir)). 
		pack("V", strlen($ctrldir)). 
		pack("V", strlen($data)). 
		"\x00\x00"; 
	} 

}

?>
