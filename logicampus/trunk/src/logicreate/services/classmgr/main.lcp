<?

include_once(LIB_PATH.'SiteForms.php');
include_once(LIB_PATH.'semesterObj.php');
include_once(LIB_PATH.'lc_class.php');
 
/**
 * Service acts as a gateway into the managing all aspects
 * of a classroom.
 */
class classmgr extends FacultyService {

	var $presentor='htmlPresentation';
	var $sectionTitle = 'Classroom Manager';
	var $navlinks = array (
		''=>''
		);


	/**
	 * Event will present a list of all available activities in the
	 * classmgr app.
	 *
	 * Input data:
	 * Output data:
	 *
	 */
	function run(&$db,&$u,&$lc,&$t) {
		$lc->templateName='main_main';
		$this->authorizer = 'facultyGroupCheck';
		if ((int)$lc->postvars['semester'] > 0) {
			$u->sessionvars['classmgr']['currentsemester'] = (int)$lc->postvars['semester'];	
		} else {
//*
               	}
//*/

		$id_semesters = (int)$u->sessionvars['classmgr']['currentsemester'];
		if ($id_semesters > 0 ) {
			$semesterObj = semesterObj::_getFromDB($id_semesters, 'id_semesters');	
		}
		if (LcSettings::isModuleOff('LOGICAMPUS_SIMPLE_MODE')) {
			$t['semesterDisplay'] = ' &endash; '.$semesterObj->semesterTerm. ' '. $semesterObj->semesterYear;
		}
		
		
		$f = new SiteForm();
		$f->getForm('semestersfaculty', array('semester'=>$u->sessionvars['classmgr']['currentsemester']));
		$f->action = modurl('main/');
		$t['form'] = $f->ToHTML();


		$t['classes'] = LcClass::getActiveClassesForFaculty($u->username);

		foreach ($t['classes'] as $classObj) {
			$db->query('
				SELECT count(class_enrollment_id) as total_enrollment
				FROM class_enrollment
				WHERE
					class_id='.$classObj->id_classes);
			$db->nextRecord();
			$db->freeResult();
			$t['classEnrollmentStats'][$classObj->id_classes] = sprintf('%d',$db->record['total_enrollment']);

			$db->query('
				SELECT count(id_class_gradebook_entries) as total_entries
				FROM class_gradebook_entries
				WHERE
					id_classes='.$classObj->id_classes);
			$db->nextRecord();
			$db->freeResult();
			$t['classEntriesStats'][$classObj->id_classes] = sprintf('%d',$db->record['total_entries']);


			$offSets = lcClass::calcOffsetForStudent($u, $classObj->id_classes, $classObj->semesterID);
			//__TODO__ remove this calculation for rolling enrollment classes
			$db->query('
				SELECT count(lob_class_test_id) as total_assessments
				FROM lob_class_test AS A
				LEFT JOIN lob_class_repo AS B
					ON A.lob_class_repo_id = B.lob_class_repo_id
				LEFT JOIN class_lesson_sequence AS C
					ON B.lob_class_repo_id = C.lob_class_repo_id
				WHERE
					B.class_id='.$classObj->id_classes.'
					AND C.start_offset - '.$offSets['start'].' <= '.(86400*5));
			$db->nextRecord();
			$db->freeResult();
			$t['classAssessmentsStats'][$classObj->id_classes] = sprintf('%d',$db->record['total_assessments']);


			//__TODO__ remove this calculation for rolling enrollment classes
			$db->query('
				SELECT count(lob_class_activity_id) as total_assignments
				FROM lob_class_activity AS A
				LEFT JOIN class_lesson_sequence AS B
					 ON A.lob_class_repo_id = B.lob_class_repo_id
				WHERE
					B.class_id='.$classObj->id_classes.'
					AND B.start_offset - '.$offSets['start'].' <= '.((86400*5) ));

			$db->nextRecord();
			$db->freeResult();
			$t['classAssignmentsStats'][$classObj->id_classes] = sprintf('%d',$db->record['total_assignments']);

		}
	}
}

?>
