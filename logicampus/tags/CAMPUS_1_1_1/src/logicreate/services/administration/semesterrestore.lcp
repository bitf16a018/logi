<?php

/**
 *	
	Things to remember:
		Exam scheduling is not included in a restore
		Assignment turned in information is not restored
		Gradebook entries
 
	BUGS:
	
	TODO:	Assignment's were changed on how they handle uploaded assignments
			I need to address this.
	
			I need to update classes table .. it now has a id_resources and I need to match
			that up with the content page? that it belongs to
			
			Port these changes into administration/classrestore (single class restore)
 		
 *
 */
include_once(LIB_PATH.'xmlparser.php');

// necessary evils
set_time_limit(3000);
ignore_user_abort(true);

class semesterrestore extends AdminService
{
	
	// form stuff
	var $cleanedArray = array();
		
	var $presentor = "htmlPresentation";
	

	// Links
	var $sectionTitle = 'Semester Importing';
	var $navlinks = array(
		'Administration Home' => '',
		'Restore Class' => 'classrestore/',
		'Backup Semesters' => 'backupclasses/'
	);
	var $applinks = array(
		'List Classes' => 'classes/'
	);
	
	var $mode = 'restore';
	var $id_semester;
	
	var $map_assignments = array();
	var $map_link_categories = array();
	var $map_link = array();
	var $map_objectives = array();
	var $map_content = array();
	
	var $map_gradebook_category = array();
	var $map_gradebook_entries = array();
	
	var $map_assessments = array();
	
	var $obj_db;
	
	var $home_dir;
	
	var $__errors = array();
	
	var $__placement = 0;
	var $__semester_into = 0;
	
	# Displays Classes by default (chooses current semster by default)	
	function run($db,&$u,&$lc,&$t)
	{
		$a_semester = array();
		$a_backup_file = array();
		$a_import_enabled = array(); // semesters that have no classes attached and can have imports on them
		
		$lc->templateStyle='private';
		$lc->templateName = 'semesterrestore_main';

		
		$sql = '
		SELECT A.id_semesters, A.semesterTerm, A.semesterYear, count(B.id_classes) as class_count
		FROM semesters as A
		LEFT JOIN classes as B ON A.id_semesters=B.id_semesters
		GROUP BY A.id_semesters';
		$db->query($sql);
		
		while ($db->next_record())
		{	if ($db->Record['class_count'] == 0)
				$a_import_enabled[] = $db->Record;
		}
		
		$t['a_import_enabled_semester'] = $a_import_enabled;
		
		if ($handle = opendir('../logicreate/backup')) 
		{
			while (false !== ($file = readdir($handle))) 
		    {	if (substr($file, -4) == '.zip')
		    	{	
		    		$tmpfilename = explode('_', substr($file, 0, (strlen($file)-4) ));
		    		$a_backup_file[$tmpfilename[1]] = @stat('../logicreate/backup/'.$file);
		    	}
		    }
		
	    closedir($handle); 
		}
		
		$sql = '
		SELECT id_semesters, semesterTerm, semesterYear
		FROM semesters
		ORDER BY id_semesters ASC
		';
		
		$db->query($sql);
		$db->RESULT_TYPE = MYSQL_ASSOC;
		
		while ($db->next_record())
		{	$db->Record['stat'] = $a_backup_file[$db->Record['id_semesters']];
			$a_semester[$db->Record['id_semesters']] = $db->Record;
		}
		
		$t['a_semester'] = $a_semester;
		
		$lc->templateName = 'semesterrestore_main';
	}
	
	function helloRun($db, &$u, &$lc, &$t)
	{	$this->presentor = 'emptyPresentation';
		
	}
	
	/**
	 *	This is a step to get the progress bar in visible site before the first item gets processed
	 */
	function goRun($db, &$u, &$lc, &$t)
	{	
		/**
		 *	@getvars
		 *			@param2	semester to port into
		 *			@param3	semester to restore the backup from
		 *			@param4 which directory we're going to process
		 */
		$lc->templateName  	= 'semesterrestore_progress';
		$this->presentor 	= 'emptyPresentation';
		//debug($lc->getvars);
		//exit();
		
		/// cleanup
		//*exec('rm -rf /tmp/semester_restore/');

		//*exec('mkdir -p /tmp/semester_restore/');
		// lets copy the backup file into tmp
		//exec('cp '.LIB_PATH.'../backup/semester_'.$lc->getvars[3].'.zip /tmp/semester_restore/');
		
		// check if file exists, if it doesn't, stop this mofo now!
		//if (file_exists('/tmp/semester_restore/semester_'.$lc->getvars[3].'.zip'))
		if (file_exists(LIB_PATH.'../backup/semester_'.$lc->getvars[3].'.zip'))
		{	error_log('found backup file');
			// unzip it
			//* exec('cd /tmp/semester_restore/; unzip -o -d /tmp/semester_restore/ '.LIB_PATH.'../backup/semester_'.$lc->getvars[3].'.zip; rm -f /tmp/semester_restore/semester_'.$lc->getvars[3].'.zip');
			error_log('unzipping backup file');
			// we're ready to go to the next even
			header('Refresh: 1;'.modurl('semesterrestore/event=restore/'.$lc->getvars[2].'/'.$lc->getvars[3].'/1'));
			error_log('going to next step');
			
		} else
		{
			echo 'File does not exists, fatal error';
		}
		
	}
	
	
	function clean()
	{	$this->map_assignments = array();
		$this->map_objectives = array();
		$this->map_link_categories = array();
		$this->map_link = array();
		$this->map_gradebook_entries = array();
		$this->map_gradebook_category = array();
		$this->map_content = array();
		$this->map_assessments = array();
	}
	
	
	function restoreRun($db,&$u,&$lc,&$t)
	{
		$userfile = '';

		$this->presentor 	= 'emptyPresentation';
		$lc->templateName  	= 'semesterrestore_progress';

		$this->mode = 'copy';
		$this->obj_db =& $db;
		
		if ($lc->postvars['import_into'])
		{	$this->id_semester = $lc->postvars['import_into'];
		}
		
		$semesterid = $lc->getvars[2];
		$placement = (int)$lc->getvars[4];
		
		if ($placement <= 0)
		{	$placement = 1;
			// clean the palette
		}
		$t['placement'] = $placement;
		$this->__placement = $placement;
		
		$this->id_semester = $semesterid;
		$this->__semester_into = $semesterid;
		
		// get list of directories
		// I'm going to assume there are no files, and all is directories
		// positioning stability is needed in this list, but i'm not forcing it, it should be
		$a_file_list = array();
		if ($handle = opendir('/tmp/semester_restore/')) 
		{
			$i=1;
			while (false !== ($file = readdir($handle))) 
		    {	
		    	if (substr($file, 0, 9) == 'classroom')
			    {	$a_file_list[$i++] = $file;
			    }
		    }

	    closedir($handle); 
		}
		
		natsort($a_file_list);
		
		$tmpa= array();
		$i = 1;
		foreach($a_file_list as $k=>$value)
		{	
			$tmpa[$i++] = $value;
		}
		$a_file_list = $tmpa;
		
		
		$t['total_classes'] = count($a_file_list);
		//echo $a_file_list[$placement];
		
		//exit('you can not get here');
		
		// shouldn't I make sure there is a real semester?
		
		
		
		// I have the semester id
		// I need to find the file that belongs to the semester

		
		// we now have our file
		
		if ($a_file_list[$placement])
		{	
			$using_directory = '/tmp/semester_restore/'.$a_file_list[$placement];
			$this->home_dir = $using_directory.'/';
			// do my work in here. unzipping. blah blah importing.
			// copy file into the temp directory/destination
			
			if ($handle = opendir($using_directory)) 
			{
				error_log('Importing: '.$a_file_list[$placement]);
				
	    		$xml_contents = file_get_contents($using_directory.'/classroom.xml');
	    		// if no
				$xmlObj = new xmlparser($xml_contents);
				
				$root_node =& $xmlObj->getRoot();
				
				if (is_array($root_node->children))
				foreach($root_node->children as $classroom_node)
				{	
					if ($classroom_node->tag == 'CLASSROOM')
					{
						// execute classroom restore
						$this->classroom_node($classroom_node);
						
					} else
					{
						// what other tag could it be? if anything else, we won't process. we have one responsability.. to restore CLASSROOM node
					}
					
				}
			    
		    closedir($handle); 
			}
			
			$has_errors = false;
			foreach($this->__errors as $b=>$lah)
			{	if (strlen($lah) > 10)
				{
					$has_errors = true;
					debug($this->__errors);
				}
			}
			
			if ($has_errors == false)
			{	header('Refresh: 1;'.modurl('semesterrestore/event=restore/'.$lc->getvars[2].'/'.$lc->getvars[3].'/'.($placement+1)));
			}
			
		} else
		{	
			exec('rm -rf /tmp/semester_restore/');
			//echo 'We are finished';
			//echo 'You must let me know what which file you are intending on restoring.';
		}
		
		// copy it to the temp directory and unzip it
		// remove the copied version of it
		// cd into the unzipped version
		// roll through the folders
		// push each folder through a function to import it as a COPY not a restore
		
		
		//exit('Not done');
		

	}
	
	
	function classroom_node($node)
	{
		$this->using_classes_id = $node->attrs['ID'];
		// lets extract the information for the base class
		// I am restoreing. so i am replacing into!
		// be aware that id_semester should be placed in by outside help rather than XML on a COPYTO
		if ($this->mode == 'copy')
		{
			$sql = '
			INSERT INTO classes
			SET
			id_semesters='.$this->id_semester.',';

		} else
		{
			$sql = '
			REPLACE INTO classes
			SET
			id_classes='.$node->attrs['ID'].',
			id_semesters='.$node->attrs['ID_SEMESTERS'].',';
		}
		
		$sql .= '
			classType=\''.$node->attrs['CLASSTYPE'].'\',
			stylesheet=\''.$node->attrs['STYLESHEET'].'\',
			facultyId=\''.$node->attrs['FACULTYID'].'\',
			/**sectionNumbers=\''.str_replace(' ', "\n",$node->attrs['SECTIONNUMBERS']).'\', **/';

		// course information (do i need to scroll through the tags? I'm not really supposed to restore course!)
		$course_node = array_shift($node->children);
		
		if ($course_node->attrs['ID'] == '')
		{	// get out now, this is an abandoned class
			header('Refresh: 1;'.modurl('semesterrestore/event=restore/'.$this->__semester_into.'/0/'.($this->__placement + 1)));
			return;
		}

		$sql .= '
			id_courses='.$course_node->attrs['ID']. ',';

		foreach($course_node->children as $k=>$v)
		{
			if ($v->tag == 'COURSEFAMILY')
			{	$sql .= 'courseFamily=\''.$v->value.'\',';
				$courseFamily = $v->value;
			}
			
			if ($v->tag == 'COURSENUMBER')
			{	$sql .= 'courseNumber=\''.$v->value.'\',';
				$courseNumber = $v->value;
			}

		}
		
		$sql .= 'courseFamilyNumber=\''.$courseFamily.$courseNumber.'\'';
		
		$this->obj_db->query($sql);
		$this->__errors[] = __LINE__. ' '. mysql_error();
		if (mysql_errno() > 0)
		{	$this->__errors[] = $sql;
		}
		// execute sql and get inserted ID if its' a copy!
		if ($this->mode == 'copy')
		{	$this->using_classes_id = $this->obj_db->getInsertID();
		}
		
		$application_node = array_shift($node->children);
		
		if ($application_node->tag == 'APPLICATIONS')
		{
			// roll thorugh the applications
			if (is_array($application_node->children))
			foreach($application_node->children as $application)
			{
				//debug($application);
		///		echo 'APP::'.$application->tag. '::';
				$this->{'xml_'.$application->tag}(&$application->children); // I am passing the child node because I WANT TO!
		//		echo '<br>';
			}
			
		}
		
		//debug($this->__errors);
		
	}
	
	
	function remove_first_comma($string)
	{
		$pos_of_comma = strpos($string, ',');
		$string_first = substr($string, 0, ($pos_of_comma));
		$string_second = substr($string, ($pos_of_comma+1));
		return $string_first. $string_second;
	}
	
	/**
	 *
	 *	@@DONE
	 */
	function xml_CLASS_FAQS($node)
	{
		foreach($node as $faq)
		{
			$sql = '
			REPLACE INTO class_faqs
			SET
			';
			
			if ($this->mode != 'copy')
			{
				$sql .= '
				id_class_faqs='.$faq->attrs['ID_CLASS_FAQS'];
			}
			
			foreach($faq->children as $field_node)
			{
				if ($field_node->tag == 'CLICKS')
				{	$field_node->value = 0;
				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes(str_replace('\\\\', '', $field_node->value))).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			if (mysql_errno() > 0)
			{	$this->__errors[] = $sql;
			}
			// INSERT ON EVERY ROUND! OR stuff the sql into an array and roll through it at end of function.. or return it
		}
		
	}
	
	
	/**
	 * @@DONE
	 */	
	function xml_CLASS_ANNOUNCEMENTS($node)
	{
		foreach($node as $announcement)
		{
			$sql = '
			REPLACE INTO class_announcements
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_announcements='.$announcement->attrs['ID_CLASS_ANNOUNCEMENTS'];
			}
			
			foreach($announcement->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;

			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);	
			$this->__errors[] = __LINE__. ' '. mysql_error();
			if (mysql_errno() > 0)
			{	$this->__errors[] = $sql;
			}
		}
		
	}
	
	
	/**
	 *
	 *	@@DONE
	 */
	function xml_CLASS_SYLLABUSES($node)
	{
		foreach($node as $syllabus)
		{
			$sql = '
			REPLACE INTO class_syllabuses
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_syllabuses='.$syllabus->attrs['ID_CLASS_SYLLABUSES'];
			}
			
			foreach($syllabus->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes(stripslashes(str_replace('\\\\', '', $field_node->value)))).'\'';
			}
			
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			if (mysql_errno() > 0)
			{	$this->__errors[] = $sql;
			}
		}
		
	}
	
	
	/**
	 *
	 *	Some difficult things I need to workout.
	 *		1] mapping the id_item and id_subitem to it's correct counterpart via calendarType
	 *		2] refer to number 1.. sheesh!
	 */
	function xml_CLASS_CALENDAR($node)
	{
		$calendarType = '';
		$id_item = '';
		$id_sub_item = '';
		
		foreach($node as $calendar)
		{
			$sql = '
			REPLACE INTO lcEvents
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= ' 
				pkey='.$calendar->attrs['PKEY'];
			}
			
			foreach($calendar->children as $field_node)
			{
				if ($field_node->tag == 'CALENDARTYPE')
				{	$calendarType = $field_node->value;
				}
				
				if ($field_node->tag == 'ID_ITEM')
				{	$id_item = $field_node->value;
					$field_node->value = '::ITEM::';
				}
				
				if ($field_node->tag == 'ID_ITEM_SUB')
				{	$id_item_sub = $field_node->value;
					$field_node->value = '::ITEMSUB::';
				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';

			}
			
			$sql .=', id_classes='.$this->using_classes_id;

			
			// we need to 
			// find mappings of id's (incase this is a COPY)
			if ($this->mode == 'copy')
			{
				switch($calendarType)
				{
					case 'classroomassignments':
						// execute database query
						// do some sort of replace on the sql string now?!
						$sql = str_replace('::ITEM::', $this->map_assignments[$id_item], $sql);
						$sql = str_replace('::ITEMSUB::', '0', $sql);
						// execute query
						
						if ($this->mode == 'copy')
						{	$sql = $this->remove_first_comma($sql);
						}
						
						$this->obj_db->query($sql);
						$this->__errors[] = __LINE__. ' '. mysql_error();
						break;
					
					case 'orientationsscheduling':	// do not query (we are in copy mode)
						break;
						
					/**
						Add in any new objects here
						// seminar

					 */
					case '':
						$sql = str_replace('::ITEM::', $id_item, $sql);
						$sql = str_replace('::ITEMSUB::', $id_item_sub, $sql);
						if ($this->mode == 'copy')
						{	$sql = $this->remove_first_comma($sql);
						}
						
						$this->obj_db->query($sql);
						//execute query 
						$this->__errors[] = __LINE__. ' '. mysql_error();
						break;
					
				}
				
			} else 
			{	$sql = str_replace('::ITEM::', $id_item, $sql);
				$sql = str_replace('::ITEMSUB::', $id_item_sub, $sql);
				// execute query
				if ($this->mode == 'copy')
				{	$sql = $this->remove_first_comma($sql);
				}
				
				$this->obj_db->query($sql);
				$this->__errors[] = __LINE__. ' '. mysql_error();
			}
			
		}
		
	}
	
	
	// @@@@ NOTE DONE.. need to handle TURNIN and GRADES section of assignments
	function xml_CLASS_ASSIGNMENTS($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_assignments
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_assignments='.$nodette->attrs['ID_CLASS_ASSIGNMENTS'];
			}
			
			foreach($nodette->children as $field_node)
			{
				if ($field_node->tag == 'TURNEDIN')
				{	
					$this->xml_CLASS_ASSIGNMENTS_TURNIN($field_node->children,$nodette->attrs['ID_CLASS_ASSIGNMENTS'],$nodette->attrs['ID_CLASS_ASSIGNMENTS']);
					continue;
				}
				
				if ($field_node->tag == 'GRADES')
				{	
					$this->xml_CLASS_ASSIGNMENTS_GRADES($field_node->children,$nodette->attrs['ID_CLASS_ASSIGNMENTS'],$nodette->attrs['ID_CLASS_ASSIGNMENTS']); // , $id_class_assignment);
					continue;
				}

				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';

			}
			// execute
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			$this->map_assignments[$nodette->attrs['ID_CLASS_ASSIGNMENTS']] = $this->obj_db->getInsertID();
		}
		
	}

	
	// I need to pass in the assignment ID ( on a copy ) not on a restore
	/**
	 *	@@NOTE Only on restore, NOT copy
	 *
	 *	@@DONE
	 */
	function xml_CLASS_ASSIGNMENTS_GRADES($node, $assignid)
	{
		if ($this->mode == 'copy')
		{	return true;
		}
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_assignments_grades
			SET
				id_class_assignments_grades='.$nodette->attrs['ID_CLASS_ASSIGNMENTS_GRADES'].',';
			
			$sql .= '
			id_student=\''.$nodette->attrs['ID_STUDENT'].'\',
			comments=\''.str_replace('\'', '\'\'',stripslashes($nodette->value)).'\',
			grade='.$nodette->attrs['GRADE'].',
			id_class_assignments='.$assignid.'
			';
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
		}
		
	}

	
	/**
	 *	@@NOTE Only on restore, NOT copy
	 *
	 *	@@DONE
	 */
	function xml_CLASS_ASSIGNMENTS_TURNIN($node, $assignid)
	{
		if ($this->mode == 'copy')
		{	return true;
		}
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_assignments_turnin
			SET
				id_class_assignments_turnin='.$nodette->attrs['ID_CLASS_ASSIGNMENTS_TURNIN'].',';
			
			$sql .= '
			id_student=\''.$nodette->attrs['ID_STUDENT'].'\',
			dateTurnin=\''.$nodette->attrs['DATETURNIN'].'\',
			assign_type=\''.$nodette->attrs['ASSIGN_TYPE'].'\',
			assign_text=\''.str_replace('\'', '\'\'',base64_decode($nodette->attrs['ASSIGN_TEXT'])).'\',
			assign_file_mime=\''.$nodette->attrs['ASSIGN_FILE_MIME'].'\',
			assign_file_name=\''.str_replace('\'', '\'\'',stripslashes($nodette->attrs['ASSIGN_FILE_NAME'])).'\',
			assign_file_size=\''.$nodette->attrs['ASSIGN_FILE_SIZE'].'\',
			assign_file_blob=\''.$nodette->value.'\',
			id_class_assignments='.$assignid.'
			';
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
		}
		
	}

	/**
	 *	@@DONE
	 */
	function xml_CLASS_LINKS_CATEGORIES($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_links_categories
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_links_categories='.$nodette->attrs['ID_CLASS_LINKS_CATEGORIES'];
			}
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			// execute and keep track of ID
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			if ($this->mode == 'copy')
				$this->map_link_categories[$nodette->attrs['ID_CLASS_LINKS_CATEGORIES']] = $this->obj_db->getInsertId();
		}
		
		
	}

	/**
	 *	@@DONE
	 */
	function xml_CLASS_LINKS($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_links
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_links='.$nodette->attrs['ID_CLASS_LINKS'];
			}
			
			foreach($nodette->children as $field_node)
			{
				if ($field_node->tag == 'HITS')
				{	$field_node->value = 0;
				}
				// if we're in a copy.. then we need to update the id categories to the NEW id we created
				if ($field_node->tag == 'ID_CLASS_LINKS_CATEGORIES' && $this->mode == 'copy')
				{	$field_node->value = $this->map_link_categories[$field_node->value];
				}	
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
				
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			// execute
			if ($this->mode == 'copy')
				$this->map_link[$nodette->attrs['ID_CLASS_LINKS']] = $this->obj_db->getInsertID();
		}
		
	}
	
	/**
	 *	I will need to make a mapping of the old number to the new number.. maybe arary[oldnumber] = newnumber.
	 *  it will make it easy for me
	 */
	// I will need to soak up the id number on a copy
	/**
	 *	@@DONE
	 *
	 */
	function xml_CLASS_OBJECTIVES($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_objectives
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_objectives='.$nodette->attrs['ID_CLASS_OBJECTIVES'];
			}
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
			if ($this->mode == 'copy')
				$this->map_objectives[$nodette->attrs['ID_CLASS_OBJECTIVES']] = $this->obj_db->getInsertID();
			
			// INSERT ON EVERY ROUND! OR stuff the sql into an array and roll through it at end of function.. or return it
		}
		
	}
	
	
	/**
	 *	@@NOTE Only on restore, will not copy presentations to a new class
	 *
	 *	@@DONE
	 */
	function xml_CLASS_PRESENTATIONS($node)
	{
		if ($this->mode == 'copy')
		{	return true;
		}
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_presentations
			SET
				id_presentations='.$nodette->attrs['ID_PRESENTATIONS'];
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
		}

	}
	
	/**
	 *	@@DONE
	 */
	// needs executing AFTER lessons
	function xml_CLASS_LESSON_CONTENT($node)
	{
		/// I need the lesson id to seed these contents with.. (not all have it)
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_lesson_content
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_lesson_content='.$nodette->attrs['ID_CLASS_LESSON_CONTENT'];
			}
			$textname = null;
			// HANDLE the new lesson IDS
			foreach($nodette->children as $field_node)
			{
			
				if ($field_node->tag == 'TXTITLE')
				{	$textname = $field_node->value.'.html';
				}
				
				if ($field_node->tag == 'ID_CLASS_LESSONS' && $field_node->value == '')
				{	
					$sql .= ','."\n".strtolower($field_node->tag).'=NULL';
				} else 
				{	// MAKE SURE ID_CLASS_LESSONS can handle NULL!
					
					if ($field_node->tag == 'ID_CLASS_LESSONS' && $this->mode == 'copy')
					{	// executing a copy
						// us mappings
						$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',$this->map_lessons[$field_node->value]).'\'';
						
					} else 
					{
						$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',$field_node->value).'\'';
					}
					
				}
			}

			// get content contnets
			$sql .= ','."\n".'txText=\''. str_replace('\'', '\'\'',stripslashes(str_replace('\\\\', '', file_get_contents($this->home_dir.'content/'.$textname)))).'\'';
			
			$sql .= ', id_classes='.$this->using_classes_id;

			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
			if ($this->mode == 'copy')
			{	$this->map_content[$nodette->attrs['ID_CLASS_LESSON_CONTENT']] =  $this->obj_db->getInsertID();
			}
			
		}
		
		if ($this->mode == 'copy')
		{	$this->rebuildContent();		
		}
		
	}

	
	// dont forget assignments have mappings to lessons
	// I need to swap the lessons with the linking tables.. lessons should be on top as to get an ID to pass to the linking tables
	function xml_CLASS_LESSONS($node)
	{
		$a_mapping = array();
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_lessons
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_lessons='.$nodette->attrs['ID_CLASS_LESSONS'];
			}
			
			foreach($nodette->children as $field_node)
			{
				if ($field_node->tag == 'MAPPINGS')
				{	$a_mapping = $field_node->children;
					continue;
					// execute mapping IDS HERE? 
				}
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			// execute query
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			// if copy get inserted id
			if ($this->mode == 'copy')
			{	$lesson_id = $this->obj_db->getInsertID();
			} else 
			{	$lesson_id = $nodette->attrs['ID_CLASS_LESSONS'];
			}
			
			$this->map_lessons[$nodette->attrs['ID_CLASS_LESSONS']] = $lesson_id;
			
			// pass id to mapping method
			$this->xml_MAPPING($a_mapping, $lesson_id);
			
		}

	}

	
	/**
	 *	@@DONE
	 */
	function xml_MAPPING($node, $id_lesson)
	{
		foreach($node as $nodette)
		{
			if ($nodette->tag == 'LINKS')
			{
				foreach($nodette->children as $nizod)
				{
					if ($this->map_link[$nizod->value] == '')
						continue;
						
					$sql = '
					REPLACE INTO class_lesson_links
					SET';
			
					if ($this->mode != 'copy')
					{	
						$sql .= '
						id_class_links='.$nizod->value; 
					} else 
					{
						$sql .= '
						id_class_links='.$this->map_link[$nizod->value];
					}
					$sql .= ', id_class_lessons='.$id_lesson;
					
					$this->obj_db->query($sql);
					$this->__errors[] = __LINE__. ' '. mysql_error();
				}
				
			}
			
			if ($nodette->tag == 'OBJECTIVES')
			{
				// unfortuantely, there is BAD data in the database
				// so i have to put this check in
				
				foreach($nodette->children as $nizod)
				{
					$objectives_link_can_be_inserted = false;
					$sql = '
					REPLACE INTO class_lesson_objectives
					SET';
			
					if ($this->mode != 'copy')
					{	
						if ((int)$nizode->value > 0)
						{	$objectives_link_can_be_inserted = true;
						}
						$sql .= '
						id_class_objectives='.$nizod->value; 
					} else 
					{
						if ((int)$this->map_objectives[$nizod->value] > 0)
						{	$objectives_link_can_be_inserted = true;
						}
						$sql .= '
						id_class_objectives='.$this->map_objectives[$nizod->value];
					}
					$sql .= ', id_class_lesson='.$id_lesson;
		
					if ($objectives_link_can_be_inserted)
					{	$this->obj_db->query($sql);
						$this->__errors[] = __LINE__. ' '. mysql_error();
						if (mysql_errno() > 0)
						{	
							$this->__errors[] = $sql;
						
						}
					}
				}
			}

			// need to impliment this in the dataexchange
			if ($nodette->tag == 'ASSIGNMENTS')
			{
				foreach($nodette->children as $nizod)
				{
					$assignment_link_can_be_inserted = false;
					$sql = '
					REPLACE INTO class_assignments_link
					SET';
			
					if ($this->mode != 'copy')
					{	
						if ((int)$nizode->value > 0)
						{	$assignment_link_can_be_inserted = true;
						}
						$sql .= '
						id_class_assignments='.$nizod->value; 
					} else 
					{	
						if ((int)$this->map_assignments[$nizod->value] > 0)
						{	$assignment_link_can_be_inserted = true;
						}
						$sql .= '
						id_class_assignments='.$this->map_assignments[$nizod->value];
					}
					$sql .= ', id_class_lessons='.$id_lesson;
					
					if ($assignment_link_can_be_inserted)
					{	$this->obj_db->query($sql);
						$this->__errors[] = __LINE__. ' '. mysql_error();
					}
				}
				
			}
			
		}
		
	}
	
	
	/**
	 *	@@DONE
	 */
	function xml_CLASSDOCLIB_FOLDERS($node)
	{
		foreach($node as $nodette)
		{
			$a_files = array();
			
			$sql = '
			REPLACE INTO classdoclib_Folders
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				pkey='.$nodette->attrs['PKEY'];
			}
			
			foreach($nodette->children as $field_node)
			{
				if ($field_node->tag == 'CLASSDOCLIB_FILES')
				{	$a_files = $field_node->children;
					//$this->xml_CLASSDOCLIB_FILES($field_node->children);
					continue;
				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', class_id='.$this->using_classes_id;
		
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);	
			$this->__errors[] = __LINE__. ' '. mysql_error();
			/// execute insert
			if ($this->mode == 'copy')
			{	$folder_id = $this->obj_db->getInsertID();
			} else 
			{	$folder_id = $nodette->attrs['PKEY'];
			}
			
			$this->xml_CLASSDOCLIB_FILES($a_files, $folder_id);
			// INSERT ON EVERY ROUND! OR stuff the sql into an array and roll through it at end of function.. or return it
		}
		
	}
	
	/**
	 *	@@DONE
	 */
	function xml_CLASSDOCLIB_FILES($node, $id_folder)
	{
		$base = DOCUMENT_ROOT.'../logicreate/classLibrary/';
		
		foreach($node as $nodette)
		{
			$diskname = '';
			
			$sql = '
			REPLACE INTO classdoclib_Files
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				pkey='.$nodette->attrs['PKEY'];
			}
			
			// hashes stay the same.. 
			foreach($nodette->children as $field_node)
			{	$org = null;
			
				if ($field_node->tag == 'DISKNAME')
				{	
					$orgDiskname = $field_node->value;
					if ($this->mode == 'copy')
					{	
	                	$field_node->value = md5(microtime().'RYANRULES'.uniqid().$field_node->value);
					}
					$diskname = $field_node->value;
					
	                $dir1 = substr($diskname,0,2);
	                $dir2 = substr($diskname,-2,2);
	                
	                //echo '<br><br>'. $base.$dir1. '/'. $dir2. '/'.$diskname;
	                
	                @mkdir($base.$dir1, 0777);
	                @mkdir($base.$dir1.'/'.$dir2, 0777);
	              
	                //$fp = @fopen($base.$dir1.'/'.$dir2.'/'.$diskname, "w+"); // overwrites any existing file
					
	                error_log('Copy: '.copy($this->home_dir.'library/'.$orgDiskname, $base.$dir1.'/'.$dir2.'/'.$diskname));
	                
	                //@fwrite($fp, file_get_contents($this->home_dir.'library/'.$orgDiskname), strlen(file_get_contents($this->home_dir.'library/'.$orgDiskname)));
					//@fclose($fp);
					
	                // push file into filesystem

				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
			$sql .=', folder='.$id_folder;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	
	/**
	 *	@@NOTE Only for restore, NOT copy
	 */
	function xml_CLASS_GRADEBOOK($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_gradebook
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_gradebook='.$nodette->attrs['ID_CLASS_GRADEBOOK'];
			}
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
						
		}
		
	}
	
	/**
	 *	@@NOT
	 */
	function xml_CLASS_GRADEBOOK_CATEGORIES($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_gradebook_categories
			SET';
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_gradebook_category='.$nodette->attrs['ID_CLASS_GRADEBOOK_CATEGORIES'];
			}
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
			if ($this->mode == 'copy')
			{	
				$this->map_gradebook_category[$nodette->attrs['ID_CLASS_GRADEBOOK_CATEGORIES']] = $this->obj_db->getInsertId();
			}

		}
		
	}
	
	/**
	 *	@@NOTE Only for restore, NOT copy
	 *		@@@@@@ WORK WITH ASSIGNMENT_ID.. not ATTACHED YET
	 */
	function xml_CLASS_GRADEBOOK_ENTRIES($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_gradebook_entries
			SET';
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_gradebook_entries='.$nodette->attrs['ID_CLASS_GRADEBOOK_ENTRIES'];
			}
			foreach($nodette->children as $field_node)
			{
				
				if ($field_node->tag == 'ID_CLASS_GRADEBOOK_CATEGORIES' && $this->mode == 'copy')
				{	$field_node->value = $this->map_gradebook_category[$field_node->value]; // assigning new category id
				}				
				if ($field_node->tag == 'ASSESSMENT_ID' && $field_node->value > 0 && $this->mode == 'copy')
				{	$field_node->value = $this->map_assessments[$field_node->value]; // assigning new assessment id
				}				
				if ($field_node->tag == 'ASSIGNMENT_ID' && $field_node->value > 0 && $this->mode == 'copy')
				{	$field_node->value = $this->map_assignments[$field_node->value]; // assigning new assignment id
					
				}
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}

			$sql .=', id_classes='.$this->using_classes_id;

			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}

			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
			if (mysql_errno() > 0)
			{	$this->__errors[] = $sql;
			}
			
			if ($this->mode == 'copy')
				$this->map_gradebook_entries[$nodette->attrs['ID_CLASS_GRADEBOOK_ENTRIES']] = $this->obj_db->getInsertId();

		}
		
	}
	
	
	/**
	 *	@@NOTE Only for restore, NOT copy
	 */
	function xml_CLASS_GRADEBOOK_VAL($node)
	{
		if ($this->mode == 'copy')
		{	return true;
		}
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO class_gradebook_val
			SET';
			if ($this->mode != 'copy')
			{	$sql .= '
				id_class_gradebook_val='.$nodette->attrs['ID_CLASS_GRADEBOOK_VAL'];
			}
			
			foreach($nodette->children as $field_node)
			{
				if ($field_node->tag == 'ID_CLASS_GRADEBOOK_ENTRIES' && $this->mode == 'copy')
				{	$field_node->value = $this->map_gradebook_entries[$field_node->value]; // assigning new category id
				}				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}

			$sql .=', id_classes='.$this->using_classes_id;

			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}

			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
		}
		
	}
	
	
	/**
	 *	@@NOTE Only for restore, NOT copy
	 */
	function xml_EXAM_SCHEDULE_CLASSES($node)
	{
		if ($this->mode == 'copy')
		{	return true;
		}
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO exam_schedule_classes
			SET
				id_exam_schedule_classes='.$nodette->attrs['ID_EXAM_SCHEDULE_CLASSES'];
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	/** 
	 *	These can not be used in COPY procedure 
	 *
	 *	@@NOTE Only for restore purposes
	 *
	 *	@@DONE
	 */
	function xml_ORIENTATION_CLASSES($node)
	{
		if ($this->mode == 'copy')
		{	return true;
		}
		
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO orientation_classes
			SET
				id_orientation_classes='.$nodette->attrs['ID_ORIENTATION_CLASSES'];
			
			foreach($nodette->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;	
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	
	/**
	 *	@@DONE
	 *
	 *	@@NOTE I'm not sure if this should be included in COPYS
	 */
	function xml_SEMINAR_CLASSES_DATES($node)
	{
		foreach($node as $announcement)
		{
			$sql = '
			REPLACE INTO seminar_classes_dates
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_seminar_classes_dates='.$announcement->attrs['ID_SEMINAR_CLASSES_DATES'];
			}
			
			foreach($announcement->children as $field_node)
			{
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	
	/**
	 *	@@DONE
	 */
	function xml_TEXTBOOK($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO textbook
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_textbook='.$nodette->attrs['ID_TEXTBOOK'];
			}
			
			foreach($nodette->children as $field_node)
			{
				if ($field_node->tag == 'INQUIRIES')
				{	$this->xml_TEXTBOOK_CLASSES($field_node->children);
					continue;
				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', id_classes='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
		}
		
	}
	
	
	/**
	 *	@@DONE	// accetp for status's
	 */
	function xml_TEXTBOOK_CLASSES($node)
	{
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO textbook_classes
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				id_textbook_classes='.$nodette->attrs['ID_TEXTBOOK_CLASSES'];
			}
			
			foreach($nodette->children as $field_node)
			{	
				if ($field_node->tag == 'STATUS' && $this->mode == 'copy')
				{	$field_node->value = 1; // setting it to pending
				}
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes(str_replace('\\\\', '', $field_node->value))).'\'';
			}

			$sql .=', id_classes='.$this->using_classes_id;

			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	
	/**
	 *	@@DONE
	 */
	function xml_ASSESSMENT($node)
	{
		
		
		foreach($node as $nodette)
		{
			$a_questions = array();
			
			$sql = '
			REPLACE INTO assessment
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				assessment_id='.$nodette->attrs['ASSESSMENT_ID'];
			}
			
			foreach($nodette->children as $field_node)
			{
				if ($field_node->tag == 'QUESTIONS')
				{	//$this->xml_ASSESSMENT_QUESTIONS($field_node->children);
					$a_questions = $field_node->children;
					continue;
				}
				if ($field_node->tag == 'ANSWERS')
				{	continue;
				}
				if ($field_node->tag == 'LOG')
				{	continue;
				}
				
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}
		
			$sql .=', class_id='.$this->using_classes_id;
			
			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->map_assessments[$nodette->attrs['ASSESSMENT_ID']] = $this->obj_db->getInsertID();
			$this->xml_ASSESSMENT_QUESTIONS($a_questions, $this->map_assessments[$nodette->attrs['ASSESSMENT_ID']]);
			$this->__errors[] = __LINE__. ' '. mysql_error();
			
		}
		
	}
	
	
	function xml_ASSESSMENT_QUESTIONS($node, $assessment_id)
	{
		if (is_array($node) && count($node) > 0)
		foreach($node as $nodette)
		{
			$sql = '
			REPLACE INTO assessment_question
			SET';
			
			if ($this->mode != 'copy')
			{	$sql .= '
				assessment_question_id='.$nodette->attrs['ASSESSMENT_QUESTION_ID'];
			}
			
			foreach($nodette->children as $field_node)
			{	
				if ($field_node->tag == 'STATUS' && $this->mode == 'copy')
				{	$field_node->value = 1; // setting it to pending
				}
				$sql .= ','."\n".strtolower($field_node->tag).'=\''. str_replace('\'', '\'\'',stripslashes($field_node->value)).'\'';
			}

			$sql .=', assessment_id='.$assessment_id;

			if ($this->mode == 'copy')
			{	$sql = $this->remove_first_comma($sql);
			}
			
			$this->obj_db->query($sql);
			$this->__errors[] = __LINE__. ' '. mysql_error();
		}
		
	}
	
	
	/**
	 *	$this->map_content holds the relationship between the [old]=new
	 *
	 *	@@NOTE Only ran on an IMPORT (duplication) not a restore
	 */
	function rebuildContent()
	{
		$db = DB::getHandle();
		$db_saver = DB::getHandle();
		
		$sql = '
			SELECT id_class_lesson_content, txText
			FROM class_lesson_content
			WHERE id_classes='.$this->using_classes_id.' AND 
			txText LIKE \'%classroom/lessons/event=viewcontent/id=%\'
			';
		
		$db->query($sql);
		
		while ($db->next_record())
		{	
			$i_replaced = false;
			$a_replacable_items = array(); //clobbering array (refreshing)
			
			$a_replacable_items = $this->find_all_items_and_id($db->Record['txText'], array('classroom/lessons/event=viewcontent/'));
			
			if (count($a_replacable_items) > 0)
			{
				foreach($a_replacable_items as $item)
				{
					$db->Record['txText'] = str_replace($item['fullstring'], $item['originalstring'].'id='.$this->map_content[$item['id']], $db->Record['txText']);
					$i_replaced = true;
				}
				
				
					
					//echo 'Replacing text on (Content): '. $db->Record['id_class_lesson_content']. '<br>';
					
					$sql = '
					UPDATE class_lesson_content
					SET txText=\''.str_replace('\'', '\'\'', stripslashes($db->Record['txText'])).'\'
					WHERE id_class_lesson_content='. $db->Record['id_class_lesson_content'];
					
					$db_saver->query($sql);
									
				
			}
			
		}
	}
	
	
	/**
	 */
	function find_all_items_and_id($STRING, $a_item)
    {
        $i=0;
        $a_return_item = array();
        $length = strlen($STRING);

        foreach($a_item as $item)
        { 	
        	$i=0; //reset on each iteration of item (pointer)
        	
        	if (strpos($STRING, $item. 'id=') > 0)
	        {	
	                while ($i< $length)
	                {
	                        $p = strpos($STRING, $item. 'id=', ($i+1));
	
	                        if ($i==$p || $p === false)
	                        {       break;
	                        }
	
	                        if ($p > $i)
	                        {       $x = strpos($STRING, '"', $p+1);
	                        		
	                        		// if the " (quote) is greater than 15 ( i dont want to stray to far.. we will stop
	                        		if (($x-($p+strlen($item. 'id='))) > 15)
	                        		{	$i= ($p+strlen($item. 'id='));
	                        			continue;
	                        		}
	                        	
	                                $a_return_item[] = array('fullstring' => substr($STRING, $p, ($x-$p)), 'originalstring'=>$item, 'id'=> array_pop(explode('=', substr($STRING, $p, ($x-$p)) )) );
                               	//debug($a_return_item);
	                                $i=$p;
	                        }
	                }
	        }
        
        }
        
    return $a_return_item;
    }
    
    
    
}

?>
